{"name":"Lean.Elab.BindersUtil","instances":[],"imports":["Init","Lean.Parser.Term"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/BindersUtil.lean#L64-L70","name":"Lean.Elab.Term.clearInMatch","docLink":"./Lean/Elab/BindersUtil.html#Lean.Elab.Term.clearInMatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/BindersUtil.lean#L57-L62","name":"Lean.Elab.Term.clearInMatchAlt","docLink":"./Lean/Elab/BindersUtil.html#Lean.Elab.Term.clearInMatchAlt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/BindersUtil.lean#L46-L54","name":"Lean.Elab.Term.expandMatchAlts?","docLink":"./Lean/Elab/BindersUtil.html#Lean.Elab.Term.expandMatchAlts?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/BindersUtil.lean#L42-L44","name":"Lean.Elab.Term.shouldExpandMatchAlt","docLink":"./Lean/Elab/BindersUtil.html#Lean.Elab.Term.shouldExpandMatchAlt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/BindersUtil.lean#L33-L40","name":"Lean.Elab.Term.expandMatchAlt","docLink":"./Lean/Elab/BindersUtil.html#Lean.Elab.Term.expandMatchAlt","doc":"Expand a match alternative such as `| 0 | 1 => rhs` to an array containing `| 0 => rhs` and `| 1 => rhs`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/BindersUtil.lean#L25-L28","name":"Lean.Elab.Term.getMatchAltsNumPatterns","docLink":"./Lean/Elab/BindersUtil.html#Lean.Elab.Term.getMatchAltsNumPatterns","doc":"Helper function for `expandEqnsIntoMatch` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/BindersUtil.lean#L16-L20","name":"Lean.Elab.Term.expandOptType","docLink":"./Lean/Elab/BindersUtil.html#Lean.Elab.Term.expandOptType","doc":"Recall that\n```\ndef typeSpec := leading_parser \" : \" >> termParser\ndef optType : Parser := optional typeSpec\n```\n"}]}