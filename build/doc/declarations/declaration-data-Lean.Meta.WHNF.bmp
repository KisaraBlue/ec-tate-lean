{"name":"Lean.Meta.WHNF","instances":[],"imports":["Init","Lean.Structure","Lean.Util.Recognizers","Lean.Meta.GetConst","Lean.Meta.FunInfo","Lean.Meta.Match.MatcherInfo","Lean.Meta.Match.MatchPatternAttr"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L857-L870","name":"Lean.Meta.reduceProjOf?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceProjOf?","doc":"If `e` is a projection function that satisfies `p`, then reduce it "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L838-L854","name":"Lean.Meta.whnfImp","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L787-L806","name":"Lean.Meta.reduceNat?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNat?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L782-L785","name":"Lean.Meta.reduceBinNatPred","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatPred","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L776-L780","name":"Lean.Meta.reduceBinNatOp","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L772-L774","name":"Lean.Meta.reduceUnaryNatOp","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceUnaryNatOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L765-L770","name":"Lean.Meta.withNatValue","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.withNatValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L753-L763","name":"Lean.Meta.reduceNative?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNative?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L751-L751","name":"Lean.Meta.reduceNatNative","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNative","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L750-L750","name":"Lean.Meta.reduceBoolNative","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNative","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L749-L749","name":"Lean.Meta.reduceNatNativeUnsafe","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNativeUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L748-L748","name":"Lean.Meta.reduceBoolNativeUnsafe","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNativeUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L732-L746","name":"Lean.Meta.reduceRecMatcher?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceRecMatcher?","doc":"Try to reduce matcher/recursor/quot applications. We say they are all \"morally\" recursor applications. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L724-L729","name":"Lean.Meta.whnfUntil","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfUntil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L714-L722","name":"Lean.Meta.whnfHeadPred","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfHeadPred","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L710-L712","name":"Lean.Meta.unfoldDefinition","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L629-L707","name":"Lean.Meta.unfoldDefinition?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition?","doc":"Unfold definition using \"smart unfolding\" if possible. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L622-L626","name":"Lean.Meta.unfoldProjInstWhenIntances?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInstWhenIntances?","doc":"Auxiliary method for unfolding a class projection. when transparency is set to `TransparencyMode.instances`.\nRecall that class instance projections are not marked with `[reducible]` because we want them to be\nin \"reducible canonical form\".\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L603-L615","name":"Lean.Meta.unfoldProjInst?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInst?","doc":"Auxiliary method for unfolding a class projection.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L582-L596","name":"Lean.Meta.smartUnfoldingReduce?.goMatch","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.goMatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L569-L580","name":"Lean.Meta.smartUnfoldingReduce?.go","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L566-L596","name":"Lean.Meta.smartUnfoldingReduce?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?","doc":"Recall that `_sunfold` auxiliary definitions contains the markers: `markSmartUnfoldingMatch` (*) and `markSmartUnfoldingMatchAlt` (**).\nFor example, consider the following definition\n```\ndef r (i j : Nat) : Nat :=\n  i +\n    match j with\n    | Nat.zero => 1\n    | Nat.succ j =>\n      i + match j with\n          | Nat.zero => 2\n          | Nat.succ j => r i j\n```\nproduces the following `_sunfold` auxiliary definition with the markers\n```\ndef r._sunfold (i j : Nat) : Nat :=\n  i +\n    (*) match j with\n    | Nat.zero => (**) 1\n    | Nat.succ j =>\n      i + (*) match j with\n          | Nat.zero => (**) 2\n          | Nat.succ j => (**) r i j\n```\n\n`match` expressions marked with `markSmartUnfoldingMatch` (*) must be reduced, otherwise the resulting term is not definitionally\n equal to the given expression. The recursion may be interrupted as soon as the annotation `markSmartUnfoldingAlt` (**) is reached.\n\nFor example, the term `r i j.succ.succ` reduces to the definitionally equal term `i + i * r i j`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L498-L534","name":"Lean.Meta.whnfCore.go","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L495-L534","name":"Lean.Meta.whnfCore","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore","doc":"Apply beta-reduction, zeta-reduction (i.e., unfold let local-decls), iota-reduction,\nexpand let-expressions, expand assigned meta-variables.\n\nThe parameter `deltaAtProj` controls how to reduce projections `s.i`. If `deltaAtProj == true`,\nthen delta reduction is used to reduce `s` (i.e., `whnf` is used), otherwise `whnfCore`.\nWe only set this flag to `false` when implementing `isDefEq`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L457-L460","name":"Lean.Meta.reduceProj?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceProj?","doc":"Reduce kernel projection `Expr.proj ..` expression. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L453-L454","name":"Lean.Meta.project?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.project?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L416-L441","name":"Lean.Meta.reduceMatcher?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceMatcher?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L378-L401","name":"Lean.Meta.canUnfoldAtMatcher","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.canUnfoldAtMatcher","doc":"The \"match\" compiler uses `if-then-else` expressions and other auxiliary declarations to compile match-expressions such as\n```\nmatch v with\n| 'a' => 1\n| 'b' => 2\n| _   => 3\n```\nbecause it is more efficient than using `casesOn` recursors.\nThe method `reduceMatcher?` fails if these auxiliary definitions (e.g., `ite`) cannot be unfolded in the current\ntransparency setting. This is problematic because tactics such as `simp` use `TransparencyMode.reducible`, and\nmost users assume that expressions such as\n```\nmatch 0 with\n| 0 => 1\n| 100 => 2\n| _ => 3\n```\nshould reduce in any transparency mode.\nThus, we define a custom `canUnfoldAtMatcher` predicate for `whnfMatcher`.\n\nThis solution is not very modular because modications at the `match` compiler require changes here.\nWe claim this is defensible because it is reducing the auxiliary declaration defined by the `match` compiler.\n\nAlternative solution: tactics that use `TransparencyMode.reducible` should rely on the equations we generated for match-expressions.\nThis solution is also not perfect because the match-expression above will not reduce during type checking when we are not using\n`TransparencyMode.default` or `TransparencyMode.all`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L344-L348","name":"Lean.Meta.ReduceMatcherResult","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L299-L326","name":"Lean.Meta.whnfEasyCases","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfEasyCases","doc":"Auxiliary combinator for handling easy WHNF cases. It takes a function for handling the \"hard\" cases as an argument "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L245-L291","name":"Lean.Meta.getStuckMVar?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.getStuckMVar?","doc":"Return `some (Expr.mvar mvarId)` if metavariable `mvarId` is blocking reduction. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L117-L122","name":"Lean.Meta.mkProjFn","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.mkProjFn","doc":"Create the `i`th projection `major`. It tries to use the auto-generated projection functions if available. Otherwise falls back\nto `Expr.proj`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L58-L60","name":"Lean.Meta.isAuxDef","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.isAuxDef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L51-L52","name":"Lean.Meta.smartUnfoldingMatchAlt?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatchAlt?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L48-L49","name":"Lean.Meta.markSmartUnfoldingMatchAlt","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatchAlt","doc":"Add auxiliary annotation to indicate expression `e` (a `match` alternative rhs) was successfully reduced by smart unfolding. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L44-L45","name":"Lean.Meta.smartUnfoldingMatch?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatch?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L41-L42","name":"Lean.Meta.markSmartUnfoldingMatch","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatch","doc":"Add auxiliary annotation to indicate the `match`-expression `e` must be reduced when performing smart unfolding. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L35-L38","name":"Lean.Meta.smartUnfolding","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfolding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L32-L33","name":"Lean.Meta.hasSmartUnfoldingDecl","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.hasSmartUnfoldingDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L29-L30","name":"Lean.Meta.mkSmartUnfoldingNameFor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.mkSmartUnfoldingNameFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L27-L27","name":"Lean.Meta.smartUnfoldingSuffix","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingSuffix","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/WHNF.lean#L25-L25","name":"Lean.Meta.getStructuralRecArgPos?","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.getStructuralRecArgPos?","doc":"Forward declaration. It is defined in the module `src/Lean/Elab/PreDefinition/Structural/Eqns.lean`.\nIt is possible to avoid this hack if we move `Structural.EqnInfo` and `Structural.eqnInfoExt`\nto this module.\n"}]}