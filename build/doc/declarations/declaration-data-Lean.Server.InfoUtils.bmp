{"name":"Lean.Server.InfoUtils","instances":[],"imports":["Init","Lean.PrettyPrinter"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L324-L334","name":"Lean.Elab.InfoTree.hasSorry.go","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hasSorry.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L322-L334","name":"Lean.Elab.InfoTree.hasSorry","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hasSorry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L318-L320","name":"Lean.Elab.InfoTree.termGoalAt?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.termGoalAt?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L304-L316","name":"Lean.Elab.InfoTree.goalsAt?.hasNestedTactic","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?.hasNestedTactic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L279-L316","name":"Lean.Elab.InfoTree.goalsAt?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?","doc":"Try to retrieve `TacticInfo` for `hoverPos`.\nWe retrieve all `TacticInfo` nodes s.t. `hoverPos` is inside the node's range plus trailing whitespace.\nWe usually prefer the innermost such nodes so that for composite tactics such as `induction`, we show the nested proofs' states.\nHowever, if `hoverPos` is after the tactic, we prefer nodes that are not indented relative to it, meaning that e.g. at `|` in\n```lean\nhave := by\n  exact foo\n|\n```\nwe show the (final, see below) state of `have`, not `exact`.\n\nMoreover, we instruct the LSP server to use the state after tactic execution if\n- the hover position is after the info's start position *and*\n- there is no nested tactic info after the hover position (tactic combinators should decide for themselves\n  where to show intermediate states by calling `withTacticInfoContext`) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L254-L261","name":"Lean.Elab.GoalsAtResult","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L247-L252","name":"Lean.Elab.Info.fmtHover?.isAtomicFormat","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?.isAtomicFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L218-L245","name":"Lean.Elab.Info.fmtHover?.fmtTermAndModule?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?.fmtTermAndModule?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L214-L216","name":"Lean.Elab.Info.fmtHover?.fmtModule?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?.fmtModule?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L195-L252","name":"Lean.Elab.Info.fmtHover?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?","doc":"Construct a hover popup, if any, from an info node in a context."},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L183-L192","name":"Lean.Elab.Info.docString?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.docString?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L177-L181","name":"Lean.Elab.Info.type?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.type?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L137-L175","name":"Lean.Elab.InfoTree.hoverableInfoAt?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hoverableInfoAt?","doc":"Find an info node, if any, which should be shown on hover/cursor at position `hoverPos`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L127-L134","name":"Lean.Elab.InfoTree.smallestInfo?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.smallestInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L121-L125","name":"Lean.Elab.Info.occursInside?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursInside?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L116-L119","name":"Lean.Elab.Info.occursBefore?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursBefore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L110-L114","name":"Lean.Elab.Info.isSmaller","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isSmaller","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L104-L107","name":"Lean.Elab.Info.size?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.size?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L101-L102","name":"Lean.Elab.Info.contains","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L98-L99","name":"Lean.Elab.Info.range?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.range?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L95-L96","name":"Lean.Elab.Info.tailPos?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.tailPos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L92-L93","name":"Lean.Elab.Info.pos?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.pos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L87-L90","name":"Lean.Elab.Info.lctx","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.lctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L75-L85","name":"Lean.Elab.Info.stx","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.stx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L69-L73","name":"Lean.Elab.InfoTree.getCompletionInfos","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.getCompletionInfos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L65-L67","name":"Lean.Elab.Info.isCompletion","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isCompletion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L61-L63","name":"Lean.Elab.Info.isTerm","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L52-L59","name":"Lean.Elab.InfoTree.foldInfo.go","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfo.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L50-L59","name":"Lean.Elab.InfoTree.foldInfo","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L41-L48","name":"Lean.Elab.InfoTree.deepestNodes","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.deepestNodes","doc":"For every branch of the `InfoTree`, find the deepest node in that branch for which `p` returns\n`some _`  and return the union of all such nodes. The visitor `p` is given a node together with\nits innermost surrounding `ContextInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L34-L35","name":"Lean.Elab.InfoTree.collectNodesBottomUp","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectNodesBottomUp","doc":"Visit nodes bottom-up, passing in a surrounding context (the innermost one) and the union of nested results (empty at leaves). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L27-L30","name":"Lean.Elab.InfoTree.visitM'","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM'","doc":"`InfoTree.visitM` specialized to `Unit` return type "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L17-L24","name":"Lean.Elab.InfoTree.visitM.go","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/InfoUtils.lean#L12-L24","name":"Lean.Elab.InfoTree.visitM","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM","doc":"Visit nodes, passing in a surrounding context (the innermost one) and accumulating results on the way back up. "}]}