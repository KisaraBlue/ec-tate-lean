{"name":"Lean.Elab.DeclarationRange","instances":[],"imports":["Init","Lean.Log","Lean.Parser.Command","Lean.DeclarationRange","Lean.Data.Lsp.Utf16"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/DeclarationRange.lean#L64-L68","name":"Lean.Elab.addAuxDeclarationRanges","docLink":"./Lean/Elab/DeclarationRange.html#Lean.Elab.addAuxDeclarationRanges","doc":"Auxiliary method for recording ranges for auxiliary declarations (e.g., fields, nested declarations, etc. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/DeclarationRange.lean#L54-L61","name":"Lean.Elab.addDeclarationRanges","docLink":"./Lean/Elab/DeclarationRange.html#Lean.Elab.addDeclarationRanges","doc":"Store the `range` and `selectionRange` for `declName` where `stx` is the whole syntax object decribing `declName`.\nThis method is for the builtin declarations only.\nUser-defined commands should use `Lean.addDeclarationRanges` to store this information for their commands. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/DeclarationRange.lean#L34-L47","name":"Lean.Elab.getDeclarationSelectionRef","docLink":"./Lean/Elab/DeclarationRange.html#Lean.Elab.getDeclarationSelectionRef","doc":"For most builtin declarations, the selection range is just its name, which is stored in the second position.\nExample:\n```\n\"def \" >> declId >> optDeclSig >> declVal\n```\nIf the declaration name is absent, we use the keyword instead.\nThis function converts the given `Syntax` into one that represents its \"selection range\".\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/DeclarationRange.lean#L13-L23","name":"Lean.Elab.getDeclarationRange","docLink":"./Lean/Elab/DeclarationRange.html#Lean.Elab.getDeclarationRange","doc":""}]}