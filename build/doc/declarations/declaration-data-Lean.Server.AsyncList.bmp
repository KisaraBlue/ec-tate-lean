{"name":"Lean.Server.AsyncList","instances":[{"typeNames":["IO.AsyncList"],"name":"IO.AsyncList.instInhabitedAsyncList","className":"Inhabited"},{"typeNames":["IO.AsyncList"],"name":"IO.AsyncList.instAppendAsyncList","className":"Append"},{"typeNames":["List","IO.AsyncList"],"name":"IO.AsyncList.instCoeListAsyncList","className":"Coe"}],"imports":["Init","Init.System.IO"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L107-L108","name":"IO.AsyncList.waitHead?","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitHead?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L95-L105","name":"IO.AsyncList.getFinishedPrefix","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefix","doc":"Retrieve the already-computed prefix of the list. If computation has finished with an error, return it as well. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L84-L92","name":"IO.AsyncList.waitFind?","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitFind?","doc":"Spawns a `Task` acting like `List.find?` but which will wait for tail evalution\nwhen necessary to traverse the list. If the tail terminates before a matching element\nis found, the task throws the terminating value. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L69-L79","name":"IO.AsyncList.waitAll","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitAll","doc":"Spawns a `Task` waiting on the prefix of elements for which `p` is true. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L58-L66","name":"IO.AsyncList.getAll","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.getAll","doc":"The computed, synchronous list. If an async tail was present, returns also\nits terminating value. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L45-L51","name":"IO.AsyncList.unfoldAsync.step","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.unfoldAsync.step","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L43-L54","name":"IO.AsyncList.unfoldAsync","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.unfoldAsync","doc":"A stateful step computation `f` is applied iteratively, forming an async\nstream. The stream ends once `f` returns `none` for the first time.\n\nFor cooperatively cancelling an ongoing computation, we recommend referencing\na cancellation token in `f` and checking it when appropriate. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L36-L36","name":"IO.AsyncList.instCoeListAsyncList","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.instCoeListAsyncList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L33-L34","name":"IO.AsyncList.ofList","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.ofList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L31-L31","name":"IO.AsyncList.instAppendAsyncList","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.instAppendAsyncList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L26-L29","name":"IO.AsyncList.append","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L23-L23","name":"IO.AsyncList.instInhabitedAsyncList","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.instInhabitedAsyncList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Server/AsyncList.lean#L16-L19","name":"IO.AsyncList","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList","doc":"An async IO list is like a lazy list but instead of being *unevaluated* `Thunk`s,\n`delayed` suffixes are `Task`s *being evaluated asynchronously*. A delayed suffix can signal the end\nof computation (successful or due to a failure) with a terminating value of type `Îµ`. "}]}