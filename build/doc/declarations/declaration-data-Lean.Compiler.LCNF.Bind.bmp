{"name":"Lean.Compiler.LCNF.Bind","instances":[{"typeNames":["Lean.Compiler.LCNF.CompilerM"],"name":"Lean.Compiler.LCNF.instMonadCodeBindCompilerM","className":"Lean.Compiler.LCNF.MonadCodeBind"},{"typeNames":["ReaderT"],"name":"Lean.Compiler.LCNF.instMonadCodeBindReaderT","className":"Lean.Compiler.LCNF.MonadCodeBind"},{"typeNames":["StateRefT'"],"name":"Lean.Compiler.LCNF.instMonadCodeBindStateRefT'","className":"Lean.Compiler.LCNF.MonadCodeBind"}],"imports":["Init","Lean.Compiler.LCNF.InferType"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L124-L126","name":"Lean.Compiler.LCNF.Decl.etaExpand","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.Decl.etaExpand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L120-L122","name":"Lean.Compiler.LCNF.FunDeclCore.etaExpand","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.FunDeclCore.etaExpand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L114-L118","name":"Lean.Compiler.LCNF.etaExpandCore?","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.etaExpandCore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L104-L112","name":"Lean.Compiler.LCNF.etaExpandCore","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.etaExpandCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L101-L102","name":"Lean.Compiler.LCNF.FunDeclCore.isEtaExpandCandidate","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.FunDeclCore.isEtaExpandCandidate","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L96-L99","name":"Lean.Compiler.LCNF.isEtaExpandCandidateCore","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.isEtaExpandCandidateCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L82-L94","name":"Lean.Compiler.LCNF.mkNewParams.go","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.mkNewParams.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L79-L94","name":"Lean.Compiler.LCNF.mkNewParams","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.mkNewParams","doc":"Create new parameters for the given arrow type.\nExample: if `type` is `Nat → Bool → Int`, the result is\nan array containing two new parameters with types `Nat` and `Bool`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L71-L72","name":"Lean.Compiler.LCNF.instMonadCodeBindStateRefT'","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.instMonadCodeBindStateRefT'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L68-L69","name":"Lean.Compiler.LCNF.instMonadCodeBindReaderT","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.instMonadCodeBindReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L65-L66","name":"Lean.Compiler.LCNF.instMonadCodeBindCompilerM","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.instMonadCodeBindCompilerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L29-L63","name":"Lean.Compiler.LCNF.CompilerM.codeBind.go","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.CompilerM.codeBind.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L26-L63","name":"Lean.Compiler.LCNF.CompilerM.codeBind","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.CompilerM.codeBind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L23-L24","name":"Lean.Compiler.LCNF.Code.bind","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.Code.bind","doc":"Return code that is equivalent to `c >>= f`. That is, executes `c`, and then `f x`, where\n`x` is a variable that contains the result of `c`'s computation.\n\nIf `c` contains a jump to a join point `jp_i` not declared in `c`, we throw an exception because\nan invalid block would be generated. It would be invalid because `f` would not\nbe applied to `jp_i`. Note that, we could have decided to create a copy of `jp_i` where we apply `f` to it,\nby we decided to not do it to avoid code duplication.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Bind.lean#L11-L12","name":"Lean.Compiler.LCNF.MonadCodeBind","docLink":"./Lean/Compiler/LCNF/Bind.html#Lean.Compiler.LCNF.MonadCodeBind","doc":"Helper class for lifting `CompilerM.codeBind` "}]}