{"name":"Lean.Meta.Tactic.Replace","instances":[],"imports":["Init","Lean.Util.ForEachExpr","Lean.Meta.AppBuilder","Lean.Meta.MatchUtil","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.Revert","Lean.Meta.Tactic.Intro","Lean.Meta.Tactic.Clear","Lean.Meta.Tactic.Assert"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L183-L184","name":"Lean.Meta.modifyTargetEqLHS","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.Meta.modifyTargetEqLHS","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L175-L180","name":"Lean.MVarId.modifyTargetEqLHS","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.MVarId.modifyTargetEqLHS","doc":"Modify `mvarId` target type left-hand-side using `f`.\nThrow an error if target type is not an equality.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L168-L169","name":"Lean.Meta.modifyTarget","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.Meta.modifyTarget","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L162-L165","name":"Lean.MVarId.modifyTarget","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.MVarId.modifyTarget","doc":"Modify `mvarId` target type using `f`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L156-L157","name":"Lean.Meta.changeLocalDecl","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.Meta.changeLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L136-L153","name":"Lean.MVarId.changeLocalDecl","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.MVarId.changeLocalDecl","doc":"Replace the type of the free variable `fvarId` with `typeNew`.\nIf `checkDefEq = false`, this method assumes that `typeNew` is definitionally equal to `fvarId` type.\nIf `checkDefEq = true`, throw an error if `typeNew` is not definitionally equal to `fvarId` type.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L128-L129","name":"Lean.Meta.change","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.Meta.change","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L120-L125","name":"Lean.MVarId.change","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.MVarId.change","doc":"Replace the target type of `mvarId` with `typeNew`.\nIf `checkDefEq = false`, this method assumes that `typeNew` is definitionally equal to the current target type.\nIf `checkDefEq = true`, throw an error if `typeNew` is not definitionally equal to the current target type.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L112-L113","name":"Lean.Meta.replaceLocalDeclDefEq","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.Meta.replaceLocalDeclDefEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L100-L109","name":"Lean.MVarId.replaceLocalDeclDefEq","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.MVarId.replaceLocalDeclDefEq","doc":"Replace the type of `fvarId` at `mvarId` with `typeNew`.\nRemark: this method assumes that `typeNew` is definitionally equal to the current type of `fvarId`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L93-L94","name":"Lean.Meta.replaceLocalDecl","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.Meta.replaceLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L89-L90","name":"Lean.MVarId.replaceLocalDecl","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.MVarId.replaceLocalDecl","doc":"Replace type of the local declaration with id `fvarId` with one with the same user-facing name, but with type `typeNew`.\nThis method assumes `eqProof` is a proof that type of `fvarId` is equal to `typeNew`.\nThis tactic actually adds a new declaration and (try to) clear the old one.\nIf the old one cannot be cleared, then at least its user-facing name becomes inaccessible.\nRemark: the new declaration is added immediately after `fvarId`.\n`typeNew` must be well-formed at `fvarId`, but `eqProof` may contain variables declared after `fvarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L58-L59","name":"Lean.Meta.replaceTargetDefEq","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.Meta.replaceTargetDefEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L44-L55","name":"Lean.MVarId.replaceTargetDefEq","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.MVarId.replaceTargetDefEq","doc":"Convert the given goal `Ctx |- target` into `Ctx |- targetNew`. It assumes the goals are definitionally equal.\nWe use the proof term\n```\n@id target mvarNew\n```\nto create a checkpoint. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L34-L35","name":"Lean.Meta.replaceTargetEq","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.Meta.replaceTargetEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Tactic/Replace.lean#L20-L31","name":"Lean.MVarId.replaceTargetEq","docLink":"./Lean/Meta/Tactic/Replace.html#Lean.MVarId.replaceTargetEq","doc":"Convert the given goal `Ctx |- target` into `Ctx |- targetNew` using an equality proof `eqProof : target = targetNew`.\nIt assumes `eqProof` has type `target = targetNew` "}]}