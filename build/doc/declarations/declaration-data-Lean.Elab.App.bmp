{"name":"Lean.Elab.App","instances":[{"typeNames":["Lean.Elab.Term.Arg"],"name":"Lean.Elab.Term.instToStringArg","className":"ToString"},{"typeNames":["Lean.Elab.Term.NamedArg"],"name":"Lean.Elab.Term.instToStringNamedArg","className":"ToString"}],"imports":["Init","Lean.Util.FindMVar","Lean.Parser.Term","Lean.Meta.KAbstract","Lean.Meta.Tactic.ElimInfo","Lean.Elab.Term","Lean.Elab.Binders","Lean.Elab.SyntheticMVars","Lean.Elab.Arg","Lean.Elab.RecAppSyntax"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1398-L1398","name":"Lean.Elab.Term.elabProj","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabProj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1397-L1397","name":"Lean.Elab.Term.elabChoice","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabChoice","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1389-L1395","name":"Lean.Elab.Term.elabExplicit","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1382-L1387","name":"Lean.Elab.Term.elabPipeProj","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabPipeProj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1381-L1381","name":"Lean.Elab.Term.elabExplicitUniv","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicitUniv","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1380-L1380","name":"Lean.Elab.Term.elabDotIdent","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabDotIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1379-L1379","name":"Lean.Elab.Term.elabNamedPattern","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabNamedPattern","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1378-L1378","name":"Lean.Elab.Term.elabIdent","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1370-L1373","name":"Lean.Elab.Term.elabApp","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L1160-L1161","name":"Lean.Elab.Term.elabExplicitUnivs","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicitUnivs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L890-L894","name":"Lean.Elab.Term.LValResolution","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution","doc":"Auxiliary inductive datatype that represents the resolution of an `LVal`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L873-L887","name":"Lean.Elab.Term.elabAppArgs.elabAsElim?","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAppArgs.elabAsElim?","doc":"Return `some info` if we should elaborate as an eliminator. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L842-L887","name":"Lean.Elab.Term.elabAppArgs","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAppArgs","doc":"Elaborate a `f`-application using `namedArgs` and `args` as the arguments.\n- `expectedType?` the expected type if available. It is used to propagate typing information only. This method does **not** ensure the result has this type.\n- `explicit = true` when notation `@` is used, and implicit arguments are assumed to be provided at `namedArgs` and `args`.\n- `ellipsis = true` when notation `..` is used. That is, we add `_` for missing arguments.\n- `resultIsOutParamSupport` is used to control whether special support is used when processing applications of functions that return\n   output parameter of some local instance. Example:\n   ```\n   GetElem.getElem : {Cont : Type u_1} → {Idx : Type u_2} → {elem : Type u_3} → {dom : cont → idx → Prop} → [self : GetElem cont idx elem dom] → (xs : cont) → (i : idx) → dom xs i → elem\n   ```\n   The result type `elem` is the output parameter of the local instance `self`.\n   When this parameter is set to `true`, we execute `synthesizeSyntheticMVarsUsingDefault`. For additional details, see comment at\n   `ElabAppArgs.resultIsOutParam`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L787-L808","name":"Lean.Elab.Term.ElabElim.main","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.main","doc":"Main loop of the `elimAsElab` procedure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L780-L784","name":"Lean.Elab.Term.ElabElim.mkImplicitArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.mkImplicitArg","doc":"Create an implicit argument using the given `BinderInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L773-L777","name":"Lean.Elab.Term.ElabElim.saveArgInfo","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.saveArgInfo","doc":"Save information for producing error messages. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L761-L762","name":"Lean.Elab.Term.ElabElim.addDiscr","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.addDiscr","doc":"Push the given expression into the `discrs` field in the state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L757-L758","name":"Lean.Elab.Term.ElabElim.setMotive","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.setMotive","doc":"Set the `motive` field in the state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L741-L754","name":"Lean.Elab.Term.ElabElim.getNextArg?","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.getNextArg?","doc":"Return the next argument to be processed.\nThe result is `.none` if it is an implicit argument which was not provided using a named argument.\nThe result is `.undef` if `args` is empty and `namedArgs` does contain an entry for `binderName`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L705-L734","name":"Lean.Elab.Term.ElabElim.finalize","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.finalize","doc":"Contruct the resulting application after all discriminants have bee elaborated, and we have\nconsumed as many given arguments as possible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L689-L699","name":"Lean.Elab.Term.ElabElim.revertArgs","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.revertArgs","doc":"If the eliminator is over-applied, we \"revert\" the extra arguments. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L680-L686","name":"Lean.Elab.Term.ElabElim.mkMotive","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.mkMotive","doc":"Infer the `motive` using the expected type by `kabstract`ing the discriminants. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L677-L677","name":"Lean.Elab.Term.ElabElim.M","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L659-L675","name":"Lean.Elab.Term.ElabElim.State","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State","doc":"State of the `elab_as_elim` elaboration procedure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L654-L656","name":"Lean.Elab.Term.ElabElim.Context","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context","doc":"Context of the `elab_as_elim` elaboration procedure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L639-L648","name":"Lean.Elab.Term.elabAsElim","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAsElim","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L611-L633","name":"Lean.Elab.Term.ElabAppArgs.main","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.main","doc":"Elaborate function application arguments. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L212-L213","name":"Lean.Elab.Term.ElabAppArgs.eraseNamedArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.eraseNamedArg","doc":"Remove named argument with name `binderName` from `namedArgs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L171-L175","name":"Lean.Elab.Term.ElabAppArgs.synthesizeAppInstMVars","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.synthesizeAppInstMVars","doc":"Try to synthesize metavariables are `instMVars` using type class resolution.\nThe ones that cannot be synthesized yet are registered.\nRemark: we use this method before trying to apply coercions to function. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L161-L161","name":"Lean.Elab.Term.ElabAppArgs.M","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L126-L159","name":"Lean.Elab.Term.ElabAppArgs.State","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State","doc":"Auxiliary structure for elaborating the application `f args namedArgs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L83-L123","name":"Lean.Elab.Term.ElabAppArgs.Context","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L69-L70","name":"Lean.Elab.Term.eraseNamedArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.eraseNamedArg","doc":"Erase entry for `binderName` from `namedArgs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L58-L62","name":"Lean.Elab.Term.synthesizeAppInstMVars","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.synthesizeAppInstMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L33-L36","name":"Lean.Elab.Term.throwInvalidNamedArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.throwInvalidNamedArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L30-L31","name":"Lean.Elab.Term.instToStringNamedArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.instToStringNamedArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L25-L28","name":"Lean.Elab.Term.instToStringArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.instToStringArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L22-L23","name":"Lean.Elab.Term.hasElabWithoutExpectedType","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.hasElabWithoutExpectedType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/App.lean#L19-L20","name":"Lean.Elab.Term.elabWithoutExpectedTypeAttr","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabWithoutExpectedTypeAttr","doc":""}]}