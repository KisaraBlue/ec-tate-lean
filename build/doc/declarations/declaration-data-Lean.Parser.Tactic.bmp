{"name":"Lean.Parser.Tactic","instances":[],"imports":["Init","Lean.Parser.Term"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Parser/Tactic.lean#L91-L92","name":"Lean.Parser.Tactic.nativeDecide","docLink":"./Lean/Parser/Tactic.html#Lean.Parser.Tactic.nativeDecide","doc":"`native_decide` will attempt to prove a goal of type `p` by synthesizing an instance\nof `Decidable p` and then evaluating it to `isTrue ..`. Unlike `decide`, this\nuses `#eval` to evaluate the decidability instance.\n\nThis should be used with care because it adds the entire lean compiler to the trusted\npart, and the axiom `ofReduceBool` will show up in `#print axioms` for theorems using\nthis method or anything that transitively depends on them. Nevertheless, because it is\ncompiled, this can be significantly more efficient than using `decide`, and for very\nlarge computations this is one way to run external programs and trust the result.\n```\nexample : (List.range 1000).length = 1000 := by native_decide\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Parser/Tactic.lean#L75-L76","name":"Lean.Parser.Tactic.decide","docLink":"./Lean/Parser/Tactic.html#Lean.Parser.Tactic.decide","doc":"`decide` will attempt to prove a goal of type `p` by synthesizing an instance\nof `Decidable p` and then evaluating it to `isTrue ..`. Because this uses kernel\ncomputation to evaluate the term, it may not work in the presence of definitions\nby well founded recursion, since this requires reducing proofs.\n```\nexample : 2 + 2 â‰  5 := by decide\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Parser/Tactic.lean#L64-L65","name":"Lean.Parser.Tactic.introMatch","docLink":"./Lean/Parser/Tactic.html#Lean.Parser.Tactic.introMatch","doc":"The tactic\n```\nintro\n| pat1 => tac1\n| pat2 => tac2\n```\nis the same as:\n```\nintro x\nmatch x with\n| pat1 => tac1\n| pat2 => tac2\n```\nThat is, `intro` can be followed by match arms and it introduces the values while\ndoing a pattern match. This is equivalent to `fun` with match arms in term mode.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Parser/Tactic.lean#L42-L45","name":"Lean.Parser.Tactic.match","docLink":"./Lean/Parser/Tactic.html#Lean.Parser.Tactic.match","doc":"`match` performs case analysis on one or more expressions.\nSee [Induction and Recursion][tpil4].\nThe syntax for the `match` tactic is the same as term-mode `match`, except that\nthe match arms are tactics instead of expressions.\n```\nexample (n : Nat) : n = n := by\n  match n with\n  | 0 => rfl\n  | i+1 => simp\n```\n\n[tpil4]: https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Parser/Tactic.lean#L27-L27","name":"Lean.Parser.Tactic.matchAlts","docLink":"./Lean/Parser/Tactic.html#Lean.Parser.Tactic.matchAlts","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Parser/Tactic.lean#L26-L26","name":"Lean.Parser.Tactic.matchRhs","docLink":"./Lean/Parser/Tactic.html#Lean.Parser.Tactic.matchRhs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Parser/Tactic.lean#L24-L24","name":"Lean.Parser.Tactic.nestedTactic","docLink":"./Lean/Parser/Tactic.html#Lean.Parser.Tactic.nestedTactic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Parser/Tactic.lean#L21-L22","name":"Lean.Parser.Tactic.unknown","docLink":"./Lean/Parser/Tactic.html#Lean.Parser.Tactic.unknown","doc":""}]}