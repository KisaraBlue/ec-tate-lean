{"name":"Lean.Meta.GeneralizeTelescope","instances":[],"imports":["Init","Lean.Meta.KAbstract","Lean.Meta.Check"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/GeneralizeTelescope.lean#L87-L92","name":"Lean.Meta.generalizeTelescope","docLink":"./Lean/Meta/GeneralizeTelescope.html#Lean.Meta.generalizeTelescope","doc":"Given expressions `es := #[e_1, e_2, ..., e_n]`, execute `k` with the\nfree variables `(x_1 : A_1) (x_2 : A_2 [x_1]) ... (x_n : A_n [x_1, ... x_{n-1}])`.\nMoreover,\n- type of `e_1` is definitionally equal to `A_1`,\n- type of `e_2` is definitionally equal to `A_2[e_1]`.\n- ...\n- type of `e_n` is definitionally equal to `A_n[e_1, ..., e_{n-1}]`.\n\nThis method tries to avoid the creation of new free variables. For example, if `e_i` is a\nfree variable `x_i` and it is not a let-declaration variable, and its type does not depend on\nprevious `e_j`s, the method will just use `x_i`.\n\nThe telescope `x_1 ... x_n` can be used to create lambda and forall abstractions.\nMoreover, for any type correct lambda abstraction `f` constructed using `mkForall #[x_1, ..., x_n] ...`,\nThe application `f e_1 ... e_n` is also type correct.\n\nThe `kabstract` method is used to \"locate\" and abstract forward dependencies.\nThat is, an occurrence of `e_i` in the of `e_j` for `j > i`.\n\nThe method checks whether the abstract types `A_i` are type correct. Here is an example\nwhere `generalizeTelescope` fails to create the telescope `x_1 ... x_n`.\nAssume the local context contains `(n : Nat := 10) (xs : Vec Nat n) (ys : Vec Nat 10) (h : xs = ys)`.\nThen, assume we invoke `generalizeTelescope` with `es := #[10, xs, ys, h]`\nA type error is detected when processing `h`'s type. At this point, the method had successfully produced\n```\n  (x_1 : Nat) (xs : Vec Nat n) (x_2 : Vec Nat x_1)\n```\nand the type for the new variable abstracting `h` is `xs = x_2` which is not type correct. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/GeneralizeTelescope.lean#L32-L52","name":"Lean.Meta.GeneralizeTelescope.generalizeTelescopeAux","docLink":"./Lean/Meta/GeneralizeTelescope.html#Lean.Meta.GeneralizeTelescope.generalizeTelescopeAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/GeneralizeTelescope.lean#L17-L30","name":"Lean.Meta.GeneralizeTelescope.updateTypes","docLink":"./Lean/Meta/GeneralizeTelescope.html#Lean.Meta.GeneralizeTelescope.updateTypes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/GeneralizeTelescope.lean#L12-L15","name":"Lean.Meta.GeneralizeTelescope.Entry","docLink":"./Lean/Meta/GeneralizeTelescope.html#Lean.Meta.GeneralizeTelescope.Entry","doc":""}]}