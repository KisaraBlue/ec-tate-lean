{"name":"Lean.Util.Path","instances":[],"imports":["Init","Lean.Data.Name"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L146-L153","name":"Lean.findSysroot","docLink":"./Lean/Util/Path.html#Lean.findSysroot","doc":"Find the system root of the given `lean` command\nby calling `lean --print-prefix` and returning the path it prints.\nDefaults to trying the `lean` in `PATH`.\nIf set, the `LEAN_SYSROOT` environment variable takes precedence.\nNote that the called `lean` binary might not be part of the system root,\ne.g. in the case of `elan`'s proxy binary.\nUsers internal to Lean should use `Lean.getBuildDir` instead.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L128-L135","name":"Lean.searchModuleNameOfFileName","docLink":"./Lean/Util/Path.html#Lean.searchModuleNameOfFileName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L112-L126","name":"Lean.moduleNameOfFileName","docLink":"./Lean/Util/Path.html#Lean.moduleNameOfFileName","doc":"Infer module name of source file name. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L99-L105","name":"Lean.findOLean.maybeThisOne","docLink":"./Lean/Util/Path.html#Lean.findOLean.maybeThisOne","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L92-L108","name":"Lean.findOLean","docLink":"./Lean/Util/Path.html#Lean.findOLean","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L84-L86","name":"Lean.initSearchPath","docLink":"./Lean/Util/Path.html#Lean.initSearchPath","doc":"Initialize Lean's search path given Lean's system root and an initial search path.\nThe system root can be obtained via `getBuildDir` (for internal use) or\n`findSysroot` (for external users). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L74-L78","name":"Lean.addSearchPathFromEnv","docLink":"./Lean/Util/Path.html#Lean.addSearchPathFromEnv","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L71-L72","name":"Lean.getBuiltinSearchPath","docLink":"./Lean/Util/Path.html#Lean.getBuiltinSearchPath","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L64-L69","name":"Lean.getLibDir","docLink":"./Lean/Util/Path.html#Lean.getLibDir","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L60-L61","name":"Lean.getBuildDir","docLink":"./Lean/Util/Path.html#Lean.getBuildDir","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L57-L57","name":"Lean.searchPathRef","docLink":"./Lean/Util/Path.html#Lean.searchPathRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L48-L53","name":"Lean.SearchPath.findAllWithExt","docLink":"./Lean/Util/Path.html#Lean.SearchPath.findAllWithExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L42-L46","name":"Lean.SearchPath.findModuleWithExt","docLink":"./Lean/Util/Path.html#Lean.SearchPath.findModuleWithExt","doc":"Like `findWithExt`, but ensures the returned path exists. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L35-L39","name":"Lean.SearchPath.findWithExt","docLink":"./Lean/Util/Path.html#Lean.SearchPath.findWithExt","doc":"If the package of `mod` can be found in `sp`, return the path with extension\n`ext` (`lean` or `olean`) corresponding to `mod`. Otherwise, return `none`. Does\nnot check whether the returned path exists. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L28-L28","name":"Lean.SearchPath","docLink":"./Lean/Util/Path.html#Lean.SearchPath","doc":"A `.olean' search path. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L22-L25","name":"Lean.modToFilePath.go","docLink":"./Lean/Util/Path.html#Lean.modToFilePath.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L19-L25","name":"Lean.modToFilePath","docLink":"./Lean/Util/Path.html#Lean.modToFilePath","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Util/Path.lean#L16-L17","name":"Lean.realPathNormalized","docLink":"./Lean/Util/Path.html#Lean.realPathNormalized","doc":""}]}