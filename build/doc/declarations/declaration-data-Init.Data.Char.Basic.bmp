{"name":"Init.Data.Char.Basic","instances":[{"typeNames":["Char"],"name":"Char.instLTChar","className":"LT"},{"typeNames":["Char"],"name":"Char.instLEChar","className":"LE"},{"typeNames":["LT.lt","Char","Char.instLTChar"],"name":"Char.instDecidableLtCharInstLTChar","className":"Decidable"},{"typeNames":["LE.le","Char","Char.instLEChar"],"name":"Char.instDecidableLeCharInstLEChar","className":"Decidable"},{"typeNames":["Char"],"name":"Char.instInhabitedChar","className":"Inhabited"}],"imports":["Init.Data.UInt"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L94-L96","name":"Char.toUpper","docLink":"./Init/Data/Char/Basic.html#Char.toUpper","doc":"Convert a lower case character to its upper case character.\n\nOnly works on basic latin letters.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L86-L88","name":"Char.toLower","docLink":"./Init/Data/Char/Basic.html#Char.toLower","doc":"Convert an upper case character to its lower case character.\n\nOnly works on basic latin letters.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L79-L80","name":"Char.isAlphanum","docLink":"./Init/Data/Char/Basic.html#Char.isAlphanum","doc":"Is the character in `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`? "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L75-L76","name":"Char.isDigit","docLink":"./Init/Data/Char/Basic.html#Char.isDigit","doc":"Is the character in `0123456789`? "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L71-L72","name":"Char.isAlpha","docLink":"./Init/Data/Char/Basic.html#Char.isAlpha","doc":"Is the character in `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`? "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L67-L68","name":"Char.isLower","docLink":"./Init/Data/Char/Basic.html#Char.isLower","doc":"Is the character in `abcdefghijklmnopqrstuvwxyz`? "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L63-L64","name":"Char.isUpper","docLink":"./Init/Data/Char/Basic.html#Char.isUpper","doc":"Is the character in `ABCDEFGHIJKLMNOPQRSTUVWXYZ`? "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L59-L60","name":"Char.isWhitespace","docLink":"./Init/Data/Char/Basic.html#Char.isWhitespace","doc":"Is the character a space (U+0020) a tab (U+0009), a carriage return (U+000D) or a newline (U+000A)? "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L55-L56","name":"Char.instInhabitedChar","docLink":"./Init/Data/Char/Basic.html#Char.instInhabitedChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L52-L53","name":"Char.toNat","docLink":"./Init/Data/Char/Basic.html#Char.toNat","doc":"Underlying unicode code point as a `Nat`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L48-L49","name":"Char.isValidChar_zero","docLink":"./Init/Data/Char/Basic.html#Char.isValidChar_zero","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L43-L46","name":"Char.isValidChar_of_isValidChar_Nat","docLink":"./Init/Data/Char/Basic.html#Char.isValidChar_of_isValidChar_Nat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L34-L41","name":"Char.isValidUInt32","docLink":"./Init/Data/Char/Basic.html#Char.isValidUInt32","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L31-L32","name":"Char.isValidCharNat","docLink":"./Init/Data/Char/Basic.html#Char.isValidCharNat","doc":"Determines if the given nat is a valid [Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value)."},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L27-L28","name":"Char.instDecidableLeCharInstLEChar","docLink":"./Init/Data/Char/Basic.html#Char.instDecidableLeCharInstLEChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L24-L25","name":"Char.instDecidableLtCharInstLTChar","docLink":"./Init/Data/Char/Basic.html#Char.instDecidableLtCharInstLTChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L22-L22","name":"Char.instLEChar","docLink":"./Init/Data/Char/Basic.html#Char.instLEChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L21-L21","name":"Char.instLTChar","docLink":"./Init/Data/Char/Basic.html#Char.instLTChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L19-L19","name":"Char.le","docLink":"./Init/Data/Char/Basic.html#Char.le","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L18-L18","name":"Char.lt","docLink":"./Init/Data/Char/Basic.html#Char.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Char/Basic.lean#L13-L14","name":"isValidChar","docLink":"./Init/Data/Char/Basic.html#isValidChar","doc":"Determines if the given integer is a valid [Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value).\n\nNote that values in `[0xd800, 0xdfff]` are reserved for [UTF-16 surrogate pairs](https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates).\n"}]}