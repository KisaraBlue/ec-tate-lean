{"name":"Lean.Elab.Extra","instances":[],"imports":["Init","Lean.Elab.App","Lean.Elab.BuiltinNotation"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L482-L497","name":"Lean.Elab.Term.Op.elabDefaultOrNonempty","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabDefaultOrNonempty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L479-L479","name":"Lean.Elab.Term.Op.elabBinRelNoProp","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelNoProp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L477-L477","name":"Lean.Elab.Term.Op.elabBinRel","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRel","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L470-L475","name":"Lean.Elab.Term.Op.elabBinRelCore.toBoolIfNecessary","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelCore.toBoolIfNecessary","doc":"If `noProp == true` and `e` has type `Prop`, then coerce it to `Bool`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L411-L475","name":"Lean.Elab.Term.Op.elabBinRelCore","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelCore","doc":"Elaboration functionf for `binrel%` and `binrel_no_prop%` notations.\nWe use the infrastructure for `binop%` to make sure we propagate information between the left and right hand sides\nof a binary relation.\n\nRecall that the `binrel_no_prop%` notation is used for relations such as `==` which do not support `Prop`, but\nwe still want to be able to write `(5 > 2) == (2 > 1)`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L401-L401","name":"Lean.Elab.Term.Op.elabUnOp","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabUnOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L398-L398","name":"Lean.Elab.Term.Op.elabBinOpLazy","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOpLazy","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L395-L395","name":"Lean.Elab.Term.Op.elabBinOp","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L391-L392","name":"Lean.Elab.Term.Op.elabOp","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L51-L77","name":"Lean.Elab.Term.elabForIn'","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Extra.lean#L25-L49","name":"Lean.Elab.Term.elabForIn","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn","doc":""}]}