{"name":"Init.Data.List.BasicAux","instances":[{"typeNames":["List","List","LE.le","List.instLEList"],"name":"List.instAntisymmListLeInstLEList","className":"Antisymm"}],"imports":["Init.Data.Nat.Linear","Init.Data.List.Basic","Init.Util"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L207-L208","name":"List.mapMono","docLink":"./Init/Data/List/BasicAux.html#List.mapMono","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L202-L205","name":"List.mapMonoM","docLink":"./Init/Data/List/BasicAux.html#List.mapMonoM","doc":"Monomorphic `List.mapM`. The internal implementation uses pointer equality, and does not allocate a new list\nif the result of each `f a` is a pointer equal value `a`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L184-L185","name":"List.instAntisymmListLeInstLEList","docLink":"./Init/Data/List/BasicAux.html#List.instAntisymmListLeInstLEList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L168-L182","name":"List.le_antisymm","docLink":"./Init/Data/List/BasicAux.html#List.le_antisymm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L160-L166","name":"List.sizeOf_get","docLink":"./Init/Data/List/BasicAux.html#List.sizeOf_get","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L155-L158","name":"List.append_cancel_right_eq","docLink":"./Init/Data/List/BasicAux.html#List.append_cancel_right_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L150-L153","name":"List.append_cancel_left_eq","docLink":"./Init/Data/List/BasicAux.html#List.append_cancel_left_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L143-L148","name":"List.append_cancel_right","docLink":"./Init/Data/List/BasicAux.html#List.append_cancel_right","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L136-L141","name":"List.append_cancel_left","docLink":"./Init/Data/List/BasicAux.html#List.append_cancel_left","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L127-L132","name":"List.tacticSizeOf_list_dec","docLink":"./Init/Data/List/BasicAux.html#List.tacticSizeOf_list_dec","doc":"This tactic, added to the `decreasing_trivial` toolbox, proves that\n`sizeOf a < sizeOf as` when `a ∈ as`, which is useful for well founded recursions\nover a nested inductive like `inductive T | mk : List T → T`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L119-L122","name":"List.sizeOf_lt_of_mem","docLink":"./Init/Data/List/BasicAux.html#List.sizeOf_lt_of_mem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L109-L117","name":"List.get_last","docLink":"./Init/Data/List/BasicAux.html#List.get_last","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L102-L107","name":"List.get_append_right","docLink":"./Init/Data/List/BasicAux.html#List.get_append_right","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L94-L100","name":"List.get_append_left","docLink":"./Init/Data/List/BasicAux.html#List.get_append_left","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L84-L92","name":"List.rotateRight","docLink":"./Init/Data/List/BasicAux.html#List.rotateRight","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L74-L82","name":"List.rotateLeft","docLink":"./Init/Data/List/BasicAux.html#List.rotateLeft","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L70-L72","name":"List.getLastD","docLink":"./Init/Data/List/BasicAux.html#List.getLastD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L66-L68","name":"List.getLast?","docLink":"./Init/Data/List/BasicAux.html#List.getLast?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L62-L64","name":"List.getLast!","docLink":"./Init/Data/List/BasicAux.html#List.getLast!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L57-L60","name":"List.getLast","docLink":"./Init/Data/List/BasicAux.html#List.getLast","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L53-L55","name":"List.tailD","docLink":"./Init/Data/List/BasicAux.html#List.tailD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L49-L51","name":"List.tail?","docLink":"./Init/Data/List/BasicAux.html#List.tail?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L45-L47","name":"List.tail!","docLink":"./Init/Data/List/BasicAux.html#List.tail!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L42-L43","name":"List.head","docLink":"./Init/Data/List/BasicAux.html#List.head","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L38-L40","name":"List.headD","docLink":"./Init/Data/List/BasicAux.html#List.headD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L34-L36","name":"List.head?","docLink":"./Init/Data/List/BasicAux.html#List.head?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L30-L32","name":"List.head!","docLink":"./Init/Data/List/BasicAux.html#List.head!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L27-L28","name":"List.getD","docLink":"./Init/Data/List/BasicAux.html#List.getD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L22-L25","name":"List.get?","docLink":"./Init/Data/List/BasicAux.html#List.get?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/List/BasicAux.lean#L17-L20","name":"List.get!","docLink":"./Init/Data/List/BasicAux.html#List.get!","doc":""}]}