{"name":"Lean.Meta.Tactic.Apply","instances":[],"imports":["Init","Lean.Util.FindMVar","Lean.Meta.SynthInstance","Lean.Meta.CollectMVars","Lean.Meta.Tactic.Util"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L203-L210","name":"Lean.MVarId.exfalso","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.MVarId.exfalso","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L200-L201","name":"Lean.Meta.splitAnd","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.splitAnd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L196-L197","name":"Lean.MVarId.splitAnd","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.MVarId.splitAnd","doc":"Apply `And.intro` as much as possible to goal `mvarId`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L178-L188","name":"Lean.Meta.splitAndCore.go","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.splitAndCore.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L170-L191","name":"Lean.Meta.splitAndCore","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.splitAndCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L167-L168","name":"Lean.Meta.apply","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.apply","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L141-L152","name":"Lean.MVarId.apply.go","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.MVarId.apply.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L109-L164","name":"Lean.MVarId.apply","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.MVarId.apply","doc":"Close the given goal using `apply e`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L74-L77","name":"Lean.Meta.postprocessAppMVars","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.postprocessAppMVars","doc":"If `synthAssignedInstances` is `true`, then `apply` will synthesize instance implicit arguments\neven if they have assigned by `isDefEq`, and then check whether the synthesized value matches the\none inferred. The `congr` tactic sets this flag to false.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L55-L67","name":"Lean.Meta.appendParentTag","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.appendParentTag","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L45-L53","name":"Lean.Meta.synthAppInstances","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.synthAppInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L38-L40","name":"Lean.Meta.getExpectedNumArgs","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.getExpectedNumArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L34-L36","name":"Lean.Meta.getExpectedNumArgsAux","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.getExpectedNumArgsAux","doc":"Compute the number of expected arguments and whether the result type is of the form\n(?m ...) where ?m is an unassigned metavariable.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L21-L28","name":"Lean.Meta.ApplyConfig","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.ApplyConfig","doc":"Configures the behaviour of the `apply` tactic. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Apply.lean#L17-L18","name":"Lean.Meta.ApplyNewGoals","docLink":"./Lean/Meta/Tactic/Apply.html#Lean.Meta.ApplyNewGoals","doc":"Controls which new mvars are turned in to goals by the `apply` tactic.\n- `nonDependentFirst`  mvars that don't depend on other goals appear first in the goal list.\n- `nonDependentOnly` only mvars that don't depend on other goals are added to goal list.\n- `all` all unassigned mvars are added to the goal list.\n"}]}