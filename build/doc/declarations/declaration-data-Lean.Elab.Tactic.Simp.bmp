{"name":"Lean.Elab.Tactic.Simp","instances":[{"typeNames":["Lean.Elab.Tactic.SimpKind"],"name":"Lean.Elab.Tactic.instInhabitedSimpKind","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.SimpKind"],"name":"Lean.Elab.Tactic.instBEqSimpKind","className":"BEq"}],"imports":["Init","Lean.Meta.Tactic.Simp","Lean.Meta.Tactic.Replace","Lean.Elab.BuiltinNotation","Lean.Elab.Tactic.Basic","Lean.Elab.Tactic.ElabTerm","Lean.Elab.Tactic.Location","Lean.Elab.Tactic.Config"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L357-L359","name":"Lean.Elab.Tactic.evalDSimp","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalDSimp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L348-L355","name":"Lean.Elab.Tactic.dsimpLocation.go","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L338-L355","name":"Lean.Elab.Tactic.dsimpLocation","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L329-L336","name":"Lean.Elab.Tactic.evalSimpAll","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimpAll","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L322-L327","name":"Lean.Elab.Tactic.evalSimp","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L311-L317","name":"Lean.Elab.Tactic.simpLocation.go","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L301-L317","name":"Lean.Elab.Tactic.simpLocation","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation","doc":"`simpLocation ctx discharge? varIdToLemmaId loc`\nruns the simplifier at locations specified by `loc`,\nusing the simp theorems collected in `ctx`\noptionally running a discharger specified in `discharge?` on generated subgoals.\n\nIts primary use is as the implementation of the\n`simp [...] at ...` and `simp only [...] at ...` syntaxes,\nbut can also be used by other tactics when a `Syntax` is not available.\n\nFor many tactics other than the simplifier,\none should use the `withLocation` tactic combinator\nwhen working with a `location`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L252-L285","name":"Lean.Elab.Tactic.traceSimpCall","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.traceSimpCall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L247-L250","name":"Lean.Elab.Tactic.tactic.simp.trace","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tactic.simp.trace","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L218-L245","name":"Lean.Elab.Tactic.mkSimpContext","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpContext","doc":"Create the `Simp.Context` for the `simp`, `dsimp`, and `simp_all` tactics.\nIf `kind != SimpKind.simp`, the `discharge` option must be `none`\n\nTODO: generate error message if non `rfl` theorems are provided as arguments to `dsimp`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L208-L210","name":"Lean.Elab.Tactic.MkSimpContextResult","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L206-L206","name":"Lean.Elab.Tactic.simpOnlyBuiltins","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyBuiltins","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L185-L204","name":"Lean.Elab.Tactic.elabSimpArgs.resolveSimpIdTheorem?","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs.resolveSimpIdTheorem?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L134-L204","name":"Lean.Elab.Tactic.elabSimpArgs","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs","doc":"Elaborate extra simp theorems provided to `simp`. `stx` is of the form `\"[\" simpTheorem,* \"]\"`\nIf `eraseLocal == true`, then we consider local declarations when resolving names for erased theorems (`- id`),\nthis option only makes sense for `simp_all` or `*` is used.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L124-L127","name":"Lean.Elab.Tactic.ResolveSimpIdResult","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L120-L122","name":"Lean.Elab.Tactic.ElabSimpArgsResult","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L85-L89","name":"Lean.Elab.Tactic.elabSimpConfig","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L65-L73","name":"Lean.Elab.Tactic.Simp.DischargeWrapper.with","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.with","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L61-L63","name":"Lean.Elab.Tactic.Simp.DischargeWrapper","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L36-L59","name":"Lean.Elab.Tactic.tacticToDischarge","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tacticToDischarge","doc":"Implement a `simp` discharge function using the given tactic syntax code.\nRecall that `simp` dischargers are in `SimpM` which does not have access to `Term.State`.\nWe need access to `Term.State` to store messages and update the info tree.\nThus, we create an `IO.ref` to track these changes at `Term.State` when we execute `tacticCode`.\nWe must set this reference with the current `Term.State` before we execute `simp` using the\ngenerated `Simp.Discharge`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L27-L27","name":"Lean.Elab.Tactic.instBEqSimpKind","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L27-L27","name":"Lean.Elab.Tactic.instInhabitedSimpKind","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L23-L27","name":"Lean.Elab.Tactic.SimpKind","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L21-L21","name":"Lean.Elab.Tactic.elabDSimpConfigCore","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabDSimpConfigCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L20-L20","name":"Lean.Elab.Tactic.elabSimpConfigCtxCore","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCtxCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Tactic/Simp.lean#L19-L19","name":"Lean.Elab.Tactic.elabSimpConfigCore","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCore","doc":""}]}