{"name":"Lean.Elab.PreDefinition.Eqns","instances":[{"typeNames":["Lean.Elab.Eqns.EqnInfoCore"],"name":"Lean.Elab.Eqns.instInhabitedEqnInfoCore","className":"Inhabited"},{"typeNames":["Lean.Elab.Eqns.UnfoldEqnExtState"],"name":"Lean.Elab.Eqns.instInhabitedUnfoldEqnExtState","className":"Inhabited"}],"imports":["Init","Lean.Meta.Eqns","Lean.Util.CollectFVars","Lean.Meta.Tactic.Split","Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Refl"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L376-L385","name":"Lean.Elab.Eqns.getUnfoldFor?","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.getUnfoldFor?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L358-L374","name":"Lean.Elab.Eqns.mkUnfoldEq","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldEq","doc":"Generate the \"unfold\" lemma for `declName`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L337-L354","name":"Lean.Elab.Eqns.mkUnfoldProof.go","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldProof.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L324-L355","name":"Lean.Elab.Eqns.mkUnfoldProof","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldProof","doc":"Auxiliary method for `mkUnfoldEq`. The structure is based on `mkEqnTypes`.\n`mvarId` is the goal to be proved. It is a goal of the form\n```\ndeclName x_1 ... x_n = body[x_1, ..., x_n]\n```\nThe proof is constracted using the automatically generated equational theorems.\nWe basically keep splitting the `match` and `if-then-else` expressions in the right hand side\nuntil one of the equational theorems is applicable.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L311-L312","name":"Lean.Elab.Eqns.unfoldEqnExt","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.unfoldEqnExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L308-L308","name":"Lean.Elab.Eqns.instInhabitedUnfoldEqnExtState","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedUnfoldEqnExtState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L306-L308","name":"Lean.Elab.Eqns.UnfoldEqnExtState","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.UnfoldEqnExtState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L303-L304","name":"Lean.Elab.Eqns.tryContradiction","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryContradiction","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L294-L301","name":"Lean.Elab.Eqns.whnfReducibleLHS?","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.whnfReducibleLHS?","doc":"Apply `whnfR` to lhs, return `none` if `lhs` was not modified "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L280-L284","name":"Lean.Elab.Eqns.deltaRHS?","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaRHS?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L274-L278","name":"Lean.Elab.Eqns.deltaLHS","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaLHS","doc":"Delta reduce the equation left-hand-side "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L252-L271","name":"Lean.Elab.Eqns.removeUnusedEqnHypotheses.go","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.removeUnusedEqnHypotheses.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L249-L271","name":"Lean.Elab.Eqns.removeUnusedEqnHypotheses","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.removeUnusedEqnHypotheses","doc":"Some of the hypotheses added by `mkEqnTypes` may not be used by the actual proof (i.e., `value` argument).\nThis method eliminates them.\n\nAlternative solution: improve `saveEqn` and make sure it never includes unnecessary hypotheses.\nThese hypotheses are leftovers from tactics such as `splitMatch?` used in `mkEqnTypes`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L221-L240","name":"Lean.Elab.Eqns.mkEqnTypes.go","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqnTypes.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L217-L240","name":"Lean.Elab.Eqns.mkEqnTypes","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqnTypes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L138-L147","name":"Lean.Elab.Eqns.simpEqnType.collect","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpEqnType.collect","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L110-L147","name":"Lean.Elab.Eqns.simpEqnType","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpEqnType","doc":"Eliminate `namedPatterns` from equation, and trivial hypotheses.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L103-L105","name":"Lean.Elab.Eqns.tryURefl","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryURefl","doc":"Try to close goal using `rfl` with smart unfolding turned off. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L92-L93","name":"Lean.Elab.Eqns.Context","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L81-L89","name":"Lean.Elab.Eqns.splitMatch?.go","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.splitMatch?.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L79-L90","name":"Lean.Elab.Eqns.splitMatch?","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.splitMatch?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L46-L48","name":"Lean.Elab.Eqns.simpIf?","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpIf?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L42-L44","name":"Lean.Elab.Eqns.simpMatch?","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpMatch?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L33-L40","name":"Lean.Elab.Eqns.funext?","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.funext?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L27-L31","name":"Lean.Elab.Eqns.expandRHS?","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expandRHS?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L22-L25","name":"Lean.Elab.Eqns.expand","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L20-L20","name":"Lean.Elab.Eqns.instInhabitedEqnInfoCore","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedEqnInfoCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/PreDefinition/Eqns.lean#L15-L20","name":"Lean.Elab.Eqns.EqnInfoCore","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore","doc":""}]}