{"name":"Lean.Meta.ExprTraverse","instances":[],"imports":["Init","Lean.Meta.Basic","Lean.SubExpr"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L94-L94","name":"Lean.Meta.traverseChildren","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseChildren","doc":"Maps `visit` on each child of the given expression.\n\nApplications, foralls, lambdas and let binders are bundled (as they are bundled in `Expr.traverseApp`, `traverseForall`, ...).\nSo `traverseChildren f e` where ``e = `(fn a₁ ... aₙ)`` will return\n``(← f `(fn)) (← f `(a₁)) ... (← f `(aₙ))`` rather than ``(← f `(fn a₁ ... aₙ₋₁)) (← f `(aₙ))``\n\nSee also `Lean.Core.traverseChildren`.\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L84-L84","name":"Lean.Meta.traverseLet","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseLet","doc":"Similar to `traverseLambda` and `traverseForall` but with let binders.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L81-L81","name":"Lean.Meta.traverseForall","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseForall","doc":"Given an expression ` (x₁ : α₁) → ... → (xₙ : αₙ) → b`, will run\n`f` on each of the variable types `αᵢ` and `b` with the correct MetaM context,\nreplacing the expression with the output of `f` and creating a new forall expression.\n(that is, correctly instantiating bound variables and repackaging them after)  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L75-L75","name":"Lean.Meta.traverseLambda","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseLambda","doc":"Given an expression `fun (x₁ : α₁) ... (xₙ : αₙ) => b`, will run\n`f` on each of the variable types `αᵢ` and `b` with the correct MetaM context,\nreplacing each expression with the output of `f` and creating a new lambda.\n(that is, correctly instantiating bound variables and repackaging them after)  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L61-L69","name":"Lean.Meta.traverseChildrenWithPos","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseChildrenWithPos","doc":"Similar to `Lean.Meta.traverseChildren` except that `visit` also includes a `Pos` argument so you can\ntrack the subexpression position. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L47-L57","name":"Lean.Meta.traverseLetWithPos.visit","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseLetWithPos.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L45-L57","name":"Lean.Meta.traverseLetWithPos","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseLetWithPos","doc":"Similar to `traverseLet` but with an additional pos argument to track position. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L35-L42","name":"Lean.Meta.traverseForallWithPos.visit","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseForallWithPos.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L33-L42","name":"Lean.Meta.traverseForallWithPos","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseForallWithPos","doc":"Similar to `traverseForall` but with an additional pos argument to track position. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L23-L30","name":"Lean.Meta.traverseLambdaWithPos.visit","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseLambdaWithPos.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/ExprTraverse.lean#L21-L30","name":"Lean.Meta.traverseLambdaWithPos","docLink":"./Lean/Meta/ExprTraverse.html#Lean.Meta.traverseLambdaWithPos","doc":"Similar to `traverseLambda` but with an additional pos argument to track position. "}]}