{"name":"Lean.Declaration","instances":[{"typeNames":["Lean.ReducibilityHints"],"name":"Lean.instInhabitedReducibilityHints","className":"Inhabited"},{"typeNames":["Lean.ConstantVal"],"name":"Lean.instInhabitedConstantVal","className":"Inhabited"},{"typeNames":["Lean.AxiomVal"],"name":"Lean.instInhabitedAxiomVal","className":"Inhabited"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instInhabitedDefinitionSafety","className":"Inhabited"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instBEqDefinitionSafety","className":"BEq"},{"typeNames":["Lean.DefinitionSafety"],"name":"Lean.instReprDefinitionSafety","className":"Repr"},{"typeNames":["Lean.DefinitionVal"],"name":"Lean.instInhabitedDefinitionVal","className":"Inhabited"},{"typeNames":["Lean.TheoremVal"],"name":"Lean.instInhabitedTheoremVal","className":"Inhabited"},{"typeNames":["Lean.OpaqueVal"],"name":"Lean.instInhabitedOpaqueVal","className":"Inhabited"},{"typeNames":["Lean.Constructor"],"name":"Lean.instInhabitedConstructor","className":"Inhabited"},{"typeNames":["Lean.InductiveType"],"name":"Lean.instInhabitedInductiveType","className":"Inhabited"},{"typeNames":["Lean.Declaration"],"name":"Lean.instInhabitedDeclaration","className":"Inhabited"},{"typeNames":["Lean.InductiveVal"],"name":"Lean.instInhabitedInductiveVal","className":"Inhabited"},{"typeNames":["Lean.ConstructorVal"],"name":"Lean.instInhabitedConstructorVal","className":"Inhabited"},{"typeNames":["Lean.RecursorRule"],"name":"Lean.instInhabitedRecursorRule","className":"Inhabited"},{"typeNames":["Lean.RecursorVal"],"name":"Lean.instInhabitedRecursorVal","className":"Inhabited"},{"typeNames":["Lean.QuotKind"],"name":"Lean.instInhabitedQuotKind","className":"Inhabited"},{"typeNames":["Lean.QuotVal"],"name":"Lean.instInhabitedQuotVal","className":"Inhabited"},{"typeNames":["Lean.ConstantInfo"],"name":"Lean.instInhabitedConstantInfo","className":"Inhabited"}],"imports":["Init","Lean.Expr"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L456-L457","name":"Lean.mkRecName","docLink":"./Lean/Declaration.html#Lean.mkRecName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L447-L452","name":"Lean.ConstantInfo.all","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.all","doc":"List of all (including this one) declarations in the same mutual block.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L440-L442","name":"Lean.ConstantInfo.isInductive","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isInductive","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L436-L438","name":"Lean.ConstantInfo.isCtor","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L432-L434","name":"Lean.ConstantInfo.hints","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.hints","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L427-L430","name":"Lean.ConstantInfo.value!","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.value!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L422-L425","name":"Lean.ConstantInfo.hasValue","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.hasValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L417-L420","name":"Lean.ConstantInfo.value?","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.value?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L414-L415","name":"Lean.ConstantInfo.type","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L411-L412","name":"Lean.ConstantInfo.numLevelParams","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.numLevelParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L408-L409","name":"Lean.ConstantInfo.levelParams","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.levelParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L405-L406","name":"Lean.ConstantInfo.name","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.name","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L401-L403","name":"Lean.ConstantInfo.isPartial","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isPartial","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L391-L399","name":"Lean.ConstantInfo.isUnsafe","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.isUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L381-L389","name":"Lean.ConstantInfo.toConstantVal","docLink":"./Lean/Declaration.html#Lean.ConstantInfo.toConstantVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L377-L377","name":"Lean.instInhabitedConstantInfo","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstantInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L368-L377","name":"Lean.ConstantInfo","docLink":"./Lean/Declaration.html#Lean.ConstantInfo","doc":"Information associated with constant declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L365-L365","name":"Lean.QuotVal.kindEx","docLink":"./Lean/Declaration.html#Lean.QuotVal.kindEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L361-L363","name":"Lean.mkQuotValEx","docLink":"./Lean/Declaration.html#Lean.mkQuotValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L358-L358","name":"Lean.instInhabitedQuotVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedQuotVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L356-L358","name":"Lean.QuotVal","docLink":"./Lean/Declaration.html#Lean.QuotVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L354-L354","name":"Lean.instInhabitedQuotKind","docLink":"./Lean/Declaration.html#Lean.instInhabitedQuotKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L349-L354","name":"Lean.QuotKind","docLink":"./Lean/Declaration.html#Lean.QuotKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L346-L347","name":"Lean.RecursorVal.getInduct","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getInduct","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L343-L344","name":"Lean.RecursorVal.getFirstMinorIdx","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getFirstMinorIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L340-L341","name":"Lean.RecursorVal.getFirstIndexIdx","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getFirstIndexIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L337-L338","name":"Lean.RecursorVal.getMajorIdx","docLink":"./Lean/Declaration.html#Lean.RecursorVal.getMajorIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L335-L335","name":"Lean.RecursorVal.isUnsafeEx","docLink":"./Lean/Declaration.html#Lean.RecursorVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L334-L334","name":"Lean.RecursorVal.kEx","docLink":"./Lean/Declaration.html#Lean.RecursorVal.kEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L328-L332","name":"Lean.mkRecursorValEx","docLink":"./Lean/Declaration.html#Lean.mkRecursorValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L325-L325","name":"Lean.instInhabitedRecursorVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedRecursorVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L301-L325","name":"Lean.RecursorVal","docLink":"./Lean/Declaration.html#Lean.RecursorVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L299-L299","name":"Lean.instInhabitedRecursorRule","docLink":"./Lean/Declaration.html#Lean.instInhabitedRecursorRule","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L292-L299","name":"Lean.RecursorRule","docLink":"./Lean/Declaration.html#Lean.RecursorRule","doc":"Information for reducing a recursor "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L289-L289","name":"Lean.ConstructorVal.isUnsafeEx","docLink":"./Lean/Declaration.html#Lean.ConstructorVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L278-L287","name":"Lean.mkConstructorValEx","docLink":"./Lean/Declaration.html#Lean.mkConstructorValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L275-L275","name":"Lean.instInhabitedConstructorVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstructorVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L265-L275","name":"Lean.ConstructorVal","docLink":"./Lean/Declaration.html#Lean.ConstructorVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L263-L263","name":"Lean.InductiveVal.numCtors","docLink":"./Lean/Declaration.html#Lean.InductiveVal.numCtors","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L261-L261","name":"Lean.InductiveVal.isNestedEx","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isNestedEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L260-L260","name":"Lean.InductiveVal.isReflexiveEx","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isReflexiveEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L259-L259","name":"Lean.InductiveVal.isUnsafeEx","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L258-L258","name":"Lean.InductiveVal.isRecEx","docLink":"./Lean/Declaration.html#Lean.InductiveVal.isRecEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L243-L256","name":"Lean.mkInductiveValEx","docLink":"./Lean/Declaration.html#Lean.mkInductiveValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L240-L240","name":"Lean.instInhabitedInductiveVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedInductiveVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L201-L240","name":"Lean.InductiveVal","docLink":"./Lean/Declaration.html#Lean.InductiveVal","doc":"The kernel compiles (mutual) inductive declarations (see `inductiveDecls`) into a set of\n- `Declaration.inductDecl` (for each inductive datatype in the mutual Declaration),\n- `Declaration.ctorDecl` (for each Constructor in the mutual Declaration),\n- `Declaration.recDecl` (automatically generated recursors).\n\nThis data is used to implement iota-reduction efficiently and compile nested inductive\ndeclarations.\n\nA series of checks are performed by the kernel to check whether a `inductiveDecls`\nis valid or not. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L188-L189","name":"Lean.Declaration.forExprM","docLink":"./Lean/Declaration.html#Lean.Declaration.forExprM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L173-L186","name":"Lean.Declaration.foldExprM","docLink":"./Lean/Declaration.html#Lean.Declaration.foldExprM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L169-L171","name":"Lean.Declaration.isUnsafeInductiveDeclEx","docLink":"./Lean/Declaration.html#Lean.Declaration.isUnsafeInductiveDeclEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L165-L166","name":"Lean.mkInductiveDeclEs","docLink":"./Lean/Declaration.html#Lean.mkInductiveDeclEs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L162-L162","name":"Lean.instInhabitedDeclaration","docLink":"./Lean/Declaration.html#Lean.instInhabitedDeclaration","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L154-L162","name":"Lean.Declaration","docLink":"./Lean/Declaration.html#Lean.Declaration","doc":"Declaration object that can be sent to the kernel. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L151-L151","name":"Lean.instInhabitedInductiveType","docLink":"./Lean/Declaration.html#Lean.instInhabitedInductiveType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L147-L151","name":"Lean.InductiveType","docLink":"./Lean/Declaration.html#Lean.InductiveType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L145-L145","name":"Lean.instInhabitedConstructor","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstructor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L142-L145","name":"Lean.Constructor","docLink":"./Lean/Declaration.html#Lean.Constructor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L139-L140","name":"Lean.OpaqueVal.isUnsafeEx","docLink":"./Lean/Declaration.html#Lean.OpaqueVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L135-L137","name":"Lean.mkOpaqueValEx","docLink":"./Lean/Declaration.html#Lean.mkOpaqueValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L132-L132","name":"Lean.instInhabitedOpaqueVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedOpaqueVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L125-L132","name":"Lean.OpaqueVal","docLink":"./Lean/Declaration.html#Lean.OpaqueVal","doc":"Value for an opaque constant declaration `opaque x : t := e` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L122-L122","name":"Lean.instInhabitedTheoremVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedTheoremVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L116-L122","name":"Lean.TheoremVal","docLink":"./Lean/Declaration.html#Lean.TheoremVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L113-L114","name":"Lean.DefinitionVal.getSafetyEx","docLink":"./Lean/Declaration.html#Lean.DefinitionVal.getSafetyEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L109-L111","name":"Lean.mkDefinitionValEx","docLink":"./Lean/Declaration.html#Lean.mkDefinitionValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L106-L106","name":"Lean.instInhabitedDefinitionVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedDefinitionVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L94-L106","name":"Lean.DefinitionVal","docLink":"./Lean/Declaration.html#Lean.DefinitionVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L92-L92","name":"Lean.instReprDefinitionSafety","docLink":"./Lean/Declaration.html#Lean.instReprDefinitionSafety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L92-L92","name":"Lean.instBEqDefinitionSafety","docLink":"./Lean/Declaration.html#Lean.instBEqDefinitionSafety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L92-L92","name":"Lean.instInhabitedDefinitionSafety","docLink":"./Lean/Declaration.html#Lean.instInhabitedDefinitionSafety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L90-L92","name":"Lean.DefinitionSafety","docLink":"./Lean/Declaration.html#Lean.DefinitionSafety","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L87-L88","name":"Lean.AxiomVal.isUnsafeEx","docLink":"./Lean/Declaration.html#Lean.AxiomVal.isUnsafeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L80-L85","name":"Lean.mkAxiomValEx","docLink":"./Lean/Declaration.html#Lean.mkAxiomValEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L77-L77","name":"Lean.instInhabitedAxiomVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedAxiomVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L75-L77","name":"Lean.AxiomVal","docLink":"./Lean/Declaration.html#Lean.AxiomVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L73-L73","name":"Lean.instInhabitedConstantVal","docLink":"./Lean/Declaration.html#Lean.instInhabitedConstantVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L69-L73","name":"Lean.ConstantVal","docLink":"./Lean/Declaration.html#Lean.ConstantVal","doc":"Base structure for `AxiomVal`, `DefinitionVal`, `TheoremVal`, `InductiveVal`, `ConstructorVal`, `RecursorVal` and `QuotVal`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L62-L64","name":"Lean.ReducibilityHints.isRegular","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.isRegular","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L58-L60","name":"Lean.ReducibilityHints.isAbbrev","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.isAbbrev","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L51-L56","name":"Lean.ReducibilityHints.lt","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L44-L47","name":"Lean.ReducibilityHints.getHeightEx","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints.getHeightEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L40-L41","name":"Lean.mkReducibilityHintsRegularEx","docLink":"./Lean/Declaration.html#Lean.mkReducibilityHintsRegularEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L37-L37","name":"Lean.instInhabitedReducibilityHints","docLink":"./Lean/Declaration.html#Lean.instInhabitedReducibilityHints","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Declaration.lean#L33-L37","name":"Lean.ReducibilityHints","docLink":"./Lean/Declaration.html#Lean.ReducibilityHints","doc":"Reducibility hints are used in the convertibility checker.\nWhen trying to solve a constraint such a\n\n           (f ...) =?= (g ...)\n\nwhere f and g are definitions, the checker has to decide which one will be unfolded.\n  If      f (g) is opaque,     then g (f) is unfolded if it is also not marked as opaque,\n  Else if f (g) is abbrev,     then f (g) is unfolded if g (f) is also not marked as abbrev,\n  Else if f and g are regular, then we unfold the one with the biggest definitional height.\n  Otherwise both are unfolded.\n\nThe arguments of the `regular` Constructor are: the definitional height and the flag `selfOpt`.\n\nThe definitional height is by default computed by the kernel. It only takes into account\nother regular definitions used in a definition. When creating declarations using meta-programming,\nwe can specify the definitional depth manually.\n\nRemark: the hint only affects performance. None of the hints prevent the kernel from unfolding a\ndeclaration during Type checking.\n\nRemark: the ReducibilityHints are not related to the attributes: reducible/irrelevance/semireducible.\nThese attributes are used by the Elaborator. The ReducibilityHints are used by the kernel (and Elaborator).\nMoreover, the ReducibilityHints cannot be changed after a declaration is added to the kernel. "}]}