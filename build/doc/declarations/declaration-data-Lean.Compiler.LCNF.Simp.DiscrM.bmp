{"name":"Lean.Compiler.LCNF.Simp.DiscrM","instances":[],"imports":["Init","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.Simp.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L73-L76","name":"Lean.Compiler.LCNF.Simp.simpCtorDiscrCore?","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.simpCtorDiscrCore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L70-L71","name":"Lean.Compiler.LCNF.Simp.withDiscrCtor","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtor","doc":"Execute `x` with the information that `discr = ctorName ctorFields`.\nWe use this information to simplify nested cases on the same discriminant.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L58-L68","name":"Lean.Compiler.LCNF.Simp.withDiscrCtorImp.updateCtx","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtorImp.updateCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L54-L68","name":"Lean.Compiler.LCNF.Simp.withDiscrCtorImp","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtorImp","doc":"Execute `x` with the information that `discr = ctorName ctorFields`.\nWe use this information to simplify nested cases on the same discriminant.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L43-L48","name":"Lean.Compiler.LCNF.Simp.getIndInfo?","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.getIndInfo?","doc":"If `type` is an inductive datatype, return its universe levels and parameters.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L34-L38","name":"Lean.Compiler.LCNF.Simp.findCtor","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtor","doc":"This method uses `findExpr`, and if the result is a free variable, checks whether it is in the map `discrCtorMap`.\nWe use this method when simplifying projections and cases-constructor.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L28-L28","name":"Lean.Compiler.LCNF.Simp.DiscrM","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM","doc":"Helper monad for tracking mappings from discriminant to constructor applications and back.\nThe combinator `withDiscrCtor` should be used when visiting `cases` alternatives.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L14-L22","name":"Lean.Compiler.LCNF.Simp.DiscrM.Context","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context","doc":""}]}