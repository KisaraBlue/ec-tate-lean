{"name":"Lean.Structure","instances":[{"typeNames":["Lean.StructureFieldInfo"],"name":"Lean.instInhabitedStructureFieldInfo","className":"Inhabited"},{"typeNames":["Lean.StructureFieldInfo"],"name":"Lean.instReprStructureFieldInfo","className":"Repr"},{"typeNames":["Lean.StructureInfo"],"name":"Lean.instInhabitedStructureInfo","className":"Inhabited"},{"typeNames":["_private.Lean.Structure.0.Lean.StructureState"],"name":"Lean.instInhabitedStructureState","className":"Inhabited"},{"typeNames":["Lean.StructureDescr"],"name":"Lean.instInhabitedStructureDescr","className":"Inhabited"}],"imports":["Init","Lean.Environment","Lean.ProjFns"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L201-L207","name":"Lean.getStructureLikeNumFields","docLink":"./Lean/Structure.html#Lean.getStructureLikeNumFields","doc":"Return number of fields for a structure-like type "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L195-L198","name":"Lean.isStructureLike","docLink":"./Lean/Structure.html#Lean.isStructureLike","doc":"Return true iff `constName` is the a non-recursive inductive datatype that has only one constructor. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L191-L192","name":"Lean.getPathToBaseStructure?","docLink":"./Lean/Structure.html#Lean.getPathToBaseStructure?","doc":"If `baseStructName` is an ancestor structure for `structName`, then return a sequence of projection functions\nto go from `structName` to `baseStructName`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L174-L185","name":"Lean.getPathToBaseStructureAux","docLink":"./Lean/Structure.html#Lean.getPathToBaseStructureAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L165-L172","name":"Lean.getDefaultFnForField?","docLink":"./Lean/Structure.html#Lean.getDefaultFnForField?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L162-L163","name":"Lean.mkDefaultFnOfProjFn","docLink":"./Lean/Structure.html#Lean.mkDefaultFnOfProjFn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L156-L160","name":"Lean.getProjFnInfoForField?","docLink":"./Lean/Structure.html#Lean.getProjFnInfoForField?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L150-L154","name":"Lean.getProjFnForField?","docLink":"./Lean/Structure.html#Lean.getProjFnForField?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L147-L148","name":"Lean.isStructure","docLink":"./Lean/Structure.html#Lean.isStructure","doc":"Return true if `constName` is the name of an inductive datatype\ncreated using the `structure` or `class` commands.\n\nWe perform the check by testing whether auxiliary projection functions\nhave been created. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L138-L139","name":"Lean.getStructureFieldsFlattened","docLink":"./Lean/Structure.html#Lean.getStructureFieldsFlattened","doc":"Return field names for the given structure, including \"flattened\" fields from parent\nstructures. To omit `toParent` projections, set `includeSubobjectFields := false`.\n\nFor example, given `Bar` such that\n```lean\nstructure Foo where a : Nat\nstructure Bar extends Foo where b : Nat\n```\nreturn `#[toFoo,a,b]` or `#[a,b]` with subobject fields omitted. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L115-L119","name":"Lean.findField?","docLink":"./Lean/Structure.html#Lean.findField?","doc":"`findField? env S fname`. If `fname` is defined in a parent `S'` of `S`, return `S'` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L109-L112","name":"Lean.getAllParentStructures.visit","docLink":"./Lean/Structure.html#Lean.getAllParentStructures.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L106-L112","name":"Lean.getAllParentStructures","docLink":"./Lean/Structure.html#Lean.getAllParentStructures","doc":"Return all parent structures "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L98-L103","name":"Lean.getParentStructures","docLink":"./Lean/Structure.html#Lean.getParentStructures","doc":"Return immediate parent structures "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L91-L95","name":"Lean.isSubobjectField?","docLink":"./Lean/Structure.html#Lean.isSubobjectField?","doc":"If `fieldName` represents the relation to a parent structure `S`, return `S` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L84-L88","name":"Lean.getFieldInfo?","docLink":"./Lean/Structure.html#Lean.getFieldInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L78-L82","name":"Lean.getStructureFields","docLink":"./Lean/Structure.html#Lean.getStructureFields","doc":"Get direct field names for the given structure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L69-L75","name":"Lean.getStructureCtor","docLink":"./Lean/Structure.html#Lean.getStructureCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L64-L67","name":"Lean.getStructureInfo?","docLink":"./Lean/Structure.html#Lean.getStructureInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L57-L62","name":"Lean.registerStructure","docLink":"./Lean/Structure.html#Lean.registerStructure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L55-L55","name":"Lean.instInhabitedStructureDescr","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L52-L55","name":"Lean.StructureDescr","docLink":"./Lean/Structure.html#Lean.StructureDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L46-L50","name":"Lean.structureExt","docLink":"./Lean/Structure.html#Lean.structureExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L44-L44","name":"Lean.instInhabitedStructureState","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L34-L39","name":"Lean.StructureInfo.getProjFn?","docLink":"./Lean/Structure.html#Lean.StructureInfo.getProjFn?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L31-L32","name":"Lean.StructureInfo.lt","docLink":"./Lean/Structure.html#Lean.StructureInfo.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L29-L29","name":"Lean.instInhabitedStructureInfo","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L25-L29","name":"Lean.StructureInfo","docLink":"./Lean/Structure.html#Lean.StructureInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L22-L23","name":"Lean.StructureFieldInfo.lt","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L20-L20","name":"Lean.instReprStructureFieldInfo","docLink":"./Lean/Structure.html#Lean.instReprStructureFieldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L20-L20","name":"Lean.instInhabitedStructureFieldInfo","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureFieldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Structure.lean#L13-L20","name":"Lean.StructureFieldInfo","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo","doc":""}]}