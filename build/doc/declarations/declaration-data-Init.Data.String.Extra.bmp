{"name":"Init.Data.String.Extra","instances":[],"imports":["Init.Control.Except","Init.Data.ByteArray","Init.SimpLemmas","Init.Data.Nat.Linear","Init.Util","Init.WFTactics"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L82-L88","name":"String.Iterator.foldUntil","docLink":"./Init/Data/String/Extra.html#String.Iterator.foldUntil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L77-L80","name":"String.Iterator.find","docLink":"./Init/Data/String/Extra.html#String.Iterator.find","doc":"Advance the given iterator until the predicate returns true or the end of the string is reached. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L68-L70","name":"String.Iterator.sizeOf_next_lt_of_atEnd","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_atEnd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L56-L64","name":"String.Iterator.sizeOf_next_lt_of_hasNext","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_hasNext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L53-L54","name":"String.lt_next","docLink":"./Init/Data/String/Extra.html#String.lt_next","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L44-L51","name":"String.eq_empty_of_bsize_eq_zero","docLink":"./Init/Data/String/Extra.html#String.eq_empty_of_bsize_eq_zero","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L42-L42","name":"String.pos_add_char","docLink":"./Init/Data/String/Extra.html#String.pos_add_char","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L40-L40","name":"String.pos_lt_eq","docLink":"./Init/Data/String/Extra.html#String.pos_lt_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L36-L38","name":"String.one_le_csize","docLink":"./Init/Data/String/Extra.html#String.one_le_csize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L34-L34","name":"String.toUTF8","docLink":"./Init/Data/String/Extra.html#String.toUTF8","doc":"Convert the given `String` to a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded byte array. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L30-L30","name":"String.fromUTF8Unchecked","docLink":"./Init/Data/String/Extra.html#String.fromUTF8Unchecked","doc":"Convert a [UTF-8](https://en.wikipedia.org/wiki/UTF-8) encoded `ByteArray` string to `String`.\nThe result is unspecified if `a` is not properly UTF-8 encoded.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/String/Extra.lean#L19-L23","name":"String.toNat!","docLink":"./Init/Data/String/Extra.html#String.toNat!","doc":"Interpret the string as the decimal representation of a natural number.\n\nPanics if the string is not a string of digits. "}]}