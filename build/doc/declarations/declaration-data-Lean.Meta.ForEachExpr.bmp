{"name":"Lean.Meta.ForEachExpr","instances":[],"imports":["Init","Lean.Expr","Lean.Util.MonadCache","Lean.Meta.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L123-L138","name":"Lean.Meta.mkForallFVars'","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.mkForallFVars'","doc":"Similar to `mkForallFVars`, but tries to infer better binder names when `xs` contains metavariables.\nLet `?m` be a metavariable in `xs` s.t. `?m` does not have a user facing name.\nThen, we try to find an application `f ... ?m` in the other binder typer and `type`, and\n(temporarily) use the corresponding parameter name (with a fresh macro scope) as the user facing name for `?m`.\nThe \"renaming\" is temporary.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L112-L114","name":"Lean.Meta.resetMVarUserNames","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.resetMVarUserNames","doc":"Remove user facing name for metavariables in `toReset`.\nThis a low-level method for \"undoing\" the effect of `setMVarUserNamesAt`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L90-L106","name":"Lean.Meta.setMVarUserNamesAt","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.setMVarUserNamesAt","doc":"Auxiliary method for (temporarily) setting the user facing name of metavariables.\nLet `?m` be a metavariable in `isTarget.contains ?m`, and `?m` does not have a user facing name.\nThen, we try to find an application `f ... ?m` in `e`, and (temporarily) use the\ncorresponding parameter name (with a fresh macro scope) as the user facing name for `?m`.\nThis method returns all metavariables whose user facing name has been updated.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L72-L75","name":"Lean.Meta.forEachExpr","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.forEachExpr","doc":"Similar to `Expr.forEach`, but creates free variables whenever going inside of a binder. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L58-L68","name":"Lean.Meta.forEachExpr'.visit","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.forEachExpr'.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L52-L69","name":"Lean.Meta.forEachExpr'","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.forEachExpr'","doc":"Similar to `Expr.forEach'`, but creates free variables whenever going inside of a binder.\nIf the inner function returns `false`, deeper subexpressions will not be visited.\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L38-L47","name":"Lean.Meta.visitLet.visit","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.visitLet.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L37-L47","name":"Lean.Meta.visitLet","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.visitLet","doc":"Given a sequence of let binders `let (x₁ : α₁ := v₁) ... in b`, runs `f` on each `αᵢ`, `vᵢ` and `b`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L27-L34","name":"Lean.Meta.visitForall.visit","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.visitForall.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L26-L34","name":"Lean.Meta.visitForall","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.visitForall","doc":"Given an expression `e =  (x₁ : α₁) → .. (xₙ : αₙ) → b`, runs `f` on each `αᵢ` and `b`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L16-L23","name":"Lean.Meta.visitLambda.visit","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.visitLambda.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ForEachExpr.lean#L15-L23","name":"Lean.Meta.visitLambda","docLink":"./Lean/Meta/ForEachExpr.html#Lean.Meta.visitLambda","doc":"Given an expression `e = fun (x₁ : α₁) .. (xₙ : αₙ) => b`, runs `f` on each `αᵢ` and `b`. "}]}