{"name":"Lean.Elab.InfoTree.Main","instances":[{"typeNames":["Lean.Elab.CustomInfo"],"name":"Lean.Elab.instToFormatCustomInfo","className":"Std.ToFormat"}],"imports":["Init","Lean.Meta.PPGoal"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L360-L361","name":"Lean.Elab.getInfoTrees","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getInfoTrees","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L352-L358","name":"Lean.Elab.withEnableInfoTree","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withEnableInfoTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L349-L350","name":"Lean.Elab.enableInfoTree","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.enableInfoTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L337-L347","name":"Lean.Elab.withInfoHole","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoHole","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L329-L335","name":"Lean.Elab.withMacroExpansionInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withMacroExpansionInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L324-L326","name":"Lean.Elab.assignInfoHoleId","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.assignInfoHoleId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L321-L322","name":"Lean.Elab.getInfoHoleIdAssignment?","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getInfoHoleIdAssignment?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L309-L319","name":"Lean.Elab.withSaveInfoContext","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withSaveInfoContext","doc":"Resets the trees state `t₀`, runs `x` to produce a new trees\nstate `t₁` and sets the state to be `t₀ ++ (InfoTree.context Γ <$> t₁)`\nwhere `Γ` is the context derived from the monad state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L303-L304","name":"Lean.Elab.withInfoContext","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoContext","doc":"Run `x` as a new child infotree node with header given by `mkInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L292-L300","name":"Lean.Elab.withInfoTreeContext","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoTreeContext","doc":"Saves the current list of trees `t₀`, runs `x` to produce a new tree list `t₁` and\nruns `mkInfoTree t₁` to get `n : InfoTree` and then restores the trees to be `t₀ ++ [n]`."},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L275-L288","name":"Lean.Elab.withInfoContext'","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoContext'","doc":"Use this to descend a node on the infotree that is being built.\n\nIt saves the current list of trees `t₀` and resets it and then runs `x >>= mkInfo`, producing either an `i : Info` or a hole id.\nRunning `x >>= mkInfo` will modify the trees state and produce a new list of trees `t₁`.\nIn the `i : Info` case, `t₁` become the children of a node `node i t₁` that is appended to `t₀`.\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L261-L267","name":"Lean.Elab.resolveGlobalNameWithInfos","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.resolveGlobalNameWithInfos","doc":"Similar to `resolveGlobalName`, but it also adds the resolved name to the info tree. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L252-L258","name":"Lean.Elab.resolveGlobalConstWithInfos","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.resolveGlobalConstWithInfos","doc":"Similar to `resolveGlobalConstNoOverloadWithInfo`, except if there are multiple name resolutions then it returns them as a list. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L243-L249","name":"Lean.Elab.resolveGlobalConstNoOverloadWithInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.resolveGlobalConstNoOverloadWithInfo","doc":"This does the same job as `resolveGlobalConstNoOverload`; resolving an identifier\nsyntax to a unique fully resolved name or throwing if there are ambiguities.\nBut also adds this resolved name to the infotree. This means that when you hover\nover a name in the sourcefile you will see the fully resolved name in the hover info."},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L229-L237","name":"Lean.Elab.addConstInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.addConstInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L226-L227","name":"Lean.Elab.addCompletionInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.addCompletionInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L222-L224","name":"Lean.Elab.pushInfoLeaf","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.pushInfoLeaf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L218-L220","name":"Lean.Elab.pushInfoTree","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.pushInfoTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L213-L216","name":"Lean.Elab.getResetInfoTrees","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getResetInfoTrees","doc":"Returns the current array of InfoTrees and resets it to an empty array. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L192-L204","name":"Lean.Elab.InfoTree.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L188-L190","name":"Lean.Elab.Info.updateContext?","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.updateContext?","doc":"Helper function for propagating the tactic metavariable context to its children nodes.\nWe need this function because we preserve `TacticInfo` nodes during backtracking *and* their\nchildren. Moreover, we backtrack the metavariable context to undo metavariable assignments.\n`TacticInfo` nodes save the metavariable context before/after the tactic application, and\ncan be pretty printed without any extra information. This is not the case for `TermInfo` nodes.\nWithout this function, the formatting method would often fail when processing `TermInfo` nodes\nthat are children of `TacticInfo` nodes that have been preserved during backtracking.\nSaving the metavariable context at `TermInfo` nodes is also not a good option because\nat `TermInfo` creation time, the metavariable context often miss information, e.g.,\na TC problem has not been resolved, a postponed subterm has not been elaborated, etc.\n\nSee `Term.SavedState.restore`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L162-L172","name":"Lean.Elab.Info.toElabInfo?","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.toElabInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L150-L160","name":"Lean.Elab.Info.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L147-L148","name":"Lean.Elab.FieldRedeclInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FieldRedeclInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L144-L145","name":"Lean.Elab.FVarAliasInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FVarAliasInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L141-L142","name":"Lean.Elab.UserWidgetInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.UserWidgetInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L136-L139","name":"Lean.Elab.MacroExpansionInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.MacroExpansionInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L129-L134","name":"Lean.Elab.TacticInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TacticInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L123-L127","name":"Lean.Elab.ContextInfo.ppGoals","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.ppGoals","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L119-L121","name":"Lean.Elab.FieldInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FieldInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L116-L117","name":"Lean.Elab.CommandInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CommandInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L110-L114","name":"Lean.Elab.CompletionInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L102-L108","name":"Lean.Elab.TermInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TermInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L99-L100","name":"Lean.Elab.TermInfo.runMetaM","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TermInfo.runMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L79-L80","name":"Lean.Elab.ContextInfo.ppSyntax","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.ppSyntax","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L75-L77","name":"Lean.Elab.ContextInfo.toPPContext","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.toPPContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L64-L73","name":"Lean.Elab.ContextInfo.runMetaM","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.runMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L56-L62","name":"Lean.Elab.InfoTree.substitute","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.substitute","doc":"Instantiate the holes on the given `tree` with the assignment table.\n(analoguous to instantiating the metavariables in an expression) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L44-L52","name":"Lean.Elab.InfoTree.findInfo?","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.findInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L42-L42","name":"Lean.Elab.instToFormatCustomInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.instToFormatCustomInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L39-L40","name":"Lean.Elab.CustomInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CustomInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L29-L37","name":"Lean.Elab.CompletionInfo.stx","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.stx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L23-L25","name":"Lean.Elab.ContextInfo.save","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.save","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/InfoTree/Main.lean#L13-L21","name":"Lean.Elab.ContextInfo.saveNoFileMap","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.saveNoFileMap","doc":""}]}