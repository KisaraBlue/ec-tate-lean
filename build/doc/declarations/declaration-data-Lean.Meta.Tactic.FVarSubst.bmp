{"name":"Lean.Meta.Tactic.FVarSubst","instances":[{"typeNames":["Lean.Meta.FVarSubst"],"name":"Lean.Meta.instInhabitedFVarSubst","className":"Inhabited"}],"imports":["Init","Lean.Data.AssocList","Lean.Expr","Lean.LocalContext","Lean.Util.ReplaceExpr"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L73-L74","name":"Lean.Expr.applyFVarSubst","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Expr.applyFVarSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L69-L71","name":"Lean.LocalDecl.applyFVarSubst","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.LocalDecl.applyFVarSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L63-L64","name":"Lean.Meta.FVarSubst.any","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.any","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L60-L61","name":"Lean.Meta.FVarSubst.domain","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.domain","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L51-L58","name":"Lean.Meta.FVarSubst.apply","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.apply","doc":"Given `e`, for each `(x => v)` in `s` replace `x` with `v` in `e` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L45-L48","name":"Lean.Meta.FVarSubst.get","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.get","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L42-L43","name":"Lean.Meta.FVarSubst.find?","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L39-L40","name":"Lean.Meta.FVarSubst.erase","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L33-L37","name":"Lean.Meta.FVarSubst.insert","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.insert","doc":"Add entry `fvarId |-> v` to `s` if `s` does not contain an entry for `fvarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L29-L30","name":"Lean.Meta.FVarSubst.contains","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L26-L27","name":"Lean.Meta.FVarSubst.isEmpty","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.isEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L24-L24","name":"Lean.Meta.FVarSubst.empty","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L20-L20","name":"Lean.Meta.instInhabitedFVarSubst","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.instInhabitedFVarSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/FVarSubst.lean#L18-L20","name":"Lean.Meta.FVarSubst","docLink":"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst","doc":"Some tactics substitute hypotheses with expressions.\nWe track these substitutions using `FVarSubst`.\nIt is just a mapping from the original FVarId (internal) name\nto an expression. The free variables occurring in the expression must\nbe defined in the new goal. "}]}