{"name":"Lean.Environment","instances":[{"typeNames":["Lean.EnvExtensionState"],"name":"Lean.instInhabitedEnvExtensionState","className":"Inhabited"},{"typeNames":["Lean.ModuleIdx"],"name":"Lean.instInhabitedModuleIdx","className":"Inhabited"},{"typeNames":["Lean.Import"],"name":"Lean.instToStringImport","className":"ToString"},{"typeNames":["Lean.EnvExtensionEntry"],"name":"Lean.instNonemptyEnvExtensionEntry","className":"Nonempty"},{"typeNames":["Lean.ModuleData"],"name":"Lean.instInhabitedModuleData","className":"Inhabited"},{"typeNames":["Lean.EnvironmentHeader"],"name":"Lean.instInhabitedEnvironmentHeader","className":"Inhabited"},{"typeNames":["Lean.Environment"],"name":"Lean.instInhabitedEnvironment","className":"Inhabited"},{"typeNames":["Lean.EnvExtensionInterface"],"name":"Lean.instInhabitedEnvExtensionInterface","className":"Inhabited"},{"typeNames":["Lean.EnvExtensionInterfaceUnsafe.Ext"],"name":"Lean.EnvExtensionInterfaceUnsafe.instInhabitedExt","className":"Inhabited"},{"typeNames":["Lean.EnvExtension"],"name":"Lean.EnvExtension.instInhabitedEnvExtension","className":"Inhabited"},{"typeNames":["Lean.PersistentEnvExtensionState"],"name":"Lean.instInhabitedPersistentEnvExtensionState","className":"Inhabited"},{"typeNames":["Lean.PersistentEnvExtension"],"name":"Lean.instInhabitedPersistentEnvExtension","className":"Inhabited"},{"typeNames":["Lean.SimplePersistentEnvExtension"],"name":"Lean.SimplePersistentEnvExtension.instInhabitedSimplePersistentEnvExtension","className":"Inhabited"},{"typeNames":["Lean.TagDeclarationExtension"],"name":"Lean.TagDeclarationExtension.instInhabitedTagDeclarationExtension","className":"Inhabited"},{"typeNames":["Lean.MapDeclarationExtension"],"name":"Lean.MapDeclarationExtension.instInhabitedMapDeclarationExtension","className":"Inhabited"},{"typeNames":[],"name":"Lean.instMonadEnv","className":"Lean.MonadEnv"}],"imports":["Init","Lean.Data.HashMap","Lean.ImportingFlag","Lean.Data.SMap","Lean.Declaration","Lean.LocalContext","Lean.Util.Path","Lean.Util.FindExpr","Lean.Util.Profile","Lean.Util.InstantiateLevelParams"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L888-L890","name":"Lean.instMonadEnv","docLink":"./Lean/Environment.html#Lean.instMonadEnv","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L881-L883","name":"Lean.MonadEnv","docLink":"./Lean/Environment.html#Lean.MonadEnv","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L877-L877","name":"Lean.Kernel.whnf","docLink":"./Lean/Environment.html#Lean.Kernel.whnf","doc":"Kernel WHNF function. We use it mainly for debugging purposes.\nRecall that the Kernel type checker does not support metavariables.\nWhen implementing automation, consider using the `MetaM` methods. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L869-L870","name":"Lean.Kernel.isDefEqGuarded","docLink":"./Lean/Environment.html#Lean.Kernel.isDefEqGuarded","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L867-L867","name":"Lean.Kernel.isDefEq","docLink":"./Lean/Environment.html#Lean.Kernel.isDefEq","doc":"Kernel isDefEq predicate. We use it mainly for debugging purposes.\nRecall that the Kernel type checker does not support metavariables.\nWhen implementing automation, consider using the `MetaM` methods. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L848-L855","name":"Lean.Environment.hasUnsafe","docLink":"./Lean/Environment.html#Lean.Environment.hasUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L838-L846","name":"Lean.Environment.evalConstCheck","docLink":"./Lean/Environment.html#Lean.Environment.evalConstCheck","doc":"Like `evalConst`, but first check that `constName` indeed is a declaration of type `typeName`.\nNote that this function cannot guarantee that `typeName` is in fact the name of the type `Î±`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L831-L831","name":"Lean.Environment.evalConst","docLink":"./Lean/Environment.html#Lean.Environment.evalConst","doc":"Evaluate the given declaration under the given environment to a value of the given type.\nThis function is only safe to use if the type matches the declaration's type in the environment\nand if `enableInitializersExecution` has been used before importing any modules. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L808-L824","name":"Lean.Environment.displayStats","docLink":"./Lean/Environment.html#Lean.Environment.displayStats","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L803-L805","name":"Lean.Environment.add","docLink":"./Lean/Environment.html#Lean.Environment.add","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L790-L791","name":"Lean.Environment.getNamespaceSet","docLink":"./Lean/Environment.html#Lean.Environment.getNamespaceSet","doc":"Return a set containing all namespaces in `env`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L786-L787","name":"Lean.Environment.isNamespace","docLink":"./Lean/Environment.html#Lean.Environment.isNamespace","doc":"Return `true` if `n` is the name of a namespace in `env`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L782-L783","name":"Lean.Environment.registerNamespace","docLink":"./Lean/Environment.html#Lean.Environment.registerNamespace","doc":"Register a new namespace in the environment. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L770-L777","name":"Lean.namespacesExt","docLink":"./Lean/Environment.html#Lean.namespacesExt","doc":"Environment extension for tracking all `namespace` declared by users.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L766-L768","name":"Lean.withImportModules","docLink":"./Lean/Environment.html#Lean.withImportModules","doc":"Create environment object from imports and free compacted regions after calling `act`. No live references to the\nenvironment object or imported objects may exist after `act` finishes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L744-L761","name":"Lean.importModules.importMods","docLink":"./Lean/Environment.html#Lean.importModules.importMods","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L701-L761","name":"Lean.importModules","docLink":"./Lean/Environment.html#Lean.importModules","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L694-L698","name":"Lean.ImportState","docLink":"./Lean/Environment.html#Lean.ImportState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L667-L667","name":"Lean.getNumBuiltiAttributes","docLink":"./Lean/Environment.html#Lean.getNumBuiltiAttributes","doc":"\"Forward declaration\" for retrieving the number of builtin attributes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L665-L665","name":"Lean.updateEnvAttributes","docLink":"./Lean/Environment.html#Lean.updateEnvAttributes","doc":"\"Forward declaration\" needed for updating the attribute table with user-defined attributes.\nUser-defined attributes are declared using the `initialize` command. The `initialize` command is just syntax sugar for the `init` attribute.\nThe `init` attribute is initialized after the `attributeExtension` is initialized. We cannot change the order since the `init` attribute is an attribute,\nand requires this extension.\nThe `attributeExtension` initializer uses `attributeMapRef` to initialize the attribute mapping.\nWhen we a new user-defined attribute declaration is imported, `attributeMapRef` is updated.\nLater, we set this method with code that adds the user-defined attributes that were imported after we initialized `attributeExtension`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L637-L638","name":"Lean.writeModule","docLink":"./Lean/Environment.html#Lean.writeModule","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L624-L634","name":"Lean.mkModuleData","docLink":"./Lean/Environment.html#Lean.mkModuleData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L606-L622","name":"Lean.Environment.freeRegions","docLink":"./Lean/Environment.html#Lean.Environment.freeRegions","doc":"Free compacted regions of imports. No live references to imported objects may exist at the time of invocation; in\nparticular, `env` should be the last reference to any `Environment` derived from these imports. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L600-L600","name":"Lean.readModuleData","docLink":"./Lean/Environment.html#Lean.readModuleData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L598-L598","name":"Lean.saveModuleData","docLink":"./Lean/Environment.html#Lean.saveModuleData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L590-L593","name":"Lean.MapDeclarationExtension.contains","docLink":"./Lean/Environment.html#Lean.MapDeclarationExtension.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L582-L588","name":"Lean.MapDeclarationExtension.find?","docLink":"./Lean/Environment.html#Lean.MapDeclarationExtension.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L578-L580","name":"Lean.MapDeclarationExtension.insert","docLink":"./Lean/Environment.html#Lean.MapDeclarationExtension.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L575-L576","name":"Lean.MapDeclarationExtension.instInhabitedMapDeclarationExtension","docLink":"./Lean/Environment.html#Lean.MapDeclarationExtension.instInhabitedMapDeclarationExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L565-L571","name":"Lean.mkMapDeclarationExtension","docLink":"./Lean/Environment.html#Lean.mkMapDeclarationExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L563-L563","name":"Lean.MapDeclarationExtension","docLink":"./Lean/Environment.html#Lean.MapDeclarationExtension","doc":"Environment extension for mapping declarations to values.\nDeclarations must only be inserted into the mapping in the module where they were declared. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L553-L556","name":"Lean.TagDeclarationExtension.isTagged","docLink":"./Lean/Environment.html#Lean.TagDeclarationExtension.isTagged","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L549-L551","name":"Lean.TagDeclarationExtension.tag","docLink":"./Lean/Environment.html#Lean.TagDeclarationExtension.tag","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L546-L547","name":"Lean.TagDeclarationExtension.instInhabitedTagDeclarationExtension","docLink":"./Lean/Environment.html#Lean.TagDeclarationExtension.instInhabitedTagDeclarationExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L536-L542","name":"Lean.mkTagDeclarationExtension","docLink":"./Lean/Environment.html#Lean.mkTagDeclarationExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L534-L534","name":"Lean.TagDeclarationExtension","docLink":"./Lean/Environment.html#Lean.TagDeclarationExtension","doc":"Environment extension for tagging declarations.\nDeclarations must only be tagged in the module where they were declared. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L527-L528","name":"Lean.SimplePersistentEnvExtension.modifyState","docLink":"./Lean/Environment.html#Lean.SimplePersistentEnvExtension.modifyState","doc":"Modify the state of the given extension in the given environment by applying the given function. This change is *not* persisted across files. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L523-L524","name":"Lean.SimplePersistentEnvExtension.setState","docLink":"./Lean/Environment.html#Lean.SimplePersistentEnvExtension.setState","doc":"Set the current state of the given `SimplePersistentEnvExtension`. This change is *not* persisted across files. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L519-L520","name":"Lean.SimplePersistentEnvExtension.getState","docLink":"./Lean/Environment.html#Lean.SimplePersistentEnvExtension.getState","doc":"Get the current state of the given `SimplePersistentEnvExtension`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L515-L516","name":"Lean.SimplePersistentEnvExtension.getEntries","docLink":"./Lean/Environment.html#Lean.SimplePersistentEnvExtension.getEntries","doc":"Get the list of values used to update the state of the given\n`SimplePersistentEnvExtension` in the current file. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L510-L511","name":"Lean.SimplePersistentEnvExtension.instInhabitedSimplePersistentEnvExtension","docLink":"./Lean/Environment.html#Lean.SimplePersistentEnvExtension.instInhabitedSimplePersistentEnvExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L497-L506","name":"Lean.registerSimplePersistentEnvExtension","docLink":"./Lean/Environment.html#Lean.registerSimplePersistentEnvExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L491-L495","name":"Lean.SimplePersistentEnvExtensionDescr","docLink":"./Lean/Environment.html#Lean.SimplePersistentEnvExtensionDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L488-L489","name":"Lean.mkStateFromImportedEntries","docLink":"./Lean/Environment.html#Lean.mkStateFromImportedEntries","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L486-L486","name":"Lean.SimplePersistentEnvExtension","docLink":"./Lean/Environment.html#Lean.SimplePersistentEnvExtension","doc":"Simple `PersistentEnvExtension` that implements `exportEntriesFn` using a list of entries. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L483-L483","name":"Lean.registerPersistentEnvExtension","docLink":"./Lean/Environment.html#Lean.registerPersistentEnvExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L461-L480","name":"Lean.registerPersistentEnvExtensionUnsafe","docLink":"./Lean/Environment.html#Lean.registerPersistentEnvExtensionUnsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L453-L459","name":"Lean.PersistentEnvExtensionDescr","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L451-L451","name":"Lean.persistentEnvExtensionsRef","docLink":"./Lean/Environment.html#Lean.persistentEnvExtensionsRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L446-L447","name":"Lean.PersistentEnvExtension.modifyState","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.modifyState","doc":"Modify the state of the given extension in the given environment by applying the given function. This change is *not* persisted across files. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L442-L443","name":"Lean.PersistentEnvExtension.setState","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.setState","doc":"Set the current state of the given extension in the given environment. This change is *not* persisted across files. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L438-L439","name":"Lean.PersistentEnvExtension.getState","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.getState","doc":"Get the current state of the given extension in the given environment. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L432-L435","name":"Lean.PersistentEnvExtension.addEntry","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.addEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L429-L430","name":"Lean.PersistentEnvExtension.getModuleEntries","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.getModuleEntries","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L417-L425","name":"Lean.instInhabitedPersistentEnvExtension","docLink":"./Lean/Environment.html#Lean.instInhabitedPersistentEnvExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L414-L415","name":"Lean.instInhabitedPersistentEnvExtensionState","docLink":"./Lean/Environment.html#Lean.instInhabitedPersistentEnvExtensionState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L406-L412","name":"Lean.PersistentEnvExtension","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension","doc":"An environment extension with support for storing/retrieving entries from a .olean file.\n- Î± is the type of the entries that are stored in .olean files.\n- Î² is the type of values used to update the state.\n- Ï is the actual state.\n\nRemark: for most extensions Î± and Î² coincide.\n\nNote that `addEntryFn` is not in `IO`. This is intentional, and allows us to write simple functions such as\n```\ndef addAlias (env : Environment) (a : Name) (e : Name) : Environment :=\naliasExtension.addEntry env (a, e)\n```\nwithout using `IO`. We have many functions like `addAlias`.\n\n`Î±` and âµÎ²` do not coincide for extensions where the data used to update the state contains, for example,\nclosures which we currently cannot store in files. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L388-L388","name":"Lean.ImportM","docLink":"./Lean/Environment.html#Lean.ImportM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L384-L386","name":"Lean.ImportM.Context","docLink":"./Lean/Environment.html#Lean.ImportM.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L380-L382","name":"Lean.PersistentEnvExtensionState","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L368-L378","name":"Lean.mkEmptyEnvironment","docLink":"./Lean/Environment.html#Lean.mkEmptyEnvironment","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L364-L364","name":"Lean.registerEnvExtension","docLink":"./Lean/Environment.html#Lean.registerEnvExtension","doc":"Environment extensions can only be registered during initialization.\nReasons:\n1- Our implementation assumes the number of extensions does not change after an environment object is created.\n2- We do not use any synchronization primitive to access `envExtensionsRef`.\n\nNote that by default, extension state is *not* stored in .olean files and will not propagate across `import`s.\nFor that, you need to register a persistent environment extension. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L354-L354","name":"Lean.EnvExtension.getState","docLink":"./Lean/Environment.html#Lean.EnvExtension.getState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L353-L353","name":"Lean.EnvExtension.modifyState","docLink":"./Lean/Environment.html#Lean.EnvExtension.modifyState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L352-L352","name":"Lean.EnvExtension.setState","docLink":"./Lean/Environment.html#Lean.EnvExtension.setState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L351-L351","name":"Lean.EnvExtension.instInhabitedEnvExtension","docLink":"./Lean/Environment.html#Lean.EnvExtension.instInhabitedEnvExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L345-L345","name":"Lean.EnvExtension","docLink":"./Lean/Environment.html#Lean.EnvExtension","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L343-L343","name":"Lean.EnvExtensionInterfaceImp","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L329-L338","name":"Lean.EnvExtensionInterfaceUnsafe.imp","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.imp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L325-L327","name":"Lean.EnvExtensionInterfaceUnsafe.mkInitialExtStates","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.mkInitialExtStates","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L313-L323","name":"Lean.EnvExtensionInterfaceUnsafe.registerExt","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.registerExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L306-L311","name":"Lean.EnvExtensionInterfaceUnsafe.getState","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.getState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L296-L304","name":"Lean.EnvExtensionInterfaceUnsafe.modifyState","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.modifyState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L290-L294","name":"Lean.EnvExtensionInterfaceUnsafe.setState","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.setState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L279-L286","name":"Lean.EnvExtensionInterfaceUnsafe.ensureExtensionsArraySize.loop","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.ensureExtensionsArraySize.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L276-L286","name":"Lean.EnvExtensionInterfaceUnsafe.ensureExtensionsArraySize","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.ensureExtensionsArraySize","doc":"User-defined environment extensions are declared using the `initialize` command.\nThis command is just syntax sugar for the `init` attribute.\nWhen we `import` lean modules, the vector stored at `envExtensionsRef` may increase in size because of\nuser-defined environment extensions. When this happens, we must adjust the size of the `env.extensions`.\nThis method is invoked when processing `import`s.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L265-L265","name":"Lean.EnvExtensionInterfaceUnsafe.instInhabitedExt","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.instInhabitedExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L262-L265","name":"Lean.EnvExtensionInterfaceUnsafe.Ext","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterfaceUnsafe.Ext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L247-L257","name":"Lean.instInhabitedEnvExtensionInterface","docLink":"./Lean/Environment.html#Lean.instInhabitedEnvExtensionInterface","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L237-L245","name":"Lean.EnvExtensionInterface","docLink":"./Lean/Environment.html#Lean.EnvExtensionInterface","doc":"Interface for managing environment extensions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L231-L232","name":"Lean.ConstantInfo.instantiateValueLevelParams!","docLink":"./Lean/Environment.html#Lean.ConstantInfo.instantiateValueLevelParams!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L228-L229","name":"Lean.ConstantInfo.instantiateTypeLevelParams","docLink":"./Lean/Environment.html#Lean.ConstantInfo.instantiateTypeLevelParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L222-L222","name":"Lean.Environment.addDecl","docLink":"./Lean/Environment.html#Lean.Environment.addDecl","doc":"Type check given declaration and add it to the environment "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L204-L216","name":"Lean.KernelException","docLink":"./Lean/Environment.html#Lean.KernelException","doc":"Exceptions that can be raised by the Kernel when type checking new declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L198-L199","name":"Lean.Environment.getModuleIdx?","docLink":"./Lean/Environment.html#Lean.Environment.getModuleIdx?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L193-L196","name":"Lean.Environment.isConstructor","docLink":"./Lean/Environment.html#Lean.Environment.isConstructor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L190-L191","name":"Lean.Environment.getModuleIdxFor?","docLink":"./Lean/Environment.html#Lean.Environment.getModuleIdxFor?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L175-L176","name":"Lean.Environment.mainModule","docLink":"./Lean/Environment.html#Lean.Environment.mainModule","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L171-L172","name":"Lean.Environment.setMainModule","docLink":"./Lean/Environment.html#Lean.Environment.setMainModule","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L167-L168","name":"Lean.Environment.allImportedModuleNames","docLink":"./Lean/Environment.html#Lean.Environment.allImportedModuleNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L164-L165","name":"Lean.Environment.imports","docLink":"./Lean/Environment.html#Lean.Environment.imports","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L161-L162","name":"Lean.Environment.contains","docLink":"./Lean/Environment.html#Lean.Environment.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L157-L159","name":"Lean.Environment.find?","docLink":"./Lean/Environment.html#Lean.Environment.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L150-L154","name":"Lean.Environment.addExtraName","docLink":"./Lean/Environment.html#Lean.Environment.addExtraName","doc":"Save an extra constant name that is used to populate `const2ModIdx` when we import\n.olean files. We use this feature to save in which module an auxiliary declaration\ncreated by the code generator has been created.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L142-L143","name":"Lean.Environment.addAux","docLink":"./Lean/Environment.html#Lean.Environment.addAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L138-L138","name":"Lean.instInhabitedEnvironment","docLink":"./Lean/Environment.html#Lean.instInhabitedEnvironment","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L109-L138","name":"Lean.Environment","docLink":"./Lean/Environment.html#Lean.Environment","doc":"An environment stores declarations provided by the user. The kernel\ncurrently supports different kinds of declarations such as definitions, theorems,\nand inductive families. Each has a unique identifier (i.e., `Name`), and can be\nparameterized by a sequence of universe parameters.\nA constant in Lean is just a reference to a `ConstantInfo` object. The main task of\nthe kernel is to type check these declarations and refuse type incorrect ones. The\nkernel does not allow declarations containing metavariables and/or free variables\nto be added to an environment. Environments are never destructively updated.\n\nThe environment also contains a collection of extensions. For example, the `simp` theorems\ndeclared by users are stored in an environment extension. Users can declare new extensions\nusing meta-programming.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L93-L93","name":"Lean.instInhabitedEnvironmentHeader","docLink":"./Lean/Environment.html#Lean.instInhabitedEnvironmentHeader","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L70-L93","name":"Lean.EnvironmentHeader","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader","doc":"Environment fields that are not used often. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L67-L67","name":"Lean.instInhabitedModuleData","docLink":"./Lean/Environment.html#Lean.instInhabitedModuleData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L57-L67","name":"Lean.ModuleData","docLink":"./Lean/Environment.html#Lean.ModuleData","doc":"Content of a .olean file.\nWe use `compact.cpp` to generate the image of this object in disk. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L53-L53","name":"Lean.instNonemptyEnvExtensionEntry","docLink":"./Lean/Environment.html#Lean.instNonemptyEnvExtensionEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L52-L52","name":"Lean.EnvExtensionEntry","docLink":"./Lean/Environment.html#Lean.EnvExtensionEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L51-L51","name":"Lean.EnvExtensionEntrySpec","docLink":"./Lean/Environment.html#Lean.EnvExtensionEntrySpec","doc":"Opaque persistent environment extension entry. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L48-L48","name":"Lean.CompactedRegion.free","docLink":"./Lean/Environment.html#Lean.CompactedRegion.free","doc":"Free a compacted region and its contents. No live references to the contents may exist at the time of invocation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L44-L44","name":"Lean.CompactedRegion.isMemoryMapped","docLink":"./Lean/Environment.html#Lean.CompactedRegion.isMemoryMapped","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L41-L41","name":"Lean.CompactedRegion","docLink":"./Lean/Environment.html#Lean.CompactedRegion","doc":"A compacted region holds multiple Lean objects in a contiguous memory region, which can be read/written to/from disk.\nObjects inside the region do not have reference counters and cannot be freed individually. The contents of .olean\nfiles are compacted regions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L35-L35","name":"Lean.instToStringImport","docLink":"./Lean/Environment.html#Lean.instToStringImport","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L31-L33","name":"Lean.Import","docLink":"./Lean/Environment.html#Lean.Import","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L29-L29","name":"Lean.ConstMap","docLink":"./Lean/Environment.html#Lean.ConstMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L27-L27","name":"Lean.instInhabitedModuleIdx","docLink":"./Lean/Environment.html#Lean.instInhabitedModuleIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L25-L25","name":"Lean.ModuleIdx.toNat","docLink":"./Lean/Environment.html#Lean.ModuleIdx.toNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L22-L23","name":"Lean.ModuleIdx","docLink":"./Lean/Environment.html#Lean.ModuleIdx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L20-L20","name":"Lean.instInhabitedEnvExtensionState","docLink":"./Lean/Environment.html#Lean.instInhabitedEnvExtensionState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L19-L19","name":"Lean.EnvExtensionState","docLink":"./Lean/Environment.html#Lean.EnvExtensionState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Environment.lean#L18-L18","name":"Lean.EnvExtensionStateSpec","docLink":"./Lean/Environment.html#Lean.EnvExtensionStateSpec","doc":"Opaque environment extension state. "}]}