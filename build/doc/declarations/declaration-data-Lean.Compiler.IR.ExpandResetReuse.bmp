{"name":"Lean.Compiler.IR.ExpandResetReuse","instances":[],"imports":["Init","Lean.Compiler.IR.CompilerM","Lean.Compiler.IR.NormIds","Lean.Compiler.IR.FreeVars"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L277-L278","name":"Lean.IR.Decl.expandResetReuse","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.Decl.expandResetReuse","doc":"(Try to) expand `reset` and `reuse` instructions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L265-L272","name":"Lean.IR.ExpandResetReuse.main","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L249-L263","name":"Lean.IR.ExpandResetReuse.searchAndExpand","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.searchAndExpand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L236-L247","name":"Lean.IR.ExpandResetReuse.expand","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.expand","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L230-L233","name":"Lean.IR.ExpandResetReuse.mkFastPath","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.mkFastPath","doc":"replace\n```\nx := reset y; b\n```\nwith\n```\nlet f_i_1 := proj[i_1] y;\n...\nlet f_i_k := proj[i_k] y;\nb'\n```\nwhere `i_j`s are the field indexes\nthat the code did not touch immediately before the reset.\nThat is `mask[j] == none`.\n`b'` is `b` where `y` `dec x` is replaced with `del y`,\nand `z := reuse x ctor_i ws; F` is replaced with\n`set x i ws[i]` operations, and we replace `z` with `x` in `F`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L188-L209","name":"Lean.IR.ExpandResetReuse.reuseToSet","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.reuseToSet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L168-L186","name":"Lean.IR.ExpandResetReuse.removeSelfSet","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.removeSelfSet","doc":"Remove unnecessary `set/uset/sset` operations "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L162-L165","name":"Lean.IR.ExpandResetReuse.isSelfSSet","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.isSelfSSet","doc":"Given `sset x[n, i] := y`, return true iff `y := sproj[n, i] x` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L156-L159","name":"Lean.IR.ExpandResetReuse.isSelfUSet","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.isSelfUSet","doc":"Given `uset x[i] := y`, return true iff `y := uproj[i] x` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L147-L153","name":"Lean.IR.ExpandResetReuse.isSelfSet","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.isSelfSet","doc":"Given `set x[i] := y`, return true iff `y := proj[i] x` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L143-L144","name":"Lean.IR.ExpandResetReuse.setFields","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.setFields","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L135-L141","name":"Lean.IR.ExpandResetReuse.releaseUnreadFields","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.releaseUnreadFields","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L132-L133","name":"Lean.IR.ExpandResetReuse.mkFresh","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.mkFresh","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L131-L131","name":"Lean.IR.ExpandResetReuse.M","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L124-L129","name":"Lean.IR.ExpandResetReuse.mkSlowPath","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.mkSlowPath","doc":"replace\n```\nx := reset y; b\n```\nwith\n```\ninc z_1; ...; inc z_i; dec y; b'\n```\nwhere `z_i`'s are the variables in `mask`,\nand `b'` is `b` where we removed `dec x` and replaced `reuse x ctor_i ...` with `ctor_i ...`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L90-L110","name":"Lean.IR.ExpandResetReuse.reuseToCtor","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.reuseToCtor","doc":"Replace `reuse x ctor ...` with `ctor ...`, and remoce `dec x` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L86-L87","name":"Lean.IR.ExpandResetReuse.eraseProjIncFor","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.eraseProjIncFor","doc":"Try to erase `inc` instructions on projections of `y` occurring in the tail of `bs`.\nReturn the updated `bs` and a bit mask specifying which `inc`s have been removed. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L53-L82","name":"Lean.IR.ExpandResetReuse.eraseProjIncForAux","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.eraseProjIncForAux","doc":"Auxiliary function for eraseProjIncFor "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L50-L50","name":"Lean.IR.ExpandResetReuse.Mask","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.Mask","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L41-L48","name":"Lean.IR.ExpandResetReuse.consumed","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.consumed","doc":"Return true iff `x` is consumed in all branches of the current block.\nHere consumption means the block contains a `dec x` or `reuse x ...`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L36-L37","name":"Lean.IR.ExpandResetReuse.Context","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L31-L34","name":"Lean.IR.ExpandResetReuse.mkProjMap","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.mkProjMap","doc":"Create a mapping from variables to projections.\nThis function assumes variable ids have been normalized "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L22-L26","name":"Lean.IR.ExpandResetReuse.CollectProjMap.collectFnBody","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.CollectProjMap.collectFnBody","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L15-L20","name":"Lean.IR.ExpandResetReuse.CollectProjMap.collectVDecl","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.CollectProjMap.collectVDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L14-L14","name":"Lean.IR.ExpandResetReuse.CollectProjMap.Collector","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.CollectProjMap.Collector","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/IR/ExpandResetReuse.lean#L12-L12","name":"Lean.IR.ExpandResetReuse.ProjMap","docLink":"./Lean/Compiler/IR/ExpandResetReuse.html#Lean.IR.ExpandResetReuse.ProjMap","doc":"Mapping from variable to projections "}]}