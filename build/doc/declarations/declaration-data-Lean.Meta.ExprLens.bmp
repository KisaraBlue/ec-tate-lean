{"name":"Lean.Meta.ExprLens","instances":[],"imports":["Init","Lean.Meta.Basic","Lean.SubExpr"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ExprLens.lean#L168-L169","name":"Lean.Core.numBinders","docLink":"./Lean/Meta/ExprLens.html#Lean.Core.numBinders","doc":"Returns the number of binders above a given subexpr position. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ExprLens.lean#L156-L165","name":"Lean.Core.viewBinders","docLink":"./Lean/Meta/ExprLens.html#Lean.Core.viewBinders","doc":"`viewBinders p e` returns a list of all of the binders (name, type) above the given position `p` in the root expression `e` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ExprLens.lean#L146-L147","name":"Lean.Core.viewSubexpr","docLink":"./Lean/Meta/ExprLens.html#Lean.Core.viewSubexpr","doc":"Given a valid SubExpr, will return the raw current expression without performing any instantiation.\nIf the SubExpr has a type subexpression coordinate then will error.\n\nThis is a cheaper version of `Lean.Meta.viewSubexpr` and can be used to quickly view the\nsubexpression at a position. Note that because the resulting expression will contain\nloose bound variables it can't be used in any `MetaM` methods. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ExprLens.lean#L106-L109","name":"Lean.Meta.foldAncestors","docLink":"./Lean/Meta/ExprLens.html#Lean.Meta.foldAncestors","doc":"`foldAncestors k init p e` folds over the strict ancestor subexpressions of the given expression `e` above position `p`, starting at the root expression and working down.\nThe fold function `k` is given the newly instantiated free variables, the ancestor subexpression, and the coordinate\nthat will be explored next."},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ExprLens.lean#L84-L87","name":"Lean.Meta.viewSubexpr","docLink":"./Lean/Meta/ExprLens.html#Lean.Meta.viewSubexpr","doc":"`view visit p e` runs `visit fvars s` where `s : Expr` is the subexpression of `e` at `p`.\nand `fvars` are the free variables for the binders that `s` is under.\n`s` is already instantiated with respect to these.\nThe role of the `visit` function is analogous to the `k` function in `Lean.Meta.forallTelescope`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/ExprLens.lean#L52-L53","name":"Lean.Meta.replaceSubexpr","docLink":"./Lean/Meta/ExprLens.html#Lean.Meta.replaceSubexpr","doc":"Run the given `replace` function to replace the expression at the subexpression position. If the subexpression is below a binder\nthe bound variables will be appropriately instantiated with free variables and reabstracted after the replacement.\nIf the subexpression is invalid or points to a type then this will throw. "}]}