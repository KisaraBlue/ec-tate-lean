{"name":"Lean.Meta.Tactic.Contradiction","instances":[{"typeNames":["Lean.Meta.SavedState","Lean.Meta.ElimEmptyInductive.M"],"name":"Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","className":"Lean.MonadBacktrack"}],"imports":["Init","Lean.Meta.MatchUtil","Lean.Meta.Tactic.Assumption","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Apply"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Contradiction.lean#L229-L230","name":"Lean.Meta.contradiction","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.contradiction","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Contradiction.lean#L224-L226","name":"Lean.MVarId.contradiction","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradiction","doc":"Try to close the goal using \"contradictions\" such as\n- Contradictory hypotheses `h₁ : p` and `h₂ : ¬ p`.\n- Contradictory disequality `h : x ≠ x`.\n- Contradictory equality between different constructors, e.g., `h : List.nil = List.cons x xs`.\n- Empty inductive types, e.g., `x : Fin 0`.\n- Decidable propositions that evaluate to false, i.e., a hypothesis `h : p` s.t. `decide p` reduces to `false`.\n  This is only tried if `Config.useDecide = true`.\n\nThrow exception if goal failed to be closed.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Contradiction.lean#L152-L211","name":"Lean.MVarId.contradictionCore","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradictionCore","doc":"Return `true` if goal `mvarId` has contradictory hypotheses.\nSee `MVarId.contradiction` for the list of tests performed by this method.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Contradiction.lean#L53-L74","name":"Lean.Meta.ElimEmptyInductive.elim","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.elim","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Contradiction.lean#L49-L51","name":"Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Contradiction.lean#L47-L47","name":"Lean.Meta.ElimEmptyInductive.M","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Meta/Tactic/Contradiction.lean#L13-L24","name":"Lean.Meta.Contradiction.Config","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config","doc":""}]}