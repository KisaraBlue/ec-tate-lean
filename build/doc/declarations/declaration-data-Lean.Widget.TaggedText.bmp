{"name":"Lean.Widget.TaggedText","instances":[{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instInhabitedTaggedText","className":"Inhabited"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instBEqTaggedText","className":"BEq"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instReprTaggedText","className":"Repr"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instFromJsonTaggedText","className":"Lean.FromJson"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.instToJsonTaggedText","className":"Lean.ToJson"},{"typeNames":["Lean.Widget.TaggedText"],"name":"Lean.Widget.TaggedText.instRpcEncodableTaggedText","className":"Lean.Server.RpcEncodable"},{"typeNames":["_private.Lean.Widget.TaggedText.0.Lean.Widget.TaggedText.TaggedState"],"name":"Lean.Widget.TaggedText.instInhabitedTaggedState","className":"Inhabited"},{"typeNames":["StateM","_private.Lean.Widget.TaggedText.0.Lean.Widget.TaggedText.TaggedState"],"name":"Lean.Widget.TaggedText.instMonadPrettyFormatStateMTaggedState","className":"Std.Format.MonadPrettyFormat"}],"imports":["Init","Lean.Data.Json.FromToJson","Lean.Server.Rpc.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L95-L100","name":"Lean.Widget.TaggedText.stripTags.go","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.stripTags.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L93-L100","name":"Lean.Widget.TaggedText.stripTags","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.stripTags","doc":"Remove tags, leaving just the pretty-printed string. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L89-L90","name":"Lean.Widget.TaggedText.prettyTagged","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.prettyTagged","doc":"The output is tagged with `(tag, indent)` where `tag` is from the input `Format` and `indent`\nis the indentation level at this point. The latter is used to print sub-trees accurately by passing\nit again as the `indent` argument. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L76-L84","name":"Lean.Widget.TaggedText.instMonadPrettyFormatStateMTaggedState","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instMonadPrettyFormatStateMTaggedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L74-L74","name":"Lean.Widget.TaggedText.instInhabitedTaggedState","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instInhabitedTaggedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L66-L68","name":"Lean.Widget.TaggedText.instRpcEncodableTaggedText","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instRpcEncodableTaggedText","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L61-L64","name":"Lean.Widget.TaggedText.rewriteM","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewriteM","doc":"Like `mapM` but allows rewriting the whole subtree at `tag` nodes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L54-L57","name":"Lean.Widget.TaggedText.rewrite","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewrite","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L48-L51","name":"Lean.Widget.TaggedText.mapM","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.mapM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L42-L45","name":"Lean.Widget.TaggedText.map","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.map","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L35-L39","name":"Lean.Widget.TaggedText.appendTag","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendTag","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L28-L33","name":"Lean.Widget.TaggedText.appendText","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendText","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instToJsonTaggedText","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instToJsonTaggedText","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instFromJsonTaggedText","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instFromJsonTaggedText","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instReprTaggedText","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instReprTaggedText","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instBEqTaggedText","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instBEqTaggedText","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L24-L24","name":"Lean.Widget.instInhabitedTaggedText","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instInhabitedTaggedText","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Widget/TaggedText.lean#L16-L24","name":"Lean.Widget.TaggedText","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText","doc":"The minimal structure needed to represent \"string with interesting (tagged) substrings\".\nMuch like Lean 3 [`sf`](https://github.com/leanprover-community/mathlib/blob/bfa6bbbce69149792cc009ab7f9bc146181dc051/src/tactic/interactive_expr.lean#L38),\nbut with indentation already stringified. "}]}