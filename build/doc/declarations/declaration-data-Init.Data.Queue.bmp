{"name":"Init.Data.Queue","instances":[{"typeNames":["Std.Queue"],"name":"Std.Queue.instEmptyCollectionQueue","className":"EmptyCollection"},{"typeNames":["Std.Queue"],"name":"Std.Queue.instInhabitedQueue","className":"Inhabited"}],"imports":["Init.Data.List"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L61-L62","name":"Std.Queue.toArray","docLink":"./Init/Data/Queue.html#Std.Queue.toArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L53-L59","name":"Std.Queue.dequeue?","docLink":"./Init/Data/Queue.html#Std.Queue.dequeue?","doc":"`O(1)` amortized, `O(n)` worst case. Pop an element from the back of the queue,\nreturning the element and the new queue.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L46-L47","name":"Std.Queue.enqueueAll","docLink":"./Init/Data/Queue.html#Std.Queue.enqueueAll","doc":"`O(|vs|)`. Push a list of elements `vs` on the front of the queue. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L42-L43","name":"Std.Queue.enqueue","docLink":"./Init/Data/Queue.html#Std.Queue.enqueue","doc":"`O(1)`. Push an element on the front of the queue. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L38-L39","name":"Std.Queue.isEmpty","docLink":"./Init/Data/Queue.html#Std.Queue.isEmpty","doc":"`O(1)`. Is the queue empty? "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L35-L35","name":"Std.Queue.instInhabitedQueue","docLink":"./Init/Data/Queue.html#Std.Queue.instInhabitedQueue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L34-L34","name":"Std.Queue.instEmptyCollectionQueue","docLink":"./Init/Data/Queue.html#Std.Queue.instEmptyCollectionQueue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L32-L32","name":"Std.Queue.empty","docLink":"./Init/Data/Queue.html#Std.Queue.empty","doc":"`O(1)`. The empty queue. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Init/Data/Queue.lean#L19-L25","name":"Std.Queue","docLink":"./Init/Data/Queue.html#Std.Queue","doc":"A functional queue data structure, using two back-to-back lists.\nIf we think of the queue as having elements pushed on the front and\npopped from the back, then the queue itself is effectively `eList ++ dList.reverse`.\n"}]}