{"name":"Lean.Compiler.LCNF.Specialize","instances":[{"typeNames":["Lean.Compiler.LCNF.Specialize.CacheEntry"],"name":"Lean.Compiler.LCNF.Specialize.instInhabitedCacheEntry","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.Specialize.SpecializeM"],"name":"Lean.Compiler.LCNF.Specialize.instMonadScopeSpecializeM","className":"Lean.Compiler.LCNF.MonadScope"}],"imports":["Init","Lean.Compiler.Specialize","Lean.Compiler.LCNF.Simp","Lean.Compiler.LCNF.SpecInfo","Lean.Compiler.LCNF.PrettyPrinter","Lean.Compiler.LCNF.ToExpr","Lean.Compiler.LCNF.Level","Lean.Compiler.LCNF.PhaseExt","Lean.Compiler.LCNF.MonadScope","Lean.Compiler.LCNF.Closure"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L337-L342","name":"Lean.Compiler.LCNF.specialize","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.specialize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L333-L335","name":"Lean.Compiler.LCNF.Decl.specialize","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Decl.specialize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L324-L329","name":"Lean.Compiler.LCNF.Specialize.main","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L302-L320","name":"Lean.Compiler.LCNF.Specialize.visitCode","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.visitCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L298-L300","name":"Lean.Compiler.LCNF.Specialize.visitFunDecl","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.visitFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L262-L296","name":"Lean.Compiler.LCNF.Specialize.specializeApp?","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.specializeApp?","doc":"Try to specialize the function application in the given let-declaration.\n`k` is the continuation for the let-declaration.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L250-L255","name":"Lean.Compiler.LCNF.Specialize.getRemainingArgs","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.getRemainingArgs","doc":"Given the specialization mask `paramsInfo` and the arguments `args`,\nreturn the arguments that have not been considered for specialization.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L222-L244","name":"Lean.Compiler.LCNF.Specialize.mkSpecDecl.go","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.mkSpecDecl.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L208-L244","name":"Lean.Compiler.LCNF.Specialize.mkSpecDecl","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.mkSpecDecl","doc":"Specialize `decl` using\n- `us`: the universe level used to instantiate `decl.name`\n- `argMask`: arguments that are being used to specialize the declaration.\n- `params`: new parameters that arguments in `argMask` depend on.\n- `decls`: local declarations that arguments in `argMask` depend on.\n- `levelParamsNew`: the universe level parameters for the new declaration.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L192-L197","name":"Lean.Compiler.LCNF.Specialize.mkKey","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.mkKey","doc":"Create the \"key\" that uniquely identifies a code specialization.\n`params` and `decls` are the declarations collected by the `collect` function above.\nThe result contains the list of universe level parameter names the key that `params`, `decls`, and `body` depends on.\nWe use this information to create the new auxiliary declaration and resulting application.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L176-L182","name":"Lean.Compiler.LCNF.Specialize.expandCodeDecls.go","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.expandCodeDecls.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L171-L184","name":"Lean.Compiler.LCNF.Specialize.expandCodeDecls","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.expandCodeDecls","doc":"Convert the given declarations into `Expr`, and \"zeta-reduce\" them into body.\nThis function is used to compute the key that uniquely identifies an code specialization.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L158-L165","name":"Lean.Compiler.LCNF.Specialize.shouldSpecialize","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.shouldSpecialize","doc":"Return `true` if it is worth using arguments `args` for specialization given the parameter specialization information.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L136-L151","name":"Lean.Compiler.LCNF.Specialize.Collector.collect","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.Collector.collect","doc":"Given the specialization mask `paramsInfo` and the arguments `args`,\ncollect their dependencies, and return an array `mask` of size `paramsInfo.size` s.t.\n- `mask[i] = some args[i]` if `paramsInfo[i] != .other`\n- `mask[i] = none`, otherwise.\nThat is, `mask` contains only the arguments that are contributing to the code specialization.\nWe use this information to compute a \"key\" to uniquely identify the code specialization, and\ncreating the specialized code.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L73-L76","name":"Lean.Compiler.LCNF.Specialize.withLetDecl","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.withLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L69-L71","name":"Lean.Compiler.LCNF.Specialize.isGround","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.isGround","doc":"Return `true` if `e` is a ground term. That is,\nit contains only free variables t\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L61-L63","name":"Lean.Compiler.LCNF.Specialize.instMonadScopeSpecializeM","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.instMonadScopeSpecializeM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L59-L59","name":"Lean.Compiler.LCNF.Specialize.SpecializeM","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.SpecializeM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L56-L57","name":"Lean.Compiler.LCNF.Specialize.State","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L41-L54","name":"Lean.Compiler.LCNF.Specialize.Context","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L38-L39","name":"Lean.Compiler.LCNF.Specialize.findSpecCache?","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.findSpecCache?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L35-L36","name":"Lean.Compiler.LCNF.Specialize.cacheSpec","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.cacheSpec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L29-L33","name":"Lean.Compiler.LCNF.Specialize.specCacheExt","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.specCacheExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L26-L27","name":"Lean.Compiler.LCNF.Specialize.addEntry","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.addEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L24-L24","name":"Lean.Compiler.LCNF.Specialize.instInhabitedCacheEntry","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.instInhabitedCacheEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L21-L24","name":"Lean.Compiler.LCNF.Specialize.CacheEntry","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.CacheEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Specialize.lean#L19-L19","name":"Lean.Compiler.LCNF.Specialize.Cache","docLink":"./Lean/Compiler/LCNF/Specialize.html#Lean.Compiler.LCNF.Specialize.Cache","doc":""}]}