{"name":"Lean.Compiler.LCNF.CompilerM","instances":[{"typeNames":["Lean.Compiler.LCNF.Phase"],"name":"Lean.Compiler.LCNF.instInhabitedPhase","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.CompilerM.State"],"name":"Lean.Compiler.LCNF.CompilerM.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.CompilerM.Context"],"name":"Lean.Compiler.LCNF.CompilerM.instInhabitedContext","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.CompilerM"],"name":"Lean.Compiler.LCNF.instMonadCompilerM","className":"Monad"},{"typeNames":["Lean.Compiler.LCNF.CompilerM"],"name":"Lean.Compiler.LCNF.instAddMessageContextCompilerM","className":"Lean.AddMessageContext"},{"typeNames":[],"name":"Lean.Compiler.LCNF.instMonadFVarSubst","className":"Lean.Compiler.LCNF.MonadFVarSubst"},{"typeNames":[],"name":"Lean.Compiler.LCNF.instMonadFVarSubstState","className":"Lean.Compiler.LCNF.MonadFVarSubstState"},{"typeNames":["Lean.Compiler.LCNF.NormalizerM"],"name":"Lean.Compiler.LCNF.instMonadFVarSubstNormalizerM","className":"Lean.Compiler.LCNF.MonadFVarSubst"}],"imports":["Init","Lean.CoreM","Lean.Compiler.LCNF.Basic","Lean.Compiler.LCNF.LCtx","Lean.Compiler.LCNF.ConfigOptions"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L396-L397","name":"Lean.Compiler.LCNF.CompilerM.run","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L393-L394","name":"Lean.Compiler.LCNF.getConfig","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getConfig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L390-L391","name":"Lean.Compiler.LCNF.mkAuxParam","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkAuxParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L387-L388","name":"Lean.Compiler.LCNF.mkFreshJpName","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkFreshJpName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L384-L385","name":"Lean.Compiler.LCNF.replaceFVars","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.replaceFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L381-L382","name":"Lean.Compiler.LCNF.replaceExprFVars","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.replaceExprFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L378-L379","name":"Lean.Compiler.LCNF.normCode","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normCode","doc":"Similar to `internalize`, but does not refresh `FVarId`s. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L374-L375","name":"Lean.Compiler.LCNF.normFunDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L357-L371","name":"Lean.Compiler.LCNF.normCodeImp","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normCodeImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L351-L355","name":"Lean.Compiler.LCNF.normFunDeclImp","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normFunDeclImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L347-L348","name":"Lean.Compiler.LCNF.instMonadFVarSubstNormalizerM","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instMonadFVarSubstNormalizerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L345-L345","name":"Lean.Compiler.LCNF.NormalizerM","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.NormalizerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L342-L343","name":"Lean.Compiler.LCNF.normLetDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L339-L340","name":"Lean.Compiler.LCNF.normParams","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L336-L337","name":"Lean.Compiler.LCNF.normParam","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L333-L334","name":"Lean.Compiler.LCNF.FunDeclCore.updateValue","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FunDeclCore.updateValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L330-L331","name":"Lean.Compiler.LCNF.FunDeclCore.update'","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FunDeclCore.update'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L328-L328","name":"Lean.Compiler.LCNF.FunDeclCore.update","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FunDeclCore.update","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L317-L318","name":"Lean.Compiler.LCNF.LetDecl.updateValue","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.LetDecl.updateValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L315-L315","name":"Lean.Compiler.LCNF.LetDecl.update","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.LetDecl.update","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L305-L305","name":"Lean.Compiler.LCNF.Param.update","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Param.update","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L290-L295","name":"Lean.Compiler.LCNF.mkFunDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L283-L288","name":"Lean.Compiler.LCNF.mkLetDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L276-L281","name":"Lean.Compiler.LCNF.mkParam","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L266-L270","name":"Lean.Compiler.LCNF.ensureNotAnonymous","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.ensureNotAnonymous","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L261-L264","name":"Lean.Compiler.LCNF.mkFreshBinderName","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.mkFreshBinderName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L258-L259","name":"Lean.Compiler.LCNF.normExprs","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normExprs","doc":"Normalize the given expressions using the current substitution.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L252-L253","name":"Lean.Compiler.LCNF.normExprCore","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normExprCore","doc":"Replace the free variables in `e` using the given substitution.\n\nIf `translator = true`, then we assume the free variables occurring in the range of the substitution are in another\nlocal context. For example, `translator = true` during internalization where we are making sure all free variables\nin a given expression are replaced with new ones that do not collide with the ones in the current local context.\n\nIf `translator = false`, we assume the substitution contains free variable replacements in the same local context,\nand given entries such as `x₁ ↦ x₂`, `x₂ ↦ x₃`, ..., `xₙ₋₁ ↦ xₙ`, and the expression `f x₁ x₂`, we want the resulting\nexpression to be `f xₙ xₙ`. We use this setting, for example, in the simplifier.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L248-L249","name":"Lean.Compiler.LCNF.normExpr","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normExpr","doc":"Replace the free variables in `e` using the given substitution.\n\nIf `translator = true`, then we assume the free variables occurring in the range of the substitution are in another\nlocal context. For example, `translator = true` during internalization where we are making sure all free variables\nin a given expression are replaced with new ones that do not collide with the ones in the current local context.\n\nIf `translator = false`, we assume the substitution contains free variable replacements in the same local context,\nand given entries such as `x₁ ↦ x₂`, `x₂ ↦ x₃`, ..., `xₙ₋₁ ↦ xₙ`, and the expression `f x₁ x₂`, we want the resulting\nexpression to be `f xₙ xₙ`. We use this setting, for example, in the simplifier.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L245-L246","name":"Lean.Compiler.LCNF.normFVar","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.normFVar","doc":"Normalize the given free variable.\nSee `normExprImp` for documentation on the `translator` parameter.\nThis function is meant to be used in contexts where the input free-variable is computationally relevant.\nThis function panics if the substitution is mapping `fvarId` to an expression that is not another free variable.\nThat is, it is not a type (or type former), nor `lcErased`. Recall that a valid `FVarSubst` contains only\nexpressions that are free variables, `lcErased`, or type formers.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L242-L243","name":"Lean.Compiler.LCNF.addSubst","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.addSubst","doc":"Add the substitution `fvarId ↦ e`, `e` must be a valid LCNF argument.\nThat is, it must be a free variable, type (or type former), or `lcErased`.\n\nSee `Check.lean` for the free variable substitution checker.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L233-L234","name":"Lean.Compiler.LCNF.addFVarSubst","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.addFVarSubst","doc":"Add the entry `fvarId ↦ fvarId'` to the free variable substitution.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L227-L228","name":"Lean.Compiler.LCNF.instMonadFVarSubstState","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instMonadFVarSubstState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L222-L223","name":"Lean.Compiler.LCNF.MonadFVarSubstState","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubstState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L219-L220","name":"Lean.Compiler.LCNF.instMonadFVarSubst","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instMonadFVarSubst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L214-L215","name":"Lean.Compiler.LCNF.MonadFVarSubst","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubst","doc":"Interface for monads that have a free substitutions.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L156-L156","name":"Lean.Compiler.LCNF.FVarSubst","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FVarSubst","doc":"A free variable substitution.\nWe use these substitutions when inlining definitions and \"internalizing\" LCNF code into `CompilerM`.\nDuring the internalization process, we ensure all free variables in the LCNF code do not collide with existing ones\nat the `CompilerM` local context.\nRemark: in LCNF, (computationally relevant) data is in A-normal form, but this is not the case for types and type formers.\nSo, when inlining we often want to replace a free variable with a type or type former.\n\nThe substitution contains entries `fvarId ↦ e` s.t., `e` is a valid LCNF argument. That is,\nit is a free variable, a type (or type former), or `lcErased`.\n\n`Check.lean` contains a substitution validator.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L140-L141","name":"Lean.Compiler.LCNF.Decl.erase","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Decl.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L136-L138","name":"Lean.Compiler.LCNF.eraseDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L133-L134","name":"Lean.Compiler.LCNF.eraseCodeDecls","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseCodeDecls","doc":"Erase all free variables occurring in `decls` from the local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L125-L128","name":"Lean.Compiler.LCNF.eraseCodeDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseCodeDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L122-L123","name":"Lean.Compiler.LCNF.eraseParams","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L119-L120","name":"Lean.Compiler.LCNF.eraseParam","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L116-L117","name":"Lean.Compiler.LCNF.eraseCode","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L113-L114","name":"Lean.Compiler.LCNF.eraseFunDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L110-L111","name":"Lean.Compiler.LCNF.eraseLetDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.eraseLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L107-L108","name":"Lean.Compiler.LCNF.modifyLCtx","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.modifyLCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L103-L105","name":"Lean.Compiler.LCNF.getFunDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L99-L101","name":"Lean.Compiler.LCNF.getLetDecl","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L95-L97","name":"Lean.Compiler.LCNF.getParam","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L92-L93","name":"Lean.Compiler.LCNF.findFunDecl?","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.findFunDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L89-L90","name":"Lean.Compiler.LCNF.findLetDecl?","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.findLetDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L86-L87","name":"Lean.Compiler.LCNF.findParam?","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.findParam?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L75-L84","name":"Lean.Compiler.LCNF.getBinderName","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getBinderName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L64-L73","name":"Lean.Compiler.LCNF.getType","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L57-L62","name":"Lean.Compiler.LCNF.instAddMessageContextCompilerM","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instAddMessageContextCompilerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L54-L55","name":"Lean.Compiler.LCNF.inBasePhase","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.inBasePhase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L51-L52","name":"Lean.Compiler.LCNF.getPhase","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.getPhase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L48-L49","name":"Lean.Compiler.LCNF.withPhase","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.withPhase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L46-L46","name":"Lean.Compiler.LCNF.instMonadCompilerM","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instMonadCompilerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L43-L43","name":"Lean.Compiler.LCNF.CompilerM","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L41-L41","name":"Lean.Compiler.LCNF.CompilerM.instInhabitedContext","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.instInhabitedContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L38-L41","name":"Lean.Compiler.LCNF.CompilerM.Context","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L36-L36","name":"Lean.Compiler.LCNF.CompilerM.instInhabitedState","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.instInhabitedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L28-L36","name":"Lean.Compiler.LCNF.CompilerM.State","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM.State","doc":"The state managed by the `CompilerM` `Monad`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L23-L23","name":"Lean.Compiler.LCNF.instInhabitedPhase","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.instInhabitedPhase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/CompilerM.lean#L15-L23","name":"Lean.Compiler.LCNF.Phase","docLink":"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase","doc":"The pipeline phase a certain `Pass` is supposed to happen in.\n"}]}