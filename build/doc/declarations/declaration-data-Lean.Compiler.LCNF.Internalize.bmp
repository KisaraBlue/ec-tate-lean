{"name":"Lean.Compiler.LCNF.Internalize","instances":[{"typeNames":["Lean.Compiler.LCNF.Internalize.InternalizeM","Bool.true"],"name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","className":"Lean.Compiler.LCNF.MonadFVarSubst"},{"typeNames":["Lean.Compiler.LCNF.Internalize.InternalizeM"],"name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","className":"Lean.Compiler.LCNF.MonadFVarSubstState"}],"imports":["Init","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.CompilerM"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L122-L128","name":"Lean.Compiler.LCNF.normalizeFVarIds","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.normalizeFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L116-L120","name":"Lean.Compiler.LCNF.cleanup","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.cleanup","doc":"Create a fresh local context and internalize the given decls.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L107-L111","name":"Lean.Compiler.LCNF.Decl.internalize.go","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Decl.internalize.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L104-L111","name":"Lean.Compiler.LCNF.Decl.internalize","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Decl.internalize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L100-L101","name":"Lean.Compiler.LCNF.Code.internalize","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Code.internalize","doc":"Refresh free variables ids in `code`, and store their declarations in the local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L89-L93","name":"Lean.Compiler.LCNF.Internalize.internalizeCodeDecl","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCodeDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L69-L85","name":"Lean.Compiler.LCNF.Internalize.internalizeCode","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L59-L67","name":"Lean.Compiler.LCNF.Internalize.internalizeFunDecl","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeFunDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L48-L55","name":"Lean.Compiler.LCNF.Internalize.internalizeLetDecl","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeLetDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L40-L46","name":"Lean.Compiler.LCNF.Internalize.internalizeParam","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L32-L33","name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L29-L30","name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","doc":"The `InternalizeM` monad is a translator. It \"translates\" the free variables\nin the input expressions and `Code`, into new fresh free variables in the\nlocal context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Compiler/LCNF/Internalize.lean#L22-L22","name":"Lean.Compiler.LCNF.Internalize.InternalizeM","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM","doc":""}]}