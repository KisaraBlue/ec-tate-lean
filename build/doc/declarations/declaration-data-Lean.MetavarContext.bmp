{"name":"Lean.MetavarContext","instances":[{"typeNames":["Lean.LocalInstance"],"name":"Lean.instInhabitedLocalInstance","className":"Inhabited"},{"typeNames":["Lean.LocalInstance"],"name":"Lean.instBEqLocalInstance","className":"BEq"},{"typeNames":["Lean.MetavarKind"],"name":"Lean.instInhabitedMetavarKind","className":"Inhabited"},{"typeNames":["Lean.MetavarKind"],"name":"Lean.instReprMetavarKind","className":"Repr"},{"typeNames":["Lean.MetavarDecl"],"name":"Lean.instInhabitedMetavarDecl","className":"Inhabited"},{"typeNames":[],"name":"Lean.instMonadMCtx","className":"Lean.MonadMCtx"},{"typeNames":["StateRefT'","Lean.MetavarContext","ST"],"name":"Lean.instMonadMCtxStateRefT'MetavarContextST","className":"Lean.MonadMCtx"},{"typeNames":["_private.Lean.MetavarContext.0.Lean.DependsOn.M"],"name":"Lean.DependsOn.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.MetavarContext"],"name":"Lean.MetavarContext.instInhabitedMetavarContext","className":"Inhabited"},{"typeNames":["StateRefT'","Lean.MetavarContext","ST"],"name":"Lean.MetavarContext.instMonadMCtxStateRefT'MetavarContextST","className":"Lean.MonadMCtx"},{"typeNames":["Lean.MetavarContext.MkBinding.Exception"],"name":"Lean.MetavarContext.MkBinding.instToStringException","className":"ToString"},{"typeNames":["Lean.MetavarContext.MkBinding.M"],"name":"Lean.MetavarContext.MkBinding.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.ExprStructEq","Lean.Expr","Lean.MetavarContext.MkBinding.M","Lean.ExprStructEq.instBEqExprStructEq","Lean.ExprStructEq.instHashableExprStructEq"],"name":"Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprMInstBEqExprStructEqInstHashableExprStructEq","className":"Lean.MonadHashMapCacheAdapter"},{"typeNames":["Lean.MetavarContext.LevelMVarToParam.M"],"name":"Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.ExprStructEq","Lean.Expr","Lean.MetavarContext.LevelMVarToParam.M"],"name":"Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","className":"Lean.MonadCache"}],"imports":["Init","Lean.Util.MonadCache","Lean.LocalContext"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1329-L1330","name":"Lean.MetavarContext.getExprAssignmentDomain","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentDomain","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1321-L1327","name":"Lean.MetavarContext.levelMVarToParam","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.levelMVarToParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1315-L1319","name":"Lean.MetavarContext.UnivMVarParamResult","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.UnivMVarParamResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1305-L1311","name":"Lean.MetavarContext.LevelMVarToParam.main.visitApp","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.main.visitApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1288-L1311","name":"Lean.MetavarContext.LevelMVarToParam.main","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1269-L1286","name":"Lean.MetavarContext.LevelMVarToParam.visitLevel","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.visitLevel","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1258-L1267","name":"Lean.MetavarContext.LevelMVarToParam.mkParamName","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.mkParamName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1254-L1256","name":"Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.instMonadCacheExprStructEqExprM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1250-L1252","name":"Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.instMonadMCtxM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1248-L1248","name":"Lean.MetavarContext.LevelMVarToParam.M","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1242-L1246","name":"Lean.MetavarContext.LevelMVarToParam.State","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1237-L1240","name":"Lean.MetavarContext.LevelMVarToParam.Context","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.LevelMVarToParam.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1215-L1233","name":"Lean.MetavarContext.isWellFormed","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.isWellFormed","doc":"`isWellFormed mctx lctx e` return true if\n- All locals in `e` are declared in `lctx`\n- All metavariables `?m` in `e` have a local context which is a subprefix of `lctx` or are assigned, and the assignment is well-formed. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1208-L1209","name":"Lean.MetavarContext.collectForwardDeps","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.collectForwardDeps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1205-L1206","name":"Lean.MetavarContext.abstractRange","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.abstractRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1202-L1203","name":"Lean.MetavarContext.mkForall","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkForall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1199-L1200","name":"Lean.MetavarContext.mkLambda","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1195-L1197","name":"Lean.MetavarContext.mkBinding","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkBinding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1192-L1193","name":"Lean.MetavarContext.revert","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.revert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1189-L1190","name":"Lean.MetavarContext.elimMVarDeps","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.elimMVarDeps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1187-L1187","name":"Lean.MetavarContext.MkBindingM","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1183-L1185","name":"Lean.MetavarContext.MkBindingM.Context","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBindingM.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1148-L1179","name":"Lean.MetavarContext.MkBinding.mkBinding","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.mkBinding","doc":"Similar to `LocalContext.mkBinding`, but handles metavariables correctly.\nIf `usedOnly == false` then `forall` and `lambda` expressions are created only for used variables.\nIf `usedLetOnly == false` then `let` expressions are created only for used (let-) variables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1140-L1142","name":"Lean.MetavarContext.MkBinding.abstractRange","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.abstractRange","doc":"Similar to `Expr.abstractRange`, but handles metavariables correctly.\nIt uses `elimMVarDeps` to ensure `e` and the type of the free variables `xs` do not\ncontain a metavariable `?m` s.t. local context of `?m` contains a free variable in `xs`.\n\n`elimMVarDeps` is defined later in this file. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1130-L1132","name":"Lean.MetavarContext.MkBinding.revert","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.revert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L1123-L1128","name":"Lean.MetavarContext.MkBinding.elimMVarDeps","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.elimMVarDeps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L969-L971","name":"Lean.MetavarContext.MkBinding.reduceLocalContext","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.reduceLocalContext","doc":"Create a new `LocalContext` by removing the free variables in `toRevert` from `lctx`.\nWe use this function when we create auxiliary metavariables at `elimMVarDepsAux`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L941-L965","name":"Lean.MetavarContext.MkBinding.collectForwardDeps","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.collectForwardDeps","doc":"Given `toRevert` an array of free variables s.t. `lctx` contains their declarations,\nreturn a new array of free variables that contains `toRevert` and all free variables\nin `lctx` that may depend on `toRevert`.\n\nRemark: the result is sorted by `LocalDecl` indices.\n\nRemark: We used to throw an `Exception.revertFailure` exception when an auxiliary declaration\nhad to be reversed. Recall that auxiliary declarations are created when compiling (mutually)\nrecursive definitions. The `revertFailure` due to auxiliary declaration dependency was originally\nintroduced in Lean3 to address issue https://github.com/leanprover/lean/issues/1258.\nIn Lean4, this solution is not satisfactory because all definitions/theorems are potentially\nrecursive. So, even an simple (incomplete) definition such as\n```\nvariables {α : Type} in\ndef f (a : α) : List α :=\n_\n```\nwould trigger the `Exception.revertFailure` exception. In the definition above,\nthe elaborator creates the auxiliary definition `f : {α : Type} → List α`.\nThe `_` is elaborated as a new fresh variable `?m` that contains `α : Type`, `a : α`, and `f : α → List α` in its context,\nWhen we try to create the lambda `fun {α : Type} (a : α) => ?m`, we first need to create\nan auxiliary `?n` which do not contain `α` and `a` in its context. That is,\nwe create the metavariable `?n : {α : Type} → (a : α) → (f : α → List α) → List α`,\nadd the delayed assignment `?n #[α, a, f] := ?m α a f`, and create the lambda\n`fun {α : Type} (a : α) => ?n α a f`.\nSee `elimMVarDeps` for more information.\nIf we kept using the Lean3 approach, we would get the `Exception.revertFailure` exception because we are\nreverting the auxiliary definition `f`.\n\nNote that https://github.com/leanprover/lean/issues/1258 is not an issue in Lean4 because\nwe have changed how we compile recursive definitions.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L894-L896","name":"Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprMInstBEqExprStructEqInstHashableExprStructEq","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instMonadHashMapCacheAdapterExprStructEqExprMInstBEqExprStructEqInstHashableExprStructEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L891-L892","name":"Lean.MetavarContext.MkBinding.preserveOrder","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.preserveOrder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L883-L885","name":"Lean.MetavarContext.MkBinding.instMonadMCtxM","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instMonadMCtxM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L881-L881","name":"Lean.MetavarContext.MkBinding.M","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L880-L880","name":"Lean.MetavarContext.MkBinding.MCore","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.MCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L872-L878","name":"Lean.MetavarContext.MkBinding.Context","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L866-L870","name":"Lean.MetavarContext.MkBinding.State","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.State","doc":"`MkBinding` and `elimMVarDepsAux` are mutually recursive, but `cache` is only used at `elimMVarDepsAux`.\nWe use a single state object for convenience.\n\nWe have a `NameGenerator` because we need to generate fresh auxiliary metavariables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L853-L859","name":"Lean.MetavarContext.MkBinding.instToStringException","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.instToStringException","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L850-L851","name":"Lean.MetavarContext.MkBinding.Exception","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.MkBinding.Exception","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L844-L846","name":"Lean.MetavarContext.instMonadMCtxStateRefT'MetavarContextST","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.instMonadMCtxStateRefT'MetavarContextST","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L841-L842","name":"Lean.MetavarContext.incDepth","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.incDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L836-L839","name":"Lean.MetavarContext.isAnonymousMVar","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.isAnonymousMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L831-L834","name":"Lean.MetavarContext.getLevelDepth","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getLevelDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L828-L829","name":"Lean.MetavarContext.findLevelDepth?","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findLevelDepth?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L824-L826","name":"Lean.MetavarContext.setMVarType","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarType","doc":"Update the type of the given metavariable. This function assumes the new type is\ndefinitionally equal to the current one "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L818-L820","name":"Lean.MetavarContext.setMVarUserNameTemporarily","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarUserNameTemporarily","doc":"Low-level version of `setMVarUserName`.\nIt does not update the table `userNames`. Thus, `findUserName?` cannot see the modification.\nIt is meant for `mkForallFVars'` where we temporarily set the user facing name of metavariables to get more\nmeaningful binder names.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L804-L810","name":"Lean.MetavarContext.setMVarUserName","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarUserName","doc":"Set the metavariable user facing name.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L797-L799","name":"Lean.MetavarContext.setMVarKind","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.setMVarKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L794-L795","name":"Lean.MetavarContext.findUserName?","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findUserName?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L791-L792","name":"Lean.MetavarContext.findDecl?","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.findDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L788-L789","name":"Lean.MetavarContext.addLevelMVarDecl","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addLevelMVarDecl","doc":"Low level API for adding/declaring universe level metavariable declarations.\nIt is used to implement actions in the monads `MetaM`, `ElabM` and `TacticM`.\nIt should not be used directly since the argument `(mvarId : MVarId)` is assumed to be \"unique\". "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L781-L783","name":"Lean.MetavarContext.addExprMVarDeclExp","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addExprMVarDeclExp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L760-L779","name":"Lean.MetavarContext.addExprMVarDecl","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.addExprMVarDecl","doc":"Low level API for adding/declaring metavariable declarations.\nIt is used to implement actions in the monads `MetaM`, `ElabM` and `TacticM`.\nIt should not be used directly since the argument `(mvarId : MVarId)` is assumed to be \"unique\". "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L755-L755","name":"Lean.MetavarContext.mkMetavarContext","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.mkMetavarContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L752-L752","name":"Lean.MetavarContext.instInhabitedMetavarContext","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.instInhabitedMetavarContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L746-L747","name":"Lean.localDeclDependsOnPred","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOnPred","doc":"Return true iff the local declaration `localDecl` depends on a free variable `x` s.t. `pf x`, an unassigned metavariable `?m` s.t. `pm ?m` is true. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L742-L743","name":"Lean.dependsOnPred","docLink":"./Lean/MetavarContext.html#Lean.dependsOnPred","doc":"Return true iff `e` depends on a free variable `x` s.t. `pf x`, or an unassigned metavariable `?m` s.t. `pm ?m` is true. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L733-L739","name":"Lean.localDeclDependsOn'","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOn'","doc":"Similar to `localDeclDependsOn`, but `x` can be a free variable or an unassigned metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L724-L730","name":"Lean.exprDependsOn'","docLink":"./Lean/MetavarContext.html#Lean.exprDependsOn'","doc":"Similar to `exprDependsOn`, but `x` can be a free variable or an unassigned metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L720-L721","name":"Lean.localDeclDependsOn","docLink":"./Lean/MetavarContext.html#Lean.localDeclDependsOn","doc":"Return true iff `e` depends on the free variable `fvarId` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L716-L717","name":"Lean.dependsOn","docLink":"./Lean/MetavarContext.html#Lean.dependsOn","doc":"Return true iff `e` depends on the free variable `fvarId` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L712-L713","name":"Lean.exprDependsOn","docLink":"./Lean/MetavarContext.html#Lean.exprDependsOn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L704-L710","name":"Lean.findLocalDeclDependsOn","docLink":"./Lean/MetavarContext.html#Lean.findLocalDeclDependsOn","doc":"Similar to `findExprDependsOn`, but checks the expressions in the given local declaration\ndepends on a free variable `x` s.t. `pf x` is `true` or an unassigned metavariable `?m` s.t. `pm ?m` is true. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L696-L699","name":"Lean.findExprDependsOn","docLink":"./Lean/MetavarContext.html#Lean.findExprDependsOn","doc":"Return `true` iff `e` depends on a free variable `x` s.t. `pf x` is `true`, or an unassigned metavariable `?m` s.t. `pm ?m` is true.\nFor each metavariable `?m` (that does not satisfy `pm` occurring in `x`\n1- If `?m := t`, then we visit `t` looking for `x`\n2- If `?m` is unassigned, then we consider the worst case and check whether `x` is in the local context of `?m`.\n   This case is a \"may dependency\". That is, we may assign a term `t` to `?m` s.t. `t` contains `x`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L685-L686","name":"Lean.DependsOn.main","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L631-L633","name":"Lean.DependsOn.instMonadMCtxM","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.instMonadMCtxM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L625-L627","name":"Lean.DependsOn.State","docLink":"./Lean/MetavarContext.html#Lean.DependsOn.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L616-L621","name":"Lean.instantiateLocalDeclMVars","docLink":"./Lean/MetavarContext.html#Lean.instantiateLocalDeclMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L610-L614","name":"Lean.instantiateMVarDeclMVars","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVarDeclMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L599-L608","name":"Lean.instantiateLCtxMVars","docLink":"./Lean/MetavarContext.html#Lean.instantiateLCtxMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L591-L597","name":"Lean.instantiateMVars","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L586-L589","name":"Lean.instantiateMVarsCore","docLink":"./Lean/MetavarContext.html#Lean.instantiateMVarsCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L582-L584","name":"Lean.instMonadMCtxStateRefT'MetavarContextST","docLink":"./Lean/MetavarContext.html#Lean.instMonadMCtxStateRefT'MetavarContextST","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L512-L580","name":"Lean.instantiateExprMVars","docLink":"./Lean/MetavarContext.html#Lean.instantiateExprMVars","doc":"instantiateExprMVars main function "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L496-L509","name":"Lean.instantiateLevelMVars","docLink":"./Lean/MetavarContext.html#Lean.instantiateLevelMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L474-L475","name":"Lean.assignDelayedMVar","docLink":"./Lean/MetavarContext.html#Lean.assignDelayedMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L471-L472","name":"Lean.assignExprMVar","docLink":"./Lean/MetavarContext.html#Lean.assignExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L467-L468","name":"Lean.MVarId.assign","docLink":"./Lean/MetavarContext.html#Lean.MVarId.assign","doc":"Add `mvarId := x` to the metavariable assignment.\nThis method does not check whether `mvarId` is already assigned, nor it checks whether\na cycle is being introduced, or whether the expression has the right type.\nThis is a low-level API, and it is safer to use `isDefEq (mkMVar mvarId) x`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L458-L459","name":"Lean.assignLevelMVar","docLink":"./Lean/MetavarContext.html#Lean.assignLevelMVar","doc":"Add `mvarId := u` to the universe metavariable assignment.\nThis method does not check whether `mvarId` is already assigned, nor it checks whether\na cycle is being introduced.\nThis is a low-level API, and it is safer to use `isLevelDefEq (mkLevelMVar mvarId) u`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L438-L450","name":"Lean.hasAssignableMVar","docLink":"./Lean/MetavarContext.html#Lean.hasAssignableMVar","doc":"Return `true` iff expression contains a metavariable that can be assigned. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L429-L435","name":"Lean.hasAssignableLevelMVar","docLink":"./Lean/MetavarContext.html#Lean.hasAssignableLevelMVar","doc":"Return true iff the given level contains a metavariable that can be assigned. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L414-L426","name":"Lean.hasAssignedMVar","docLink":"./Lean/MetavarContext.html#Lean.hasAssignedMVar","doc":"Return `true` iff expression contains assigned (level/expr) metavariables or delayed assigned mvars "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L405-L411","name":"Lean.hasAssignedLevelMVar","docLink":"./Lean/MetavarContext.html#Lean.hasAssignedLevelMVar","doc":"Return true iff the given level contains an assigned metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L401-L402","name":"Lean.isExprMVarAssignable","docLink":"./Lean/MetavarContext.html#Lean.isExprMVarAssignable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L395-L398","name":"Lean.MVarId.isAssignable","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isAssignable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L390-L393","name":"Lean.MetavarContext.getDecl","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L384-L388","name":"Lean.isLevelMVarAssignable","docLink":"./Lean/MetavarContext.html#Lean.isLevelMVarAssignable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L381-L382","name":"Lean.isMVarDelayedAssigned","docLink":"./Lean/MetavarContext.html#Lean.isMVarDelayedAssigned","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L377-L378","name":"Lean.MVarId.isDelayedAssigned","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isDelayedAssigned","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L374-L375","name":"Lean.isExprMVarAssigned","docLink":"./Lean/MetavarContext.html#Lean.isExprMVarAssigned","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L370-L371","name":"Lean.MVarId.isAssigned","docLink":"./Lean/MetavarContext.html#Lean.MVarId.isAssigned","doc":"Return `true` if the give metavariable is already assigned. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L366-L367","name":"Lean.isLevelMVarAssigned","docLink":"./Lean/MetavarContext.html#Lean.isLevelMVarAssigned","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L361-L364","name":"Lean.getDelayedMVarRoot","docLink":"./Lean/MetavarContext.html#Lean.getDelayedMVarRoot","doc":"Given a sequence of delayed assignments\n```\nmvarId₁ := mvarId₂ ...;\n...\nmvarIdₙ := mvarId_root ...  -- where `mvarId_root` is not delayed assigned\n```\nin `mctx`, `getDelayedRoot mctx mvarId₁` return `mvarId_root`.\nIf `mvarId₁` is not delayed assigned then return `mvarId₁` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L350-L351","name":"Lean.getDelayedMVarAssignment?","docLink":"./Lean/MetavarContext.html#Lean.getDelayedMVarAssignment?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L347-L348","name":"Lean.getExprMVarAssignment?","docLink":"./Lean/MetavarContext.html#Lean.getExprMVarAssignment?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L344-L345","name":"Lean.MetavarContext.getExprAssignmentCore?","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext.getExprAssignmentCore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L341-L342","name":"Lean.getLevelMVarAssignment?","docLink":"./Lean/MetavarContext.html#Lean.getLevelMVarAssignment?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L338-L339","name":"Lean.setMCtx","docLink":"./Lean/MetavarContext.html#Lean.setMCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L334-L336","name":"Lean.instMonadMCtx","docLink":"./Lean/MetavarContext.html#Lean.instMonadMCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L327-L329","name":"Lean.MonadMCtx","docLink":"./Lean/MetavarContext.html#Lean.MonadMCtx","doc":"A monad with a stateful metavariable context, defining `getMCtx` and `modifyMCtx`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L308-L324","name":"Lean.MetavarContext","docLink":"./Lean/MetavarContext.html#Lean.MetavarContext","doc":"The metavariable context is a set of metavariable declarations and their assignments.\n\nFor more information on specifics see the comment in the file that `MetavarContext` is defined in.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L300-L302","name":"Lean.DelayedMetavarAssignment","docLink":"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment","doc":"A delayed assignment for a metavariable `?m`. It represents an assignment of the form `?m := (fun fvars => (mkMVar mvarIdPending))`.\n`mvarIdPending` is a `syntheticOpaque` metavariable that has not been synthesized yet. The delayed assignment becomes a real one\nas soon as `mvarIdPending` has been fully synthesized.\n`fvars` are variables in the `mvarIdPending` local context.\n\nSee the comment below `assignDelayedMVar ` for the rationale of delayed assignments.\n\nRecall that we use a locally nameless approach when dealing with binders. Suppose we are\ntrying to synthesize `?n` in the expression `e`, in the context of `(fun x => e)`.\nThe metavariable `?n` might depend on the bound variable `x`. However, since we are locally nameless,\nthe bound variable `x` is in fact represented by some free variable `fvar_x`. Thus, when we exit\nthe scope, we must rebind the value of `fvar_x` in `?n` to the de-bruijn index of the bound variable `x`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L284-L284","name":"Lean.instInhabitedMetavarDecl","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedMetavarDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L263-L284","name":"Lean.MetavarDecl","docLink":"./Lean/MetavarContext.html#Lean.MetavarDecl","doc":"Information about a metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L258-L260","name":"Lean.MetavarKind.isNatural","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.isNatural","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L254-L256","name":"Lean.MetavarKind.isSyntheticOpaque","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind.isSyntheticOpaque","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L252-L252","name":"Lean.instReprMetavarKind","docLink":"./Lean/MetavarContext.html#Lean.instReprMetavarKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L252-L252","name":"Lean.instInhabitedMetavarKind","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedMetavarKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L245-L252","name":"Lean.MetavarKind","docLink":"./Lean/MetavarContext.html#Lean.MetavarKind","doc":"A kind for the metavariable that determines its unification behaviour.\nFor more information see the large comment at the beginning of this file. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L238-L241","name":"Lean.LocalInstances.erase","docLink":"./Lean/MetavarContext.html#Lean.LocalInstances.erase","doc":"Remove local instance with the given `fvarId`. Do nothing if `localInsts` does not contain any free variable with id `fvarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L234-L235","name":"Lean.instBEqLocalInstance","docLink":"./Lean/MetavarContext.html#Lean.instBEqLocalInstance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L232-L232","name":"Lean.LocalInstances","docLink":"./Lean/MetavarContext.html#Lean.LocalInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L230-L230","name":"Lean.instInhabitedLocalInstance","docLink":"./Lean/MetavarContext.html#Lean.instInhabitedLocalInstance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/MetavarContext.lean#L227-L230","name":"Lean.LocalInstance","docLink":"./Lean/MetavarContext.html#Lean.LocalInstance","doc":"`LocalInstance` represents a local typeclass instance registered by and for\nthe elaborator. It stores the name of the typeclass in `className`, and the\nconcrete typeclass instance in `fvar`. Note that the kernel does not care about\nthis information, since typeclasses are entirely eliminated during elaboration.\n"}]}