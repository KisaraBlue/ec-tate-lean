{"name":"Init.Data.Format.Basic","instances":[{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instInhabitedFlattenBehavior","className":"Inhabited"},{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instBEqFlattenBehavior","className":"BEq"},{"typeNames":["Std.Format"],"name":"Std.instInhabitedFormat","className":"Inhabited"},{"typeNames":["Std.Format"],"name":"Std.Format.instAppendFormat","className":"Append"},{"typeNames":["String","Std.Format"],"name":"Std.Format.instCoeStringFormat","className":"Coe"},{"typeNames":["_private.Init.Data.Format.Basic.0.Std.Format.SpaceResult"],"name":"Std.Format.instInhabitedSpaceResult","className":"Inhabited"},{"typeNames":["StateM","_private.Init.Data.Format.Basic.0.Std.Format.State"],"name":"Std.Format.instMonadPrettyFormatStateMState","className":"Std.Format.MonadPrettyFormat"},{"typeNames":["Std.Format"],"name":"Std.instToFormatFormat","className":"Std.ToFormat"},{"typeNames":["String"],"name":"Std.instToFormatString","className":"Std.ToFormat"}],"imports":["Init.Control.State","Init.Data.Int.Basic","Init.Data.String.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L307-L309","name":"Std.Format.joinSuffix","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSuffix","doc":"Format each item in `items` and append `suffix`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L302-L304","name":"Std.Format.prefixJoin","docLink":"./Init/Data/Format/Basic.html#Std.Format.prefixJoin","doc":"Format each item in `items` and prepend prefix `pre`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L296-L299","name":"Std.Format.joinSep","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSep","doc":"Intersperse the given list (each item printed with `format`) with the given `sep` format. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L292-L293","name":"Std.instToFormatString","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatString","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L289-L290","name":"Std.instToFormatFormat","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L283-L284","name":"Std.ToFormat","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat","doc":"Class for converting a given type Î± to a `Format` object for pretty-printing.\nSee also `Repr`, which also outputs a `Format` object. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L275-L277","name":"Std.Format.pretty","docLink":"./Init/Data/Format/Basic.html#Std.Format.pretty","doc":"Pretty-print a `Format` object as a string with expected width `w`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L265-L271","name":"Std.Format.instMonadPrettyFormatStateMState","docLink":"./Init/Data/Format/Basic.html#Std.Format.instMonadPrettyFormatStateMState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L257-L258","name":"Std.Format.indentD","docLink":"./Init/Data/Format/Basic.html#Std.Format.indentD","doc":"Insert a newline and then `f`, all nested by the default indent amount. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L253-L254","name":"Std.Format.nestD","docLink":"./Init/Data/Format/Basic.html#Std.Format.nestD","doc":"Nest with the default indentation amount."},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L250-L250","name":"Std.Format.defWidth","docLink":"./Init/Data/Format/Basic.html#Std.Format.defWidth","doc":"Default width of the targeted output pane. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L248-L248","name":"Std.Format.defUnicode","docLink":"./Init/Data/Format/Basic.html#Std.Format.defUnicode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L247-L247","name":"Std.Format.defIndent","docLink":"./Init/Data/Format/Basic.html#Std.Format.defIndent","doc":"Default indentation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L243-L244","name":"Std.Format.bracketFill","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracketFill","doc":"Same as `bracket` except uses the `fill` flattening behaviour. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L239-L240","name":"Std.Format.sbracket","docLink":"./Init/Data/Format/Basic.html#Std.Format.sbracket","doc":"Creates the format `\"[\" ++ f ++ \"]\"` with a flattening group."},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L235-L236","name":"Std.Format.paren","docLink":"./Init/Data/Format/Basic.html#Std.Format.paren","doc":"Creates the format `\"(\" ++ f ++ \")\"` with a flattening group."},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L231-L232","name":"Std.Format.bracket","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracket","doc":"Create a format `l ++ f ++ r` with a flatten group.\nFlattenBehaviour is `allOrNone`; for `fill` use `bracketFill`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L226-L227","name":"Std.Format.prettyM","docLink":"./Init/Data/Format/Basic.html#Std.Format.prettyM","doc":"Render the given `f : Format` with a line width of `w`.\n`indent` is the starting amount to indent each line by. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L142-L149","name":"Std.Format.MonadPrettyFormat","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat","doc":"A monad in which we can pretty-print `Format` objects. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L105-L105","name":"Std.Format.instInhabitedSpaceResult","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedSpaceResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L97-L99","name":"Std.Format.isNil","docLink":"./Init/Data/Format/Basic.html#Std.Format.isNil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L94-L95","name":"Std.Format.join","docLink":"./Init/Data/Format/Basic.html#Std.Format.join","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L92-L92","name":"Std.Format.instCoeStringFormat","docLink":"./Init/Data/Format/Basic.html#Std.Format.instCoeStringFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L91-L91","name":"Std.Format.instAppendFormat","docLink":"./Init/Data/Format/Basic.html#Std.Format.instAppendFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L88-L89","name":"Std.Format.groupEx","docLink":"./Init/Data/Format/Basic.html#Std.Format.groupEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L84-L85","name":"Std.Format.appendEx","docLink":"./Init/Data/Format/Basic.html#Std.Format.appendEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L80-L81","name":"Std.Format.fill","docLink":"./Init/Data/Format/Basic.html#Std.Format.fill","doc":"Alias for a group with `FlattenBehavior` set to `fill`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L70-L77","name":"Std.Format.isEmpty","docLink":"./Init/Data/Format/Basic.html#Std.Format.isEmpty","doc":"Check whether the given format contains no characters. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L65-L65","name":"Std.instInhabitedFormat","docLink":"./Init/Data/Format/Basic.html#Std.instInhabitedFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L38-L65","name":"Std.Format","docLink":"./Init/Data/Format/Basic.html#Std.Format","doc":"A string with pretty-printing information for rendering in a column-width-aware way.\n\nThe pretty-printing algorithm is based on Wadler's paper\n[_A Prettier Printer_](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L31-L31","name":"Std.Format.instBEqFlattenBehavior","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L31-L31","name":"Std.Format.instInhabitedFlattenBehavior","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Init/Data/Format/Basic.lean#L28-L31","name":"Std.Format.FlattenBehavior","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior","doc":"Determines how groups should have linebreaks inserted when the\ntext would overfill its remaining space.\n\n- `allOrNone` will make a linebreak on every `Format.line` in the group or none of them.\n  ```\n  [1,\n   2,\n   3]\n  ```\n- `fill` will only make linebreaks on as few `Format.line`s as possible:\n  ```\n  [1, 2,\n   3]\n  ```\n"}]}