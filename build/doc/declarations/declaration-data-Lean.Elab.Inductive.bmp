{"name":"Lean.Elab.Inductive","instances":[{"typeNames":["Lean.Elab.Command.CtorView"],"name":"Lean.Elab.Command.instInhabitedCtorView","className":"Inhabited"},{"typeNames":["Lean.Elab.Command.InductiveView"],"name":"Lean.Elab.Command.instInhabitedInductiveView","className":"Inhabited"},{"typeNames":["Lean.Elab.Command.ElabHeaderResult"],"name":"Lean.Elab.Command.instInhabitedElabHeaderResult","className":"Inhabited"}],"imports":["Init","Lean.Util.ReplaceLevel","Lean.Util.ReplaceExpr","Lean.Util.CollectLevelParams","Lean.Meta.Constructions","Lean.Meta.CollectFVars","Lean.Meta.SizeOf","Lean.Meta.Injective","Lean.Meta.IndPredBelow","Lean.Elab.Command","Lean.Elab.ComputedFields","Lean.Elab.DefView","Lean.Elab.DeclUtil","Lean.Elab.Deriving.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L834-L847","name":"Lean.Elab.Command.elabInductiveViews","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.elabInductiveViews","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L529-L533","name":"Lean.Elab.Command.checkResultingUniverse","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.checkResultingUniverse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L523-L527","name":"Lean.Elab.Command.bootstrap.inductiveCheckResultingUniverse","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.bootstrap.inductiveCheckResultingUniverse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L489-L494","name":"Lean.Elab.Command.withCtorRef","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.withCtorRef","doc":"Execute `k` using the `Syntax` reference associated with constructor `ctorName`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L470-L484","name":"Lean.Elab.Command.accLevelAtCtor","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.accLevelAtCtor","doc":"Auxiliary function for `updateResultingUniverse`\n`accLevelAtCtor ctor ctorParam r rOffset` add `u` (`ctorParam`'s universe) to state if it is not already there and\nit is different from the resulting universe level `r+rOffset`.\n\nSee `accLevel`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L445-L461","name":"Lean.Elab.Command.accLevel.go","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.accLevel.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L442-L461","name":"Lean.Elab.Command.accLevel","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.accLevel","doc":"Auxiliary function for `updateResultingUniverse`\n`accLevel u r rOffset` add `u` to state if it is not already there and\nit is different from the resulting universe level `r+rOffset`.\n\n\nIf `u` is a `max`, then its components are recursively processed.\nIf `u` is a `succ` and `rOffset > 0`, we process the `u`s child using `rOffset-1`.\n\nThis method is used to infer the resulting universe level of an inductive datatype.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L421-L429","name":"Lean.Elab.Command.mkResultUniverse","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.mkResultUniverse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L396-L404","name":"Lean.Elab.Command.shouldInferResultUniverse","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.shouldInferResultUniverse","doc":"Return `some ?m` if `u` is of the form `?m + k`.\nReturn none if `u` does not contain universe metavariables.\nThrow exception otherwise. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L77-L77","name":"Lean.Elab.Command.instInhabitedElabHeaderResult","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.instInhabitedElabHeaderResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L71-L77","name":"Lean.Elab.Command.ElabHeaderResult","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.ElabHeaderResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L69-L69","name":"Lean.Elab.Command.instInhabitedInductiveView","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.instInhabitedInductiveView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L57-L69","name":"Lean.Elab.Command.InductiveView","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.InductiveView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L50-L55","name":"Lean.Elab.Command.ComputedFieldView","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.ComputedFieldView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L48-L48","name":"Lean.Elab.Command.instInhabitedCtorView","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.instInhabitedCtorView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L42-L48","name":"Lean.Elab.Command.CtorView","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.CtorView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L32-L40","name":"Lean.Elab.Command.checkValidCtorModifier","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.checkValidCtorModifier","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Elab/Inductive.lean#L26-L30","name":"Lean.Elab.Command.checkValidInductiveModifier","docLink":"./Lean/Elab/Inductive.html#Lean.Elab.Command.checkValidInductiveModifier","doc":""}]}