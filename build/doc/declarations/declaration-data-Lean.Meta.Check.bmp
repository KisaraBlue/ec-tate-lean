{"name":"Lean.Meta.Check","instances":[],"imports":["Init","Lean.Meta.InferType"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L201-L206","name":"Lean.Meta.isTypeCorrect","docLink":"./Lean/Meta/Check.html#Lean.Meta.isTypeCorrect","doc":"Return true if `e` is type correct.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L189-L196","name":"Lean.Meta.check","docLink":"./Lean/Meta/Check.html#Lean.Meta.check","doc":"Throw an exception if `e` is not type correct.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L136-L144","name":"Lean.Meta.checkApp","docLink":"./Lean/Meta/Check.html#Lean.Meta.checkApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L128-L134","name":"Lean.Meta.throwAppTypeMismatch","docLink":"./Lean/Meta/Check.html#Lean.Meta.throwAppTypeMismatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L117-L126","name":"Lean.Meta.mkHasTypeButIsExpectedMsg","docLink":"./Lean/Meta/Check.html#Lean.Meta.mkHasTypeButIsExpectedMsg","doc":"Return error message \"has type{givenType}\\nbut is expected to have type{expectedType}\"\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L105-L112","name":"Lean.Meta.addPPExplicitToExposeDiff.hasExplicitDiff?","docLink":"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff.hasExplicitDiff?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L78-L103","name":"Lean.Meta.addPPExplicitToExposeDiff.visit","docLink":"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L72-L112","name":"Lean.Meta.addPPExplicitToExposeDiff","docLink":"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff","doc":"Given two expressions `a` and `b`, this method tries to annotate terms with `pp.explicit := true` to\nexpose \"implicit\" differences. For example, suppose `a` and `b` are of the form\n```lean\n@HashMap Nat Nat eqInst hasInst1\n@HashMap Nat Nat eqInst hasInst2\n```\nBy default, the pretty printer formats both of them as `HashMap Nat Nat`.\nSo, counterintuitive error messages such as\n```lean\nerror: application type mismatch\n  HashMap.insert m\nargument\n  m\nhas type\n  HashMap Nat Nat\nbut is expected to have type\n  HashMap Nat Nat\n```\nwould be produced.\nBy adding `pp.explicit := true`, we can generate the more informative error\n```lean\nerror: application type mismatch\n  HashMap.insert m\nargument\n  m\nhas type\n  @HashMap Nat Nat eqInst hasInst1\nbut is expected to have type\n  @HashMap Nat Nat eqInst hasInst2\n```\nRemark: this method implements a simple heuristic, we should extend it as we find other counterintuitive\nerror messages.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Meta/Check.lean#L18-L24","name":"Lean.Meta.throwLetTypeMismatchMessage","docLink":"./Lean/Meta/Check.html#Lean.Meta.throwLetTypeMismatchMessage","doc":""}]}