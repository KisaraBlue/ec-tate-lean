{"name":"Lean.Compiler.LCNF.Simp.SimpM","instances":[{"typeNames":["Lean.Compiler.LCNF.Simp.SimpM"],"name":"Lean.Compiler.LCNF.Simp.instMonadSimpM","className":"Monad"},{"typeNames":["Lean.Compiler.LCNF.Simp.SimpM","Bool.false"],"name":"Lean.Compiler.LCNF.Simp.instMonadFVarSubstSimpMFalse","className":"Lean.Compiler.LCNF.MonadFVarSubst"},{"typeNames":["Lean.Compiler.LCNF.Simp.SimpM"],"name":"Lean.Compiler.LCNF.Simp.instMonadFVarSubstStateSimpM","className":"Lean.Compiler.LCNF.MonadFVarSubstState"}],"imports":["Init","Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.Renaming","Lean.Compiler.LCNF.ElimDead","Lean.Compiler.LCNF.AlphaEqv","Lean.Compiler.LCNF.PrettyPrinter","Lean.Compiler.LCNF.Bind","Lean.Compiler.LCNF.Internalize","Lean.Compiler.LCNF.Simp.JpCases","Lean.Compiler.LCNF.Simp.DiscrM","Lean.Compiler.LCNF.Simp.FunDeclInfo","Lean.Compiler.LCNF.Simp.Config"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L243-L249","name":"Lean.Compiler.LCNF.Simp.addFVarSubst","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.addFVarSubst","doc":"Similar to `LCNF.addFVarSubst`. That is, add the entry\n`fvarId ↦ fvarId'` to the free variable substitution.\nIf `fvarId` has a non-internal binder name `n`, but `fvarId'` does not,\nthis method also adds the entry `fvarId' ↦ n` to the `binderRenaming` map.\nThe goal is to preserve user provided names.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L232-L234","name":"Lean.Compiler.LCNF.Simp.eraseFunDecl","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.eraseFunDecl","doc":"Erase the given local function declaration from the local context,\nand set the `simplified` flag to true.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L224-L226","name":"Lean.Compiler.LCNF.Simp.eraseLetDecl","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.eraseLetDecl","doc":"Erase the given let-declaration from the local context,\nand set the `simplified` flag to true.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L212-L218","name":"Lean.Compiler.LCNF.Simp.betaReduce","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.betaReduce","doc":"LCNF \"Beta-reduce\". The equivalent of `(fun params => code) args`.\nIf `mustInline` is true, the local function declarations in the resulting code are marked as `.mustInline`.\nSee comment at `updateFunDeclInfo`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L201-L205","name":"Lean.Compiler.LCNF.Simp.shouldInlineLocal","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.shouldInlineLocal","doc":"Return `true` if the given local function declaration should be inlined.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L195-L196","name":"Lean.Compiler.LCNF.Simp.isSmall","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.isSmall","doc":"Return `true` if the given code is considered \"small\".\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L187-L190","name":"Lean.Compiler.LCNF.Simp.isOnceOrMustInline","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.isOnceOrMustInline","doc":"Return true if the given local function declaration or join point id is marked as\n`once` or `mustInline`. We use this information to decide whether to inline them.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L175-L181","name":"Lean.Compiler.LCNF.Simp.withAddMustInline","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withAddMustInline","doc":"Execute `x` with `fvarId` set as `mustInline`.\nAfter execution the original setting is restored.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L153-L169","name":"Lean.Compiler.LCNF.Simp.withIncRecDepth.throwMaxRecDepth","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withIncRecDepth.throwMaxRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L145-L169","name":"Lean.Compiler.LCNF.Simp.withIncRecDepth","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withIncRecDepth","doc":"Similar to the default `Lean.withIncRecDepth`, but include the `inlineStack` in the error messsage.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L133-L140","name":"Lean.Compiler.LCNF.Simp.withInlining.check","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withInlining.check","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L125-L140","name":"Lean.Compiler.LCNF.Simp.withInlining","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.withInlining","doc":"Execute `x` with an updated `inlineStack`. If `value` is of the form `const ...`, add `const` to the stack.\nOtherwise, do not change the `inlineStack`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L116-L119","name":"Lean.Compiler.LCNF.Simp.updateFunDeclInfo","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.updateFunDeclInfo","doc":"Traverse `code` and update function occurrence map.\nThis map is used to decide whether we inline local functions or not.\nIf `mustInline := true`, then all local function declarations occurring in\n`code` are tagged as `.mustInline`.\nRecall that we use `.mustInline` for local function declarations occurring in type class instances.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L112-L113","name":"Lean.Compiler.LCNF.Simp.addFunHoOcc","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.addFunHoOcc","doc":"Add a new occurrence of local function `fvarId` in argument position . "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L108-L109","name":"Lean.Compiler.LCNF.Simp.addFunOcc","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.addFunOcc","doc":"Add a new occurrence of local function `fvarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L104-L105","name":"Lean.Compiler.LCNF.Simp.addMustInline","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.addMustInline","doc":"Mark the local function declaration or join point with the given id as a \"must inline\". "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L100-L101","name":"Lean.Compiler.LCNF.Simp.incInlineLocal","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.incInlineLocal","doc":"Increment `inlineLocal` performance counter. It is the number of inlined local function and join point declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L96-L97","name":"Lean.Compiler.LCNF.Simp.incInline","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.incInline","doc":"Increment `inline` performance counter. It is the number of inlined global declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L92-L93","name":"Lean.Compiler.LCNF.Simp.incVisited","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.incVisited","doc":"Increment `visited` performance counter. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L88-L89","name":"Lean.Compiler.LCNF.Simp.markSimplified","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.markSimplified","doc":"Set the `simplified` flag to `true`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L84-L85","name":"Lean.Compiler.LCNF.Simp.instMonadFVarSubstStateSimpM","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.instMonadFVarSubstStateSimpM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L81-L82","name":"Lean.Compiler.LCNF.Simp.instMonadFVarSubstSimpMFalse","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.instMonadFVarSubstSimpMFalse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L79-L79","name":"Lean.Compiler.LCNF.Simp.instMonadSimpM","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.instMonadSimpM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L76-L76","name":"Lean.Compiler.LCNF.Simp.SimpM","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L38-L74","name":"Lean.Compiler.LCNF.Simp.State","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/LCNF/Simp/SimpM.lean#L21-L36","name":"Lean.Compiler.LCNF.Simp.Context","docLink":"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.Context","doc":""}]}