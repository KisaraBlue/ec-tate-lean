{"name":"Lean.Compiler.Old","instances":[],"imports":["Init","Lean.Environment"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L70-L72","name":"Lean.Environment.addAndCompile","docLink":"./Lean/Compiler/Old.html#Lean.Environment.addAndCompile","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L66-L67","name":"Lean.Environment.compileDecl","docLink":"./Lean/Compiler/Old.html#Lean.Environment.compileDecl","doc":"Compile the given declaration, it assumes the declaration has already been added to the environment using `addDecl`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L63-L63","name":"Lean.Environment.compileDecls","docLink":"./Lean/Compiler/Old.html#Lean.Environment.compileDecls","doc":"Compile the given block of mutual declarations.\nAssumes the declarations have already been added to the environment using `addDecl`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L50-L52","name":"Lean.Compiler.isUnsafeRecName?","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.isUnsafeRecName?","doc":"Return `some _` if the given name was created using `mkUnsafeRecName` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L45-L46","name":"Lean.Compiler.mkUnsafeRecName","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.mkUnsafeRecName","doc":"We generate auxiliary unsafe definitions for regular recursive definitions.\nThe auxiliary unsafe definition has a clear runtime cost execution model.\nThis function returns the auxiliary unsafe definition name for the given name. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L33-L38","name":"Lean.Compiler.checkIsDefinition","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.checkIsDefinition","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L26-L31","name":"Lean.Compiler.getDeclNamesForCodeGen","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.getDeclNamesForCodeGen","doc":"Return the name of new definitions in the a given declaration.\nHere we consider only declarations we generate code for.\nWe use this definition to implement `add_and_compile`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L18-L21","name":"Lean.Compiler.isEagerLambdaLiftingName","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.isEagerLambdaLiftingName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Compiler/Old.lean#L14-L15","name":"Lean.Compiler.mkEagerLambdaLiftingName","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.mkEagerLambdaLiftingName","doc":""}]}