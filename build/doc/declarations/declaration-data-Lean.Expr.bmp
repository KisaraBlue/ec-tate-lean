{"name":"Lean.Expr","instances":[{"typeNames":["Lean.Literal"],"name":"Lean.instInhabitedLiteral","className":"Inhabited"},{"typeNames":["Lean.Literal"],"name":"Lean.instBEqLiteral","className":"BEq"},{"typeNames":["Lean.Literal"],"name":"Lean.instReprLiteral","className":"Repr"},{"typeNames":["Lean.Literal"],"name":"Lean.instHashableLiteral","className":"Hashable"},{"typeNames":["Lean.Literal"],"name":"Lean.instLTLiteral","className":"LT"},{"typeNames":["LT.lt","Lean.Literal","Lean.instLTLiteral"],"name":"Lean.instDecidableLtLiteralInstLTLiteral","className":"Decidable"},{"typeNames":["Lean.BinderInfo"],"name":"Lean.instInhabitedBinderInfo","className":"Inhabited"},{"typeNames":["Lean.BinderInfo"],"name":"Lean.instBEqBinderInfo","className":"BEq"},{"typeNames":["Lean.BinderInfo"],"name":"Lean.instReprBinderInfo","className":"Repr"},{"typeNames":["Lean.BinderInfo"],"name":"Lean.instHashableBinderInfo","className":"Hashable"},{"typeNames":["Lean.Expr.Data"],"name":"Lean.instInhabitedData_1","className":"Inhabited"},{"typeNames":["Lean.Expr.Data"],"name":"Lean.instBEqData_1","className":"BEq"},{"typeNames":["Lean.Expr.Data"],"name":"Lean.instReprData_1","className":"Repr"},{"typeNames":["Lean.FVarId"],"name":"Lean.instInhabitedFVarId","className":"Inhabited"},{"typeNames":["Lean.FVarId"],"name":"Lean.instBEqFVarId","className":"BEq"},{"typeNames":["Lean.FVarId"],"name":"Lean.instHashableFVarId","className":"Hashable"},{"typeNames":["Lean.FVarId"],"name":"Lean.instReprFVarId","className":"Repr"},{"typeNames":["Lean.FVarIdSet","Lean.FVarId"],"name":"Lean.instForInFVarIdSetFVarId","className":"ForIn"},{"typeNames":["Lean.FVarIdMap"],"name":"Lean.instEmptyCollectionFVarIdMap","className":"EmptyCollection"},{"typeNames":["Lean.FVarIdMap"],"name":"Lean.instInhabitedFVarIdMap","className":"Inhabited"},{"typeNames":["Lean.MVarId"],"name":"Lean.instInhabitedMVarId","className":"Inhabited"},{"typeNames":["Lean.MVarId"],"name":"Lean.instBEqMVarId","className":"BEq"},{"typeNames":["Lean.MVarId"],"name":"Lean.instHashableMVarId","className":"Hashable"},{"typeNames":["Lean.MVarId"],"name":"Lean.instReprMVarId","className":"Repr"},{"typeNames":["Lean.MVarId"],"name":"Lean.instReprMVarId_1","className":"Repr"},{"typeNames":["Lean.MVarIdSet","Lean.MVarId"],"name":"Lean.instForInMVarIdSetMVarId","className":"ForIn"},{"typeNames":["Lean.MVarIdMap"],"name":"Lean.instEmptyCollectionMVarIdMap","className":"EmptyCollection"},{"typeNames":["Lean.MVarIdMap","Prod","Lean.MVarId"],"name":"Lean.instForInMVarIdMapProdMVarId","className":"ForIn"},{"typeNames":["Lean.MVarIdMap"],"name":"Lean.instInhabitedMVarIdMap","className":"Inhabited"},{"typeNames":["Lean.Expr"],"name":"Lean.instInhabitedExpr","className":"Inhabited"},{"typeNames":["Lean.Expr"],"name":"Lean.instReprExpr","className":"Repr"},{"typeNames":["Lean.Expr"],"name":"Lean.Expr.instHashableExpr","className":"Hashable"},{"typeNames":["Lean.Expr"],"name":"Lean.Expr.instBEqExpr","className":"BEq"},{"typeNames":["Lean.Expr"],"name":"Lean.Expr.instToStringExpr","className":"ToString"},{"typeNames":["Lean.ExprStructEq"],"name":"Lean.instInhabitedExprStructEq","className":"Inhabited"},{"typeNames":["Lean.Expr","Lean.ExprStructEq"],"name":"Lean.instCoeExprExprStructEq","className":"Coe"},{"typeNames":["Lean.ExprStructEq"],"name":"Lean.ExprStructEq.instBEqExprStructEq","className":"BEq"},{"typeNames":["Lean.ExprStructEq"],"name":"Lean.ExprStructEq.instHashableExprStructEq","className":"Hashable"},{"typeNames":["Lean.ExprStructEq"],"name":"Lean.ExprStructEq.instToStringExprStructEq","className":"ToString"}],"imports":["Init","Lean.Data.KVMap","Lean.Level"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1769-L1769","name":"Lean.mkEM","docLink":"./Lean/Expr.html#Lean.mkEM","doc":"Return `Classical.em p` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1767-L1767","name":"Lean.mkAnd","docLink":"./Lean/Expr.html#Lean.mkAnd","doc":"Return `p ∧ q` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1765-L1765","name":"Lean.mkOr","docLink":"./Lean/Expr.html#Lean.mkOr","doc":"Return `p ∨ q` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1763-L1763","name":"Lean.mkNot","docLink":"./Lean/Expr.html#Lean.mkNot","doc":"Return `Not p` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1759-L1760","name":"Lean.mkFreshLMVarId","docLink":"./Lean/Expr.html#Lean.mkFreshLMVarId","doc":"Polymorphic operation for generating unique/fresh universe metavariable identifiers.\nIt is available in any monad `m` that implements the inferface `MonadNameGenerator`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1752-L1753","name":"Lean.mkFreshMVarId","docLink":"./Lean/Expr.html#Lean.mkFreshMVarId","doc":"Polymorphic operation for generating unique/fresh metavariable identifiers.\nIt is available in any monad `m` that implements the inferface `MonadNameGenerator`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1745-L1746","name":"Lean.mkFreshFVarId","docLink":"./Lean/Expr.html#Lean.mkFreshFVarId","doc":"Polymorphic operation for generating unique/fresh free variable identifiers.\nIt is available in any monad `m` that implements the inferface `MonadNameGenerator`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1732-L1739","name":"Lean.isLHSGoal?","docLink":"./Lean/Expr.html#Lean.isLHSGoal?","doc":"Return `some lhs` if `e = mkLHSGoal e'`, where `e'` is of the form `lhs = rhs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1728-L1729","name":"Lean.mkLHSGoalRaw","docLink":"./Lean/Expr.html#Lean.mkLHSGoalRaw","doc":"Annotate `e` with the LHS annotation. The delaborator displays\nexpressions of the form `lhs = rhs` as `lhs` when they have this annotation.\nThis is used to implement the infoview for the `conv` mode.\n\nThis version of `mkLHSGoal` does not check that the argument is an equality.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1713-L1719","name":"Lean.patternAnnotation?","docLink":"./Lean/Expr.html#Lean.patternAnnotation?","doc":"Return `some p` if `e` is an annotated pattern (`inaccessible?` or `patternWithRef?`) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1706-L1710","name":"Lean.mkPatternWithRef","docLink":"./Lean/Expr.html#Lean.mkPatternWithRef","doc":"Annotate the pattern `p` with `stx`. This is an auxiliary annotation\nfor producing better hover information.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1694-L1700","name":"Lean.patternWithRef?","docLink":"./Lean/Expr.html#Lean.patternWithRef?","doc":"During elaboration expressions corresponding to pattern matching terms\nare annotated with `Syntax` objects. This function returns `some (stx, p')` if\n`p` is the pattern `p'` annotated with `stx`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1684-L1685","name":"Lean.inaccessible?","docLink":"./Lean/Expr.html#Lean.inaccessible?","doc":"Return `some e'` if `e = mkInaccessible e'`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1680-L1681","name":"Lean.mkInaccessible","docLink":"./Lean/Expr.html#Lean.mkInaccessible","doc":"Auxiliary annotation used to mark terms marked with the \"inaccessible\" annotation `.(t)` and\n`_` in patterns.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1671-L1674","name":"Lean.isLetFun","docLink":"./Lean/Expr.html#Lean.isLetFun","doc":"Return true if `e = mkLetFunAnnotation e'`, and `e'` is of the form `(fun x : t => b) v`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1665-L1666","name":"Lean.letFunAnnotation?","docLink":"./Lean/Expr.html#Lean.letFunAnnotation?","doc":"Return `some e'` if `e = mkLetFunAnnotation e'`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1659-L1660","name":"Lean.mkLetFunAnnotation","docLink":"./Lean/Expr.html#Lean.mkLetFunAnnotation","doc":"Annotate `e` with the `let_fun` annotation. This annotation is used as hint for the delaborator.\nIf `e` is of the form `(fun x : t => b) v`, then `mkLetFunAnnotation e` is delaborated at\n`let_fun x : t := v; b`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1649-L1652","name":"Lean.annotation?","docLink":"./Lean/Expr.html#Lean.annotation?","doc":"Return `some e'` if `e = mkAnnotation kind e'`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1643-L1644","name":"Lean.mkAnnotation","docLink":"./Lean/Expr.html#Lean.mkAnnotation","doc":"Annotate `e` with the given annotation name `kind`.\nIt uses metadata to store the annotation.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1629-L1635","name":"Lean.Expr.setAppPPExplicitForExposingMVars","docLink":"./Lean/Expr.html#Lean.Expr.setAppPPExplicitForExposingMVars","doc":"Similar for `setAppPPExplicit`, but only annotate children with `pp.explicit := false` if\n`e` does not contain metavariables.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1617-L1623","name":"Lean.Expr.setAppPPExplicit","docLink":"./Lean/Expr.html#Lean.Expr.setAppPPExplicit","doc":"If `e` is an application `f a_1 ... a_n` annotate `f`, `a_1` ... `a_n` with `pp.explicit := false`,\nand annotate `e` with `pp.explicit := true`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1610-L1611","name":"Lean.Expr.setPPUniverses","docLink":"./Lean/Expr.html#Lean.Expr.setPPUniverses","doc":"Annotate `e` with `pp.universes := flag`\nThe delaborator uses `pp` options.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1603-L1604","name":"Lean.Expr.setPPExplicit","docLink":"./Lean/Expr.html#Lean.Expr.setPPExplicit","doc":"Annotate `e` with `pp.explicit := flag`\nThe delaborator uses `pp` options.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1596-L1597","name":"Lean.Expr.setOption","docLink":"./Lean/Expr.html#Lean.Expr.setOption","doc":"Annotate `e` with the given option.\nThe information is stored using metadata around `e`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1579-L1590","name":"Lean.Expr.eta","docLink":"./Lean/Expr.html#Lean.Expr.eta","doc":"Eta reduction. If `e` is of the form `(fun x => f x)`, then return `f`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1572-L1574","name":"Lean.Expr.updateFn","docLink":"./Lean/Expr.html#Lean.Expr.updateFn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1567-L1570","name":"Lean.Expr.updateLet!","docLink":"./Lean/Expr.html#Lean.Expr.updateLet!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1552-L1555","name":"Lean.Expr.updateLambdaE!","docLink":"./Lean/Expr.html#Lean.Expr.updateLambdaE!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1547-L1550","name":"Lean.Expr.updateLambda!","docLink":"./Lean/Expr.html#Lean.Expr.updateLambda!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1532-L1535","name":"Lean.Expr.updateForallE!","docLink":"./Lean/Expr.html#Lean.Expr.updateForallE!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1527-L1530","name":"Lean.Expr.updateForall!","docLink":"./Lean/Expr.html#Lean.Expr.updateForall!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1512-L1515","name":"Lean.Expr.updateProj!","docLink":"./Lean/Expr.html#Lean.Expr.updateProj!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1501-L1504","name":"Lean.Expr.updateMData!","docLink":"./Lean/Expr.html#Lean.Expr.updateMData!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1490-L1493","name":"Lean.Expr.updateSort!","docLink":"./Lean/Expr.html#Lean.Expr.updateSort!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1479-L1482","name":"Lean.Expr.updateConst!","docLink":"./Lean/Expr.html#Lean.Expr.updateConst!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1468-L1471","name":"Lean.Expr.updateApp!","docLink":"./Lean/Expr.html#Lean.Expr.updateApp!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1453-L1454","name":"Lean.Expr.containsFVar","docLink":"./Lean/Expr.html#Lean.Expr.containsFVar","doc":"Return `true` if `e` contains the given free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1440-L1449","name":"Lean.Expr.hasAnyFVar.visit","docLink":"./Lean/Expr.html#Lean.Expr.hasAnyFVar.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1439-L1450","name":"Lean.Expr.hasAnyFVar","docLink":"./Lean/Expr.html#Lean.Expr.hasAnyFVar","doc":"Return true iff `e` contains a free variable which statisfies `p`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1434-L1436","name":"Lean.Expr.cleanupAnnotations","docLink":"./Lean/Expr.html#Lean.Expr.cleanupAnnotations","doc":"Remove metadata annotations and `outParam`, `optParam`, and `autoParam` applications/annotations from `e`.\nNote that it does not remove nested annotations.\nExamples:\n- Given `e` of the form `outParam (optParam Nat b)`, `cleanupAnnotations e = b`.\n- Given `e` of the form `Nat → outParam (optParam Nat b)`, `cleanupAnnotations e = e`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1419-L1425","name":"Lean.Expr.consumeTypeAnnotations","docLink":"./Lean/Expr.html#Lean.Expr.consumeTypeAnnotations","doc":"Remove `outParam`, `optParam`, and `autoParam` applications/annotations from `e`.\nNote that it does not remove nested annotations.\nExamples:\n- Given `e` of the form `outParam (optParam Nat b)`, `consumeTypeAnnotations e = b`.\n- Given `e` of the form `Nat → outParam (optParam Nat b)`, `consumeTypeAnnotations e = e`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1408-L1409","name":"Lean.Expr.isAutoParam","docLink":"./Lean/Expr.html#Lean.Expr.isAutoParam","doc":"Return `true` if `e` is of the form `autoParam _ _` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1404-L1405","name":"Lean.Expr.isOptParam","docLink":"./Lean/Expr.html#Lean.Expr.isOptParam","doc":"Return `true` if `e` is of the form `optParam _ _` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1400-L1401","name":"Lean.Expr.isOutParam","docLink":"./Lean/Expr.html#Lean.Expr.isOutParam","doc":"Return `true` if `e` is of the form `outParam _` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1392-L1396","name":"Lean.Expr.getAutoParamTactic?","docLink":"./Lean/Expr.html#Lean.Expr.getAutoParamTactic?","doc":"Return `some e'` if `e` is of the form `autoParam _ e'` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1385-L1389","name":"Lean.Expr.getOptParamDefault?","docLink":"./Lean/Expr.html#Lean.Expr.getOptParamDefault?","doc":"Return `some e'` if `e` is of the form `optParam _ e'` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1380-L1382","name":"Lean.Expr.etaExpandedStrict?","docLink":"./Lean/Expr.html#Lean.Expr.etaExpandedStrict?","doc":"Similar to `etaExpanded?`, but only succeeds if `ₙ ≥ 1`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1376-L1377","name":"Lean.Expr.etaExpanded?","docLink":"./Lean/Expr.html#Lean.Expr.etaExpanded?","doc":"If `e` is of the form `(fun x₁ ... xₙ => f x₁ ... xₙ)` and `f` does not contain `x₁`, ..., `xₙ`,\nthen return `some f`. Otherwise, return `none`.\n\nIt assumes `e` does not have loose bound variables.\n\nRemark: `ₙ` may be 0\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1356-L1357","name":"Lean.Expr.isHeadBetaTarget","docLink":"./Lean/Expr.html#Lean.Expr.isHeadBetaTarget","doc":"Return true if the given expression is a target for (head) beta reduction.\nIf `useZeta = true`, then `let`-expressions are visited. That is, it assumes\nthat zeta-reduction (aka let-expansion) is going to be used.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1347-L1349","name":"Lean.Expr.headBeta","docLink":"./Lean/Expr.html#Lean.Expr.headBeta","doc":"`(fun x => e) a` ==> `e[x/a]`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1340-L1344","name":"Lean.Expr.isHeadBetaTargetFn","docLink":"./Lean/Expr.html#Lean.Expr.isHeadBetaTargetFn","doc":"Return true if the given expression is the function of an expression that is target for (head) beta reduction.\nIf `useZeta = true`, then `let`-expressions are visited. That is, it assumes\nthat zeta-reduction (aka let-expansion) is going to be used.\n\nSee `isHeadBetaTarget`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1330-L1331","name":"Lean.Expr.beta","docLink":"./Lean/Expr.html#Lean.Expr.beta","doc":"Apply the given arguments to `f`, beta-reducing if `f` is a\nlambda expression. See docstring for `betaRev` for examples.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1301-L1323","name":"Lean.Expr.betaRev.go","docLink":"./Lean/Expr.html#Lean.Expr.betaRev.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1297-L1324","name":"Lean.Expr.betaRev","docLink":"./Lean/Expr.html#Lean.Expr.betaRev","doc":"If `f` is a lambda expression, than \"beta-reduce\" it using `revArgs`.\nThis function is often used with `getAppRev` or `withAppRev`.\nExamples:\n- `betaRev (fun x y => t x y) #[]` ==> `fun x y => t x y`\n- `betaRev (fun x y => t x y) #[a]` ==> `fun y => t a y`\n- `betaRev (fun x y => t x y) #[a, b]` ==> `t b a`\n- `betaRev (fun x y => t x y) #[a, b, c, d]` ==> `t d c b a`\nSuppose `t` is `(fun x y => t x y) a b c d`, then\n`args := t.getAppRev` is `#[d, c, b, a]`,\nand `betaRev (fun x y => t x y) #[d, c, b, a]` is `t a b c d`.\n\nIf `useZeta` is true, the function also performs zeta-reduction (reduction of let binders) to create further\nopportunities for beta reduction.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1279-L1280","name":"Lean.Expr.mkAppRevRange","docLink":"./Lean/Expr.html#Lean.Expr.mkAppRevRange","doc":"`mkAppRevRange f b e args == mkAppRev f (revArgs.extract b e)` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1268-L1268","name":"Lean.PersistentExprStructMap","docLink":"./Lean/Expr.html#Lean.PersistentExprStructMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1267-L1267","name":"Lean.ExprStructMap","docLink":"./Lean/Expr.html#Lean.ExprStructMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1263-L1263","name":"Lean.ExprStructEq.instToStringExprStructEq","docLink":"./Lean/Expr.html#Lean.ExprStructEq.instToStringExprStructEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1262-L1262","name":"Lean.ExprStructEq.instHashableExprStructEq","docLink":"./Lean/Expr.html#Lean.ExprStructEq.instHashableExprStructEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1261-L1261","name":"Lean.ExprStructEq.instBEqExprStructEq","docLink":"./Lean/Expr.html#Lean.ExprStructEq.instBEqExprStructEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1258-L1259","name":"Lean.ExprStructEq.hash","docLink":"./Lean/Expr.html#Lean.ExprStructEq.hash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1255-L1256","name":"Lean.ExprStructEq.beq","docLink":"./Lean/Expr.html#Lean.ExprStructEq.beq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1251-L1251","name":"Lean.instCoeExprExprStructEq","docLink":"./Lean/Expr.html#Lean.instCoeExprExprStructEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1249-L1249","name":"Lean.instInhabitedExprStructEq","docLink":"./Lean/Expr.html#Lean.instInhabitedExprStructEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1247-L1249","name":"Lean.ExprStructEq","docLink":"./Lean/Expr.html#Lean.ExprStructEq","doc":"Auxiliary type for forcing `==` to be structural equality for `Expr` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1244-L1244","name":"Lean.PExprSet","docLink":"./Lean/Expr.html#Lean.PExprSet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1243-L1243","name":"Lean.PersistentExprSet","docLink":"./Lean/Expr.html#Lean.PersistentExprSet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1242-L1242","name":"Lean.ExprSet","docLink":"./Lean/Expr.html#Lean.ExprSet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1241-L1241","name":"Lean.PersistentExprMap","docLink":"./Lean/Expr.html#Lean.PersistentExprMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1240-L1240","name":"Lean.ExprMap","docLink":"./Lean/Expr.html#Lean.ExprMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1237-L1238","name":"Lean.mkDecIsFalse","docLink":"./Lean/Expr.html#Lean.mkDecIsFalse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1234-L1235","name":"Lean.mkDecIsTrue","docLink":"./Lean/Expr.html#Lean.mkDecIsTrue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1223-L1230","name":"Lean.Expr.isAtomic","docLink":"./Lean/Expr.html#Lean.Expr.isAtomic","doc":"Returns true when the expression does not have any sub-expressions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1219-L1220","name":"Lean.Expr.instToStringExpr","docLink":"./Lean/Expr.html#Lean.Expr.instToStringExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1216-L1217","name":"Lean.Expr.replaceFVars","docLink":"./Lean/Expr.html#Lean.Expr.replaceFVars","doc":"Replace occurrences of the free variables `fvars` in `e` with `vs` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1212-L1213","name":"Lean.Expr.replaceFVarId","docLink":"./Lean/Expr.html#Lean.Expr.replaceFVarId","doc":"Replace occurrences of the free variable `fvarId` in `e` with `v` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1208-L1209","name":"Lean.Expr.replaceFVar","docLink":"./Lean/Expr.html#Lean.Expr.replaceFVar","doc":"Replace occurrences of the free variable `fvar` in `e` with `v` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1205-L1205","name":"Lean.Expr.abstractRange","docLink":"./Lean/Expr.html#Lean.Expr.abstractRange","doc":"Similar to `abstract`, but consider only the first `min n xs.size` entries in `xs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1201-L1201","name":"Lean.Expr.abstract","docLink":"./Lean/Expr.html#Lean.Expr.abstract","doc":"Replace free (or meta) variables `xs` with loose bound variables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1197-L1197","name":"Lean.Expr.instantiateRevRange","docLink":"./Lean/Expr.html#Lean.Expr.instantiateRevRange","doc":"Similar to `instantiateRev`, but consider only the variables `xs` in the range `[beginIdx, endIdx)`.\nFunction panics if `beginIdx <= endIdx <= xs.size` does not hold.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1190-L1190","name":"Lean.Expr.instantiateRange","docLink":"./Lean/Expr.html#Lean.Expr.instantiateRange","doc":"Similar to `instantiate`, but consider only the variables `xs` in the range `[beginIdx, endIdx)`.\nFunction panics if `beginIdx <= endIdx <= xs.size` does not hold.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1183-L1183","name":"Lean.Expr.instantiateRev","docLink":"./Lean/Expr.html#Lean.Expr.instantiateRev","doc":"Similar to instantiate, but `Expr.bvar i` is replaced with `subst[subst.size - i - 1]` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1179-L1179","name":"Lean.Expr.instantiate1","docLink":"./Lean/Expr.html#Lean.Expr.instantiate1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1176-L1176","name":"Lean.Expr.instantiate","docLink":"./Lean/Expr.html#Lean.Expr.instantiate","doc":"Instantiate the loose bound variables in `e` using `subst`.\nThat is, a loose `Expr.bvar i` is replaced with `subst[i]`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1163-L1169","name":"Lean.Expr.inferImplicit","docLink":"./Lean/Expr.html#Lean.Expr.inferImplicit","doc":"`inferImplicit e numParams considerRange` updates the first `numParams` parameter binder annotations of the `e` forall type.\nIt marks any parameter with an explicit binder annotation if there is another explicit arguments that depends on it or\nthe resulting type if `considerRange == true`.\n\nRemark: we use this function to infer the bind annotations of inductive datatype constructors, and structure projections.\nWhen the `{}` annotation is used in these commands, we set `considerRange == false`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1153-L1153","name":"Lean.Expr.liftLooseBVars","docLink":"./Lean/Expr.html#Lean.Expr.liftLooseBVars","doc":"Lift loose bound variables `>= s` in `e` by `d`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1148-L1148","name":"Lean.Expr.lowerLooseBVars","docLink":"./Lean/Expr.html#Lean.Expr.lowerLooseBVars","doc":"Lower the loose bound variables `>= s` in `e` by `d`.\nThat is, a loose bound variable `bvar i`.\n`i >= s` is mapped into `bvar (i-d)`.\n\nRemark: if `s < d`, then result is `e`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1135-L1138","name":"Lean.Expr.hasLooseBVarInExplicitDomain","docLink":"./Lean/Expr.html#Lean.Expr.hasLooseBVarInExplicitDomain","doc":"Return true if `e` contains the loose bound variable `bvarIdx` in an explicit parameter, or in the range if `tryRange == true`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1132-L1132","name":"Lean.Expr.hasLooseBVar","docLink":"./Lean/Expr.html#Lean.Expr.hasLooseBVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1126-L1129","name":"Lean.Expr.isArrow","docLink":"./Lean/Expr.html#Lean.Expr.isArrow","doc":"Return `true` if `e` is a non-dependent arrow.\nRemark: the following function assumes `e` does not have loose bound variables.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1119-L1120","name":"Lean.Expr.hasLooseBVars","docLink":"./Lean/Expr.html#Lean.Expr.hasLooseBVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1115-L1117","name":"Lean.Expr.projIdx!","docLink":"./Lean/Expr.html#Lean.Expr.projIdx!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1111-L1113","name":"Lean.Expr.projExpr!","docLink":"./Lean/Expr.html#Lean.Expr.projExpr!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1107-L1109","name":"Lean.Expr.mdataExpr!","docLink":"./Lean/Expr.html#Lean.Expr.mdataExpr!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1103-L1105","name":"Lean.Expr.consumeMData","docLink":"./Lean/Expr.html#Lean.Expr.consumeMData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1099-L1101","name":"Lean.Expr.letBody!","docLink":"./Lean/Expr.html#Lean.Expr.letBody!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1095-L1097","name":"Lean.Expr.letValue!","docLink":"./Lean/Expr.html#Lean.Expr.letValue!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1091-L1093","name":"Lean.Expr.letType!","docLink":"./Lean/Expr.html#Lean.Expr.letType!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1087-L1089","name":"Lean.Expr.letName!","docLink":"./Lean/Expr.html#Lean.Expr.letName!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1082-L1085","name":"Lean.Expr.bindingInfo!","docLink":"./Lean/Expr.html#Lean.Expr.bindingInfo!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1077-L1080","name":"Lean.Expr.bindingBody!","docLink":"./Lean/Expr.html#Lean.Expr.bindingBody!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1072-L1075","name":"Lean.Expr.bindingDomain!","docLink":"./Lean/Expr.html#Lean.Expr.bindingDomain!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1067-L1070","name":"Lean.Expr.bindingName!","docLink":"./Lean/Expr.html#Lean.Expr.bindingName!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1063-L1065","name":"Lean.Expr.mvarId!","docLink":"./Lean/Expr.html#Lean.Expr.mvarId!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1059-L1061","name":"Lean.Expr.fvarId!","docLink":"./Lean/Expr.html#Lean.Expr.fvarId!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1055-L1057","name":"Lean.Expr.bvarIdx!","docLink":"./Lean/Expr.html#Lean.Expr.bvarIdx!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1051-L1053","name":"Lean.Expr.constLevels!","docLink":"./Lean/Expr.html#Lean.Expr.constLevels!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1047-L1049","name":"Lean.Expr.constName?","docLink":"./Lean/Expr.html#Lean.Expr.constName?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1043-L1045","name":"Lean.Expr.constName!","docLink":"./Lean/Expr.html#Lean.Expr.constName!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1040-L1041","name":"Lean.Expr.isCharLit","docLink":"./Lean/Expr.html#Lean.Expr.isCharLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1036-L1038","name":"Lean.Expr.isStringLit","docLink":"./Lean/Expr.html#Lean.Expr.isStringLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1032-L1034","name":"Lean.Expr.natLit?","docLink":"./Lean/Expr.html#Lean.Expr.natLit?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1028-L1030","name":"Lean.Expr.isNatLit","docLink":"./Lean/Expr.html#Lean.Expr.isNatLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1024-L1026","name":"Lean.Expr.litValue!","docLink":"./Lean/Expr.html#Lean.Expr.litValue!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1020-L1022","name":"Lean.Expr.sortLevel!","docLink":"./Lean/Expr.html#Lean.Expr.sortLevel!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1015-L1018","name":"Lean.Expr.appArg!'","docLink":"./Lean/Expr.html#Lean.Expr.appArg!'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1010-L1013","name":"Lean.Expr.appFn!'","docLink":"./Lean/Expr.html#Lean.Expr.appFn!'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1006-L1008","name":"Lean.Expr.appArg!","docLink":"./Lean/Expr.html#Lean.Expr.appArg!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L1002-L1004","name":"Lean.Expr.appFn!","docLink":"./Lean/Expr.html#Lean.Expr.appFn!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L996-L1000","name":"Lean.Expr.isAppOfArity'","docLink":"./Lean/Expr.html#Lean.Expr.isAppOfArity'","doc":"Similar to `isAppOfArity` but skips `Expr.mdata`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L990-L993","name":"Lean.Expr.isAppOfArity","docLink":"./Lean/Expr.html#Lean.Expr.isAppOfArity","doc":"Given `f a₁ ... aᵢ`, returns true if `f` is a constant\nwith name `n` and has the correct number of arguments.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L981-L984","name":"Lean.Expr.isAppOf","docLink":"./Lean/Expr.html#Lean.Expr.isAppOf","doc":"Given `f a₀ a₁ ... aₙ`, returns true if `f` is a constant with name `n`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L977-L978","name":"Lean.Expr.getArgD","docLink":"./Lean/Expr.html#Lean.Expr.getArgD","doc":"Given `f a₀ a₁ ... aₙ`, returns the `i`th argument or returns `v₀` if out of bounds. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L973-L974","name":"Lean.Expr.getArg!","docLink":"./Lean/Expr.html#Lean.Expr.getArg!","doc":"Given `f a₀ a₁ ... aₙ`, returns the `i`th argument or panics if out of bounds. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L967-L970","name":"Lean.Expr.getRevArg!","docLink":"./Lean/Expr.html#Lean.Expr.getRevArg!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L962-L965","name":"Lean.Expr.getRevArgD","docLink":"./Lean/Expr.html#Lean.Expr.getRevArgD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L959-L960","name":"Lean.Expr.withAppRev","docLink":"./Lean/Expr.html#Lean.Expr.withAppRev","doc":"Same as `withApp` but with arguments reversed. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L950-L952","name":"Lean.Expr.traverseApp","docLink":"./Lean/Expr.html#Lean.Expr.traverseApp","doc":"Given `e = fn a₁ ... aₙ`, runs `f` on `fn` and each of the arguments `aᵢ` and\nmakes a new function application with the results. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L943-L946","name":"Lean.Expr.withApp","docLink":"./Lean/Expr.html#Lean.Expr.withApp","doc":"Given `e = f a₁ a₂ ... aₙ`, returns `k f #[a₁, ..., aₙ]`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L938-L940","name":"Lean.Expr.withAppAux","docLink":"./Lean/Expr.html#Lean.Expr.withAppAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L935-L936","name":"Lean.Expr.getAppRevArgs","docLink":"./Lean/Expr.html#Lean.Expr.getAppRevArgs","doc":"Same as `getAppArgs` but reverse the output array. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L925-L928","name":"Lean.Expr.getAppArgs","docLink":"./Lean/Expr.html#Lean.Expr.getAppArgs","doc":"Given `f a₁ a₂ ... aₙ`, returns `#[a₁, ..., aₙ]` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L917-L918","name":"Lean.Expr.getAppNumArgs","docLink":"./Lean/Expr.html#Lean.Expr.getAppNumArgs","doc":"Counts the number `n` of arguments for an expression `f a₁ .. aₙ`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L908-L910","name":"Lean.Expr.getAppFn","docLink":"./Lean/Expr.html#Lean.Expr.getAppFn","doc":"If the given expression is a sequence of\nfunction applications `f a₁ .. aₙ`, return `f`.\nOtherwise return the input expression.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L899-L901","name":"Lean.Expr.getForallBinderNames","docLink":"./Lean/Expr.html#Lean.Expr.getForallBinderNames","doc":"Given a sequence of nested foralls `(a₁ : α₁) → ... → (aₙ : αₙ) → _`,\nreturns the names `[a₁, ... aₙ]`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L892-L895","name":"Lean.Expr.getForallBodyMaxDepth","docLink":"./Lean/Expr.html#Lean.Expr.getForallBodyMaxDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L888-L890","name":"Lean.Expr.getForallBody","docLink":"./Lean/Expr.html#Lean.Expr.getForallBody","doc":"Return the \"body\" of a forall expression.\nExample: let `e` be the representation for `forall (p : Prop) (q : Prop), p ∧ q`, then\n`getForallBody e` returns ``.app (.app (.const `And []) (.bvar 1)) (.bvar 0)``\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L879-L881","name":"Lean.Expr.isLit","docLink":"./Lean/Expr.html#Lean.Expr.isLit","doc":"Return `true` if the given expression is a literal value. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L874-L876","name":"Lean.Expr.isMData","docLink":"./Lean/Expr.html#Lean.Expr.isMData","doc":"Return `true` if the given expression is a metadata. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L869-L871","name":"Lean.Expr.isLet","docLink":"./Lean/Expr.html#Lean.Expr.isLet","doc":"Return `true` if the given expression is a let-expression. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L863-L866","name":"Lean.Expr.isBinding","docLink":"./Lean/Expr.html#Lean.Expr.isBinding","doc":"Return `true` if the given expression is a forall or lambda expression. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L858-L860","name":"Lean.Expr.isLambda","docLink":"./Lean/Expr.html#Lean.Expr.isLambda","doc":"Return `true` if the given expression is a lambda abstraction aka anonymous function. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L853-L855","name":"Lean.Expr.isForall","docLink":"./Lean/Expr.html#Lean.Expr.isForall","doc":"Return `true` if the given expression is a forall-expression aka (dependent) arrow. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L848-L850","name":"Lean.Expr.isFVarOf","docLink":"./Lean/Expr.html#Lean.Expr.isFVarOf","doc":"Return `true` if the given expression is a free variable with the given id.\nExamples:\n- `isFVarOf (.fvar id) id` is `true`\n- ``isFVarOf (.fvar id) id'`` is `false`\n- ``isFVarOf (.sort levelZero) id`` is `false`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L837-L839","name":"Lean.Expr.isConstOf","docLink":"./Lean/Expr.html#Lean.Expr.isConstOf","doc":"Return `true` if the given expression is a constant of the give name.\nExamples:\n- `` (.const `Nat []).isConstOf `Nat `` is `true`\n- `` (.const `Nat []).isConstOf `False `` is `false`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L827-L829","name":"Lean.Expr.isConst","docLink":"./Lean/Expr.html#Lean.Expr.isConst","doc":"Return `true` if the given expression is a constant. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L822-L824","name":"Lean.Expr.isProj","docLink":"./Lean/Expr.html#Lean.Expr.isProj","doc":"Return `true` if the given expression is a projection `.proj ..` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L817-L819","name":"Lean.Expr.isApp","docLink":"./Lean/Expr.html#Lean.Expr.isApp","doc":"Return `true` if the given expression is an application. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L812-L814","name":"Lean.Expr.isFVar","docLink":"./Lean/Expr.html#Lean.Expr.isFVar","doc":"Return `true` if the given expression is a free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L807-L809","name":"Lean.Expr.isMVar","docLink":"./Lean/Expr.html#Lean.Expr.isMVar","doc":"Return `true` if the given expression is a metavariable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L802-L804","name":"Lean.Expr.isBVar","docLink":"./Lean/Expr.html#Lean.Expr.isBVar","doc":"Return `true` if the given expression is a bound variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L797-L799","name":"Lean.Expr.isProp","docLink":"./Lean/Expr.html#Lean.Expr.isProp","doc":"Return `true` if the given expression is a `.sort .zero` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L792-L794","name":"Lean.Expr.isType0","docLink":"./Lean/Expr.html#Lean.Expr.isType0","doc":"Return `true` if the given expression is of the form `.sort (.succ .zero)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L787-L789","name":"Lean.Expr.isType","docLink":"./Lean/Expr.html#Lean.Expr.isType","doc":"Return `true` if the given expression is of the form `.sort (.succ ..)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L782-L784","name":"Lean.Expr.isSort","docLink":"./Lean/Expr.html#Lean.Expr.isSort","doc":"Return `true` if the given expression is a `.sort ..` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L779-L779","name":"Lean.Expr.equal","docLink":"./Lean/Expr.html#Lean.Expr.equal","doc":"Return true iff `a` and `b` are equal.\nBinder names and annotations are taking into account.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L771-L772","name":"Lean.Expr.instBEqExpr","docLink":"./Lean/Expr.html#Lean.Expr.instBEqExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L769-L769","name":"Lean.Expr.eqv","docLink":"./Lean/Expr.html#Lean.Expr.eqv","doc":"Return true iff `a` and `b` are alpha equivalent.\nBinder annotations are ignored.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L762-L762","name":"Lean.Expr.lt","docLink":"./Lean/Expr.html#Lean.Expr.lt","doc":"A total order for expressions that takes the structure into account (e.g., variable names). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L758-L758","name":"Lean.Expr.quickLt","docLink":"./Lean/Expr.html#Lean.Expr.quickLt","doc":"A total order for expressions. We say it is quick because it first compares the hashcodes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L754-L754","name":"Lean.Expr.dbgToString","docLink":"./Lean/Expr.html#Lean.Expr.dbgToString","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L748-L749","name":"Lean.mkAppRev","docLink":"./Lean/Expr.html#Lean.mkAppRev","doc":"Same as `mkApp f args` but reversing `args`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L744-L745","name":"Lean.mkAppRange","docLink":"./Lean/Expr.html#Lean.mkAppRange","doc":"`mkAppRange f i j #[a_1, ..., a_i, ..., a_j, ... ]` ==> the expression `f a_i ... a_{j-1}` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L737-L738","name":"Lean.mkAppN","docLink":"./Lean/Expr.html#Lean.mkAppN","doc":"`mkAppN f #[a₀, ..., aₙ]` ==> `f a₀ a₁ .. aₙ`"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L734-L734","name":"Lean.mkProjEx","docLink":"./Lean/Expr.html#Lean.mkProjEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L733-L733","name":"Lean.mkMDataEx","docLink":"./Lean/Expr.html#Lean.mkMDataEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L732-L732","name":"Lean.mkLitEx","docLink":"./Lean/Expr.html#Lean.mkLitEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L731-L731","name":"Lean.mkLetEx","docLink":"./Lean/Expr.html#Lean.mkLetEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L730-L730","name":"Lean.mkForallEx","docLink":"./Lean/Expr.html#Lean.mkForallEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L729-L729","name":"Lean.mkLambdaEx","docLink":"./Lean/Expr.html#Lean.mkLambdaEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L728-L728","name":"Lean.mkAppEx","docLink":"./Lean/Expr.html#Lean.mkAppEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L727-L727","name":"Lean.mkConstEx","docLink":"./Lean/Expr.html#Lean.mkConstEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L726-L726","name":"Lean.mkSortEx","docLink":"./Lean/Expr.html#Lean.mkSortEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L725-L725","name":"Lean.mkMVarEx","docLink":"./Lean/Expr.html#Lean.mkMVarEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L724-L724","name":"Lean.mkFVarEx","docLink":"./Lean/Expr.html#Lean.mkFVarEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L723-L723","name":"Lean.mkBVarEx","docLink":"./Lean/Expr.html#Lean.mkBVarEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L720-L721","name":"Lean.mkStrLit","docLink":"./Lean/Expr.html#Lean.mkStrLit","doc":"Return the string literal `.lit (.strVal s)` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L715-L717","name":"Lean.mkNatLit","docLink":"./Lean/Expr.html#Lean.mkNatLit","doc":"Return a natural number literal used in the frontend. It is a `OfNat.ofNat` application.\nRecall that all theorems and definitions containing numeric literals are encoded using\n`OfNat.ofNat` applications in the frontend.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L707-L708","name":"Lean.mkRawNatLit","docLink":"./Lean/Expr.html#Lean.mkRawNatLit","doc":"Return the \"raw\" natural number `.lit (.natVal n)`.\nThis is not the default representation used by the Lean frontend.\nSee `mkNatLit`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L699-L700","name":"Lean.mkLit","docLink":"./Lean/Expr.html#Lean.mkLit","doc":"`.lit l` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L694-L694","name":"Lean.mkApp10","docLink":"./Lean/Expr.html#Lean.mkApp10","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L693-L693","name":"Lean.mkApp9","docLink":"./Lean/Expr.html#Lean.mkApp9","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L692-L692","name":"Lean.mkApp8","docLink":"./Lean/Expr.html#Lean.mkApp8","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L691-L691","name":"Lean.mkApp7","docLink":"./Lean/Expr.html#Lean.mkApp7","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L690-L690","name":"Lean.mkApp6","docLink":"./Lean/Expr.html#Lean.mkApp6","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L689-L689","name":"Lean.mkApp5","docLink":"./Lean/Expr.html#Lean.mkApp5","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L688-L688","name":"Lean.mkApp4","docLink":"./Lean/Expr.html#Lean.mkApp4","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L687-L687","name":"Lean.mkApp3","docLink":"./Lean/Expr.html#Lean.mkApp3","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L686-L686","name":"Lean.mkApp2","docLink":"./Lean/Expr.html#Lean.mkApp2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L685-L685","name":"Lean.mkAppB","docLink":"./Lean/Expr.html#Lean.mkAppB","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L682-L683","name":"Lean.mkLet","docLink":"./Lean/Expr.html#Lean.mkLet","doc":"`.letE x t v b nonDep` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L676-L677","name":"Lean.mkSimpleThunk","docLink":"./Lean/Expr.html#Lean.mkSimpleThunk","doc":"Return `fun (_ : Unit), e` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L672-L673","name":"Lean.mkSimpleThunkType","docLink":"./Lean/Expr.html#Lean.mkSimpleThunkType","doc":"Return `Unit -> type`. Do not confuse with `Thunk type` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L668-L669","name":"Lean.mkForall","docLink":"./Lean/Expr.html#Lean.mkForall","doc":"`.forallE x t b bi` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L662-L663","name":"Lean.mkLambda","docLink":"./Lean/Expr.html#Lean.mkLambda","doc":"`.lam x t b bi` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L656-L657","name":"Lean.mkApp","docLink":"./Lean/Expr.html#Lean.mkApp","doc":"`.app f a` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L650-L651","name":"Lean.mkProj","docLink":"./Lean/Expr.html#Lean.mkProj","doc":"`.proj structName idx struct` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L644-L645","name":"Lean.mkMData","docLink":"./Lean/Expr.html#Lean.mkMData","doc":"`.mdata m e` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L638-L639","name":"Lean.mkMVar","docLink":"./Lean/Expr.html#Lean.mkMVar","doc":"`.mvar mvarId` is now the preferred form.\nThis function is seldom used, metavariables are often created using functions such\nas `mkFresheExprMVar` at `MetaM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L630-L631","name":"Lean.mkFVar","docLink":"./Lean/Expr.html#Lean.mkFVar","doc":"`.fvar fvarId` is now the preferred form.\nThis function is seldom used, free variables are often automatically created using the\ntelescope functions (e.g., `forallTelescope` and `lambdaTelescope`) at `MetaM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L622-L623","name":"Lean.mkSort","docLink":"./Lean/Expr.html#Lean.mkSort","doc":"`.sort u` is now the preferred form. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L618-L619","name":"Lean.mkBVar","docLink":"./Lean/Expr.html#Lean.mkBVar","doc":"`.bvar idx` is now the preferred form. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L615-L615","name":"Lean.Literal.typeEx","docLink":"./Lean/Expr.html#Lean.Literal.typeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L610-L612","name":"Lean.Literal.type","docLink":"./Lean/Expr.html#Lean.Literal.type","doc":"Return the type of a literal value. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L606-L607","name":"Lean.mkConst","docLink":"./Lean/Expr.html#Lean.mkConst","doc":"`mkConst declName us` return `.const declName us`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L601-L601","name":"Lean.Expr.binderInfoEx","docLink":"./Lean/Expr.html#Lean.Expr.binderInfoEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L600-L600","name":"Lean.Expr.looseBVarRangeEx","docLink":"./Lean/Expr.html#Lean.Expr.looseBVarRangeEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L599-L599","name":"Lean.Expr.hasLevelParamEx","docLink":"./Lean/Expr.html#Lean.Expr.hasLevelParamEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L598-L598","name":"Lean.Expr.hasMVarEx","docLink":"./Lean/Expr.html#Lean.Expr.hasMVarEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L597-L597","name":"Lean.Expr.hasLevelMVarEx","docLink":"./Lean/Expr.html#Lean.Expr.hasLevelMVarEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L596-L596","name":"Lean.Expr.hasExprMVarEx","docLink":"./Lean/Expr.html#Lean.Expr.hasExprMVarEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L595-L595","name":"Lean.Expr.hasFVarEx","docLink":"./Lean/Expr.html#Lean.Expr.hasFVarEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L594-L594","name":"Lean.Expr.hashEx","docLink":"./Lean/Expr.html#Lean.Expr.hashEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L585-L589","name":"Lean.Expr.binderInfo","docLink":"./Lean/Expr.html#Lean.Expr.binderInfo","doc":"Return the binder information if `e` is a lambda or forall expression, and `.default` otherwise.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L579-L580","name":"Lean.Expr.looseBVarRange","docLink":"./Lean/Expr.html#Lean.Expr.looseBVarRange","doc":"The range of de-Bruijn variables that are loose.\nThat is, bvars that are not bound by a binder.\nFor example, `bvar i` has range `i + 1` and\nan expression with no loose bvars has range `0`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L570-L571","name":"Lean.Expr.approxDepth","docLink":"./Lean/Expr.html#Lean.Expr.approxDepth","doc":"Return the approximated depth of an expression. This information is used to compute\nthe expression hash code, and speedup comparisons.\nThis is a constant time operation. We say it is approximate because it maxes out at `255`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L562-L563","name":"Lean.Expr.hasLevelParam","docLink":"./Lean/Expr.html#Lean.Expr.hasLevelParam","doc":"Return true if `e` contains universe level parameters.\nThis is a constant time operation.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L554-L556","name":"Lean.Expr.hasMVar","docLink":"./Lean/Expr.html#Lean.Expr.hasMVar","doc":"Does the expression contain level (aka universe) or expression metavariables?\nThis is a constant time operation.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L547-L548","name":"Lean.Expr.hasLevelMVar","docLink":"./Lean/Expr.html#Lean.Expr.hasLevelMVar","doc":"Return `true` if `e` contains universe (aka `Level`) metavariables.\nThis is a constant time operation.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L540-L541","name":"Lean.Expr.hasExprMVar","docLink":"./Lean/Expr.html#Lean.Expr.hasExprMVar","doc":"Return `true` if `e` contains expression metavariables.\nThis is a constant time operation.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L533-L534","name":"Lean.Expr.hasFVar","docLink":"./Lean/Expr.html#Lean.Expr.hasFVar","doc":"Return `true` if `e` contains free variables.\nThis is a constant time operation.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L527-L527","name":"Lean.Expr.instHashableExpr","docLink":"./Lean/Expr.html#Lean.Expr.instHashableExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L524-L525","name":"Lean.Expr.hash","docLink":"./Lean/Expr.html#Lean.Expr.hash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L510-L522","name":"Lean.Expr.ctorName","docLink":"./Lean/Expr.html#Lean.Expr.ctorName","doc":"The constructor name for the given expression. This is used for debugging purposes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L505-L505","name":"Lean.instReprExpr","docLink":"./Lean/Expr.html#Lean.instReprExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L505-L505","name":"Lean.instInhabitedExpr","docLink":"./Lean/Expr.html#Lean.instInhabitedExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L294-L505","name":"Lean.Expr","docLink":"./Lean/Expr.html#Lean.Expr","doc":"Lean expressions. This data structure is used in the kernel and\nelaborator. However, expressions sent to the kernel should not\ncontain metavariables.\n\nRemark: we use the `E` suffix (short for `Expr`) to avoid collision with keywords.\nWe considered using «...», but it is too inconvenient to use.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L286-L505","name":"Lean.Expr.data","docLink":"./Lean/Expr.html#Lean.Expr.data","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L283-L284","name":"Lean.instInhabitedMVarIdMap","docLink":"./Lean/Expr.html#Lean.instInhabitedMVarIdMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L281-L281","name":"Lean.instForInMVarIdMapProdMVarId","docLink":"./Lean/Expr.html#Lean.instForInMVarIdMapProdMVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L279-L279","name":"Lean.instEmptyCollectionMVarIdMap","docLink":"./Lean/Expr.html#Lean.instEmptyCollectionMVarIdMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L276-L277","name":"Lean.MVarIdMap.insert","docLink":"./Lean/Expr.html#Lean.MVarIdMap.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L274-L274","name":"Lean.MVarIdMap","docLink":"./Lean/Expr.html#Lean.MVarIdMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L272-L272","name":"Lean.instForInMVarIdSetMVarId","docLink":"./Lean/Expr.html#Lean.instForInMVarIdSetMVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L269-L270","name":"Lean.MVarIdSet.insert","docLink":"./Lean/Expr.html#Lean.MVarIdSet.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L266-L267","name":"Lean.MVarIdSet","docLink":"./Lean/Expr.html#Lean.MVarIdSet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L263-L264","name":"Lean.instReprMVarId_1","docLink":"./Lean/Expr.html#Lean.instReprMVarId_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L261-L261","name":"Lean.instReprMVarId","docLink":"./Lean/Expr.html#Lean.instReprMVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L261-L261","name":"Lean.instHashableMVarId","docLink":"./Lean/Expr.html#Lean.instHashableMVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L261-L261","name":"Lean.instBEqMVarId","docLink":"./Lean/Expr.html#Lean.instBEqMVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L261-L261","name":"Lean.instInhabitedMVarId","docLink":"./Lean/Expr.html#Lean.instInhabitedMVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L259-L261","name":"Lean.MVarId","docLink":"./Lean/Expr.html#Lean.MVarId","doc":"Universe metavariable Id   "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L255-L256","name":"Lean.instInhabitedFVarIdMap","docLink":"./Lean/Expr.html#Lean.instInhabitedFVarIdMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L253-L253","name":"Lean.instEmptyCollectionFVarIdMap","docLink":"./Lean/Expr.html#Lean.instEmptyCollectionFVarIdMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L250-L251","name":"Lean.FVarIdMap.insert","docLink":"./Lean/Expr.html#Lean.FVarIdMap.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L248-L248","name":"Lean.FVarIdMap","docLink":"./Lean/Expr.html#Lean.FVarIdMap","doc":"A mapping from free variable identifiers to values of type `α`.\nThis is a persistent data structure implemented using red-black trees. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L242-L243","name":"Lean.FVarIdHashSet","docLink":"./Lean/Expr.html#Lean.FVarIdHashSet","doc":"A set of unique free variable identifiers implemented using hashtables.\nHashtables are faster than red-black trees if they are used linearly.\nThey are not persistent data-structures. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L235-L236","name":"Lean.FVarIdSet.insert","docLink":"./Lean/Expr.html#Lean.FVarIdSet.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L233-L233","name":"Lean.instForInFVarIdSetFVarId","docLink":"./Lean/Expr.html#Lean.instForInFVarIdSetFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L230-L231","name":"Lean.FVarIdSet","docLink":"./Lean/Expr.html#Lean.FVarIdSet","doc":"A set of unique free variable identifiers.\nThis is a persistent data structure implemented using red-black trees. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L224-L225","name":"Lean.instReprFVarId","docLink":"./Lean/Expr.html#Lean.instReprFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L222-L222","name":"Lean.instHashableFVarId","docLink":"./Lean/Expr.html#Lean.instHashableFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L222-L222","name":"Lean.instBEqFVarId","docLink":"./Lean/Expr.html#Lean.instBEqFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L222-L222","name":"Lean.instInhabitedFVarId","docLink":"./Lean/Expr.html#Lean.instInhabitedFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L220-L222","name":"Lean.FVarId","docLink":"./Lean/Expr.html#Lean.FVarId","doc":"The unique free variable identifier. It is just a hierarchical name,\nbut we wrap it in `FVarId` to make sure they don't get mixed up with `MVarId`.\n\nThis is not the user-facing name for a free variable. This information is stored\nin the local context (`LocalContext`). The unique identifiers are generated using\na `NameGenerator`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L195-L208","name":"Lean.instReprData_1","docLink":"./Lean/Expr.html#Lean.instReprData_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L192-L193","name":"Lean.Expr.mkDataForLet","docLink":"./Lean/Expr.html#Lean.Expr.mkDataForLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L189-L190","name":"Lean.Expr.mkDataForBinder","docLink":"./Lean/Expr.html#Lean.Expr.mkDataForBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L179-L187","name":"Lean.Expr.mkAppData","docLink":"./Lean/Expr.html#Lean.Expr.mkAppData","doc":"Optimized version of `Expr.mkData` for applications. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L162-L176","name":"Lean.Expr.mkData","docLink":"./Lean/Expr.html#Lean.Expr.mkData","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L156-L160","name":"Lean.BinderInfo.toUInt64","docLink":"./Lean/Expr.html#Lean.BinderInfo.toUInt64","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L152-L153","name":"Lean.Expr.Data.hasLevelParam","docLink":"./Lean/Expr.html#Lean.Expr.Data.hasLevelParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L149-L150","name":"Lean.Expr.Data.hasLevelMVar","docLink":"./Lean/Expr.html#Lean.Expr.Data.hasLevelMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L146-L147","name":"Lean.Expr.Data.hasExprMVar","docLink":"./Lean/Expr.html#Lean.Expr.Data.hasExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L143-L144","name":"Lean.Expr.Data.hasFVar","docLink":"./Lean/Expr.html#Lean.Expr.Data.hasFVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L140-L141","name":"Lean.Expr.Data.looseBVarRange","docLink":"./Lean/Expr.html#Lean.Expr.Data.looseBVarRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L137-L138","name":"Lean.Expr.Data.approxDepth","docLink":"./Lean/Expr.html#Lean.Expr.Data.approxDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L134-L135","name":"Lean.instBEqData_1","docLink":"./Lean/Expr.html#Lean.instBEqData_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L131-L132","name":"Lean.Expr.Data.hash","docLink":"./Lean/Expr.html#Lean.Expr.Data.hash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L128-L129","name":"Lean.instInhabitedData_1","docLink":"./Lean/Expr.html#Lean.instInhabitedData_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L126-L126","name":"Lean.Expr.Data","docLink":"./Lean/Expr.html#Lean.Expr.Data","doc":"Cached hash code, cached results, and other data for `Expr`.\n-  hash           : 32-bits\n-  approxDepth    : 8-bits -- the approximate depth is used to minimize the number of hash collisions\n-  hasFVar        : 1-bit -- does it contain free variables?\n-  hasExprMVar    : 1-bit -- does it contain metavariables?\n-  hasLevelMVar   : 1-bit -- does it contain level metavariables?\n-  hasLevelParam  : 1-bit -- does it contain level parameters?\n-  looseBVarRange : 20-bits\n\nRemark: this is mostly an internal datastructure used to implement `Expr`,\nmost will never have to use it.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L111-L111","name":"Lean.MData.empty","docLink":"./Lean/Expr.html#Lean.MData.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L110-L110","name":"Lean.MData","docLink":"./Lean/Expr.html#Lean.MData","doc":"Expression metadata. Used with the `Expr.mdata` constructor. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L105-L107","name":"Lean.BinderInfo.isStrictImplicit","docLink":"./Lean/Expr.html#Lean.BinderInfo.isStrictImplicit","doc":"Return `true` if the given `BinderInfo` is a strict implicit annotation (e.g., `{{α : Type u}}`) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L100-L102","name":"Lean.BinderInfo.isImplicit","docLink":"./Lean/Expr.html#Lean.BinderInfo.isImplicit","doc":"Return `true` if the given `BinderInfo` is a regular implicit annotation (e.g., `{α : Type u}`) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L95-L97","name":"Lean.BinderInfo.isInstImplicit","docLink":"./Lean/Expr.html#Lean.BinderInfo.isInstImplicit","doc":"Return `true` if the given `BinderInfo` is an instance implicit annotation (e.g., `[Decidable α]`) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L92-L92","name":"Lean.instHashableBinderInfo","docLink":"./Lean/Expr.html#Lean.instHashableBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L86-L90","name":"Lean.BinderInfo.isExplicit","docLink":"./Lean/Expr.html#Lean.BinderInfo.isExplicit","doc":"Return `true` if the given `BinderInfo` does not correspond to an implicit binder annotation\n(i.e., `implicit`, `strictImplicit`, or `instImplicit`).\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L76-L80","name":"Lean.BinderInfo.hash","docLink":"./Lean/Expr.html#Lean.BinderInfo.hash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L74-L74","name":"Lean.instReprBinderInfo","docLink":"./Lean/Expr.html#Lean.instReprBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L74-L74","name":"Lean.instBEqBinderInfo","docLink":"./Lean/Expr.html#Lean.instBEqBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L74-L74","name":"Lean.instInhabitedBinderInfo","docLink":"./Lean/Expr.html#Lean.instInhabitedBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L65-L74","name":"Lean.BinderInfo","docLink":"./Lean/Expr.html#Lean.BinderInfo","doc":"Arguments in forallE binders can be labelled as implicit or explicit.\n\nEach `lam` or `forallE` binder comes with a `binderInfo` argument (stored in ExprData).\nThis can be set to\n- `default` -- `(x : α)`\n- `implicit` --  `{x : α}`\n- `strict_implicit` -- `⦃x : α⦄`\n- `inst_implicit` -- `[x : α]`.\n- `aux_decl` -- Auxillary definitions are helper methods that\n  Lean generates. `aux_decl` is used for `_match`, `_fun_match`,\n  `_let_match` and the self reference that appears in recursive pattern matching.\n\nThe difference between implicit `{}` and strict-implicit `⦃⦄` is how\nimplicit arguments are treated that are *not* followed by explicit arguments.\n`{}` arguments are applied eagerly, while `⦃⦄` arguments are left partially applied:\n```\ndef foo {x : Nat} : Nat := x\ndef bar ⦃x : Nat⦄ : Nat := x\n#check foo -- foo : Nat\n#check bar -- bar : ⦃x : Nat⦄ → Nat\n```\n\nSee also the Lean manual: https://leanprover.github.io/lean4/doc/expressions.html#implicit-arguments\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L37-L38","name":"Lean.instDecidableLtLiteralInstLTLiteral","docLink":"./Lean/Expr.html#Lean.instDecidableLtLiteralInstLTLiteral","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L35-L35","name":"Lean.instLTLiteral","docLink":"./Lean/Expr.html#Lean.instLTLiteral","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L29-L33","name":"Lean.Literal.lt","docLink":"./Lean/Expr.html#Lean.Literal.lt","doc":"Total order on `Expr` literal values.\nNatural number values are smaller than string literal values.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L23-L23","name":"Lean.instHashableLiteral","docLink":"./Lean/Expr.html#Lean.instHashableLiteral","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L19-L21","name":"Lean.Literal.hash","docLink":"./Lean/Expr.html#Lean.Literal.hash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L17-L17","name":"Lean.instReprLiteral","docLink":"./Lean/Expr.html#Lean.instReprLiteral","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L17-L17","name":"Lean.instBEqLiteral","docLink":"./Lean/Expr.html#Lean.instBEqLiteral","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L17-L17","name":"Lean.instInhabitedLiteral","docLink":"./Lean/Expr.html#Lean.instInhabitedLiteral","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/9b406132070ba483ba6b7c698b8d76b59a67a16a/src/Lean/Expr.lean#L12-L17","name":"Lean.Literal","docLink":"./Lean/Expr.html#Lean.Literal","doc":"Literal values for `Expr`. "}]}