{"name":"Lean.Elab.Arg","instances":[{"typeNames":["Lean.Elab.Term.Arg"],"name":"Lean.Elab.Term.instInhabitedArg","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.NamedArg"],"name":"Lean.Elab.Term.instInhabitedNamedArg","className":"Inhabited"}],"imports":["Init","Lean.Elab.Term"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/Arg.lean#L54-L56","name":"Lean.Elab.Term.expandApp","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.expandApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/Arg.lean#L33-L52","name":"Lean.Elab.Term.expandArgs","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.expandArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/Arg.lean#L28-L31","name":"Lean.Elab.Term.addNamedArg","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.addNamedArg","doc":"Add a new named argument to `namedArgs`, and throw an error if it already contains a named argument\nwith the same name. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/Arg.lean#L23-L23","name":"Lean.Elab.Term.instInhabitedNamedArg","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedNamedArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/Arg.lean#L19-L23","name":"Lean.Elab.Term.NamedArg","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg","doc":"Named arguments created using the notation `(x := val)` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/Arg.lean#L16-L16","name":"Lean.Elab.Term.instInhabitedArg","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/23ba495205f8133628d85dde572aad0c1089c094/src/Lean/Elab/Arg.lean#L13-L16","name":"Lean.Elab.Term.Arg","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg","doc":"Auxiliary inductive datatype for combining unelaborated syntax\nand already elaborated expressions. It is used to elaborate applications. "}]}